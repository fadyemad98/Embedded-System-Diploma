
unit7_lesson4_lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cfc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08000e2c  08000e2c  00010e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e88  08000e88  00010e90  2**0
                  CONTENTS
  4 .ARM          00000000  08000e88  08000e88  00010e90  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e88  08000e90  00010e90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e88  08000e88  00010e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e8c  08000e8c  00010e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010e90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000000  08000e90  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08000e90  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010e90  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000336f  00000000  00000000  00010eb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000086b  00000000  00000000  00014228  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000009cc  00000000  00000000  00014a93  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001a8  00000000  00000000  00015460  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000160  00000000  00000000  00015608  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000022a9  00000000  00000000  00015768  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001c51  00000000  00000000  00017a11  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00009631  00000000  00000000  00019662  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00022c93  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000053c  00000000  00000000  00022d10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000e14 	.word	0x08000e14

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000e14 	.word	0x08000e14

08000170 <Enable_NVIC>:
 * 							Generic Functions
 * =======================================================================================
 */

void Enable_NVIC (uint16_t IRQ)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	switch (IRQ)
 800017a:	88fb      	ldrh	r3, [r7, #6]
 800017c:	2b0f      	cmp	r3, #15
 800017e:	d854      	bhi.n	800022a <Enable_NVIC+0xba>
 8000180:	a201      	add	r2, pc, #4	; (adr r2, 8000188 <Enable_NVIC+0x18>)
 8000182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000186:	bf00      	nop
 8000188:	080001c9 	.word	0x080001c9
 800018c:	080001d7 	.word	0x080001d7
 8000190:	080001e5 	.word	0x080001e5
 8000194:	080001f3 	.word	0x080001f3
 8000198:	08000201 	.word	0x08000201
 800019c:	0800020f 	.word	0x0800020f
 80001a0:	0800020f 	.word	0x0800020f
 80001a4:	0800020f 	.word	0x0800020f
 80001a8:	0800020f 	.word	0x0800020f
 80001ac:	0800020f 	.word	0x0800020f
 80001b0:	0800021d 	.word	0x0800021d
 80001b4:	0800021d 	.word	0x0800021d
 80001b8:	0800021d 	.word	0x0800021d
 80001bc:	0800021d 	.word	0x0800021d
 80001c0:	0800021d 	.word	0x0800021d
 80001c4:	0800021d 	.word	0x0800021d
	{
	case 0:
		NVIC_IRQ6_EXTI0_Enable ;
 80001c8:	4b1a      	ldr	r3, [pc, #104]	; (8000234 <Enable_NVIC+0xc4>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4a19      	ldr	r2, [pc, #100]	; (8000234 <Enable_NVIC+0xc4>)
 80001ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001d2:	6013      	str	r3, [r2, #0]
		break;
 80001d4:	e029      	b.n	800022a <Enable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Enable ;
 80001d6:	4b17      	ldr	r3, [pc, #92]	; (8000234 <Enable_NVIC+0xc4>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	4a16      	ldr	r2, [pc, #88]	; (8000234 <Enable_NVIC+0xc4>)
 80001dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80001e0:	6013      	str	r3, [r2, #0]
		break ;
 80001e2:	e022      	b.n	800022a <Enable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Enable ;
 80001e4:	4b13      	ldr	r3, [pc, #76]	; (8000234 <Enable_NVIC+0xc4>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a12      	ldr	r2, [pc, #72]	; (8000234 <Enable_NVIC+0xc4>)
 80001ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80001ee:	6013      	str	r3, [r2, #0]
		break ;
 80001f0:	e01b      	b.n	800022a <Enable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Enable ;
 80001f2:	4b10      	ldr	r3, [pc, #64]	; (8000234 <Enable_NVIC+0xc4>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a0f      	ldr	r2, [pc, #60]	; (8000234 <Enable_NVIC+0xc4>)
 80001f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001fc:	6013      	str	r3, [r2, #0]
		break ;
 80001fe:	e014      	b.n	800022a <Enable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Enable ;
 8000200:	4b0c      	ldr	r3, [pc, #48]	; (8000234 <Enable_NVIC+0xc4>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a0b      	ldr	r2, [pc, #44]	; (8000234 <Enable_NVIC+0xc4>)
 8000206:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800020a:	6013      	str	r3, [r2, #0]
		break ;
 800020c:	e00d      	b.n	800022a <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Enable;
 800020e:	4b09      	ldr	r3, [pc, #36]	; (8000234 <Enable_NVIC+0xc4>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4a08      	ldr	r2, [pc, #32]	; (8000234 <Enable_NVIC+0xc4>)
 8000214:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000218:	6013      	str	r3, [r2, #0]
		break ;
 800021a:	e006      	b.n	800022a <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Enable;
 800021c:	4b06      	ldr	r3, [pc, #24]	; (8000238 <Enable_NVIC+0xc8>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a05      	ldr	r2, [pc, #20]	; (8000238 <Enable_NVIC+0xc8>)
 8000222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000226:	6013      	str	r3, [r2, #0]
		break ;
 8000228:	bf00      	nop

	}
}
 800022a:	bf00      	nop
 800022c:	370c      	adds	r7, #12
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr
 8000234:	e000e100 	.word	0xe000e100
 8000238:	e000e104 	.word	0xe000e104

0800023c <Disable_NVIC>:

void Disable_NVIC (uint16_t IRQ)
{
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
 8000242:	4603      	mov	r3, r0
 8000244:	80fb      	strh	r3, [r7, #6]
	switch (IRQ)
 8000246:	88fb      	ldrh	r3, [r7, #6]
 8000248:	2b0f      	cmp	r3, #15
 800024a:	d854      	bhi.n	80002f6 <Disable_NVIC+0xba>
 800024c:	a201      	add	r2, pc, #4	; (adr r2, 8000254 <Disable_NVIC+0x18>)
 800024e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000252:	bf00      	nop
 8000254:	08000295 	.word	0x08000295
 8000258:	080002a3 	.word	0x080002a3
 800025c:	080002b1 	.word	0x080002b1
 8000260:	080002bf 	.word	0x080002bf
 8000264:	080002cd 	.word	0x080002cd
 8000268:	080002db 	.word	0x080002db
 800026c:	080002db 	.word	0x080002db
 8000270:	080002db 	.word	0x080002db
 8000274:	080002db 	.word	0x080002db
 8000278:	080002db 	.word	0x080002db
 800027c:	080002e9 	.word	0x080002e9
 8000280:	080002e9 	.word	0x080002e9
 8000284:	080002e9 	.word	0x080002e9
 8000288:	080002e9 	.word	0x080002e9
 800028c:	080002e9 	.word	0x080002e9
 8000290:	080002e9 	.word	0x080002e9
	{
	case 0:
		NVIC_IRQ6_EXTI0_Disable ;
 8000294:	4b1a      	ldr	r3, [pc, #104]	; (8000300 <Disable_NVIC+0xc4>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a19      	ldr	r2, [pc, #100]	; (8000300 <Disable_NVIC+0xc4>)
 800029a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800029e:	6013      	str	r3, [r2, #0]
		break;
 80002a0:	e029      	b.n	80002f6 <Disable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Disable ;
 80002a2:	4b17      	ldr	r3, [pc, #92]	; (8000300 <Disable_NVIC+0xc4>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	4a16      	ldr	r2, [pc, #88]	; (8000300 <Disable_NVIC+0xc4>)
 80002a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002ac:	6013      	str	r3, [r2, #0]
		break ;
 80002ae:	e022      	b.n	80002f6 <Disable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Disable ;
 80002b0:	4b13      	ldr	r3, [pc, #76]	; (8000300 <Disable_NVIC+0xc4>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a12      	ldr	r2, [pc, #72]	; (8000300 <Disable_NVIC+0xc4>)
 80002b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002ba:	6013      	str	r3, [r2, #0]
		break ;
 80002bc:	e01b      	b.n	80002f6 <Disable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Disable ;
 80002be:	4b10      	ldr	r3, [pc, #64]	; (8000300 <Disable_NVIC+0xc4>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	4a0f      	ldr	r2, [pc, #60]	; (8000300 <Disable_NVIC+0xc4>)
 80002c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002c8:	6013      	str	r3, [r2, #0]
		break ;
 80002ca:	e014      	b.n	80002f6 <Disable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Disable ;
 80002cc:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <Disable_NVIC+0xc4>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a0b      	ldr	r2, [pc, #44]	; (8000300 <Disable_NVIC+0xc4>)
 80002d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002d6:	6013      	str	r3, [r2, #0]
		break ;
 80002d8:	e00d      	b.n	80002f6 <Disable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Disable;
 80002da:	4b09      	ldr	r3, [pc, #36]	; (8000300 <Disable_NVIC+0xc4>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4a08      	ldr	r2, [pc, #32]	; (8000300 <Disable_NVIC+0xc4>)
 80002e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80002e4:	6013      	str	r3, [r2, #0]
		break ;
 80002e6:	e006      	b.n	80002f6 <Disable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Disable;
 80002e8:	4b06      	ldr	r3, [pc, #24]	; (8000304 <Disable_NVIC+0xc8>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a05      	ldr	r2, [pc, #20]	; (8000304 <Disable_NVIC+0xc8>)
 80002ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002f2:	6013      	str	r3, [r2, #0]
		break ;
 80002f4:	bf00      	nop

	}

}
 80002f6:	bf00      	nop
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bc80      	pop	{r7}
 80002fe:	4770      	bx	lr
 8000300:	e000e180 	.word	0xe000e180
 8000304:	e000e184 	.word	0xe000e184

08000308 <Update_EXTI>:





void Update_EXTI(EXTI_PinConfig_t* EXTI_Config){
 8000308:	b580      	push	{r7, lr}
 800030a:	b084      	sub	sp, #16
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]

	//1- Configure GPIO to be AF Input -> Floating INPUT

	GPIO_PINConfig_t PinCfg;
	//Update the GPIO Pin To Be Floating Input
	PinCfg.GPIO_PinNumber = EXTI_Config->EXTI_PIN.GPIO_PIN;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	891b      	ldrh	r3, [r3, #8]
 8000314:	813b      	strh	r3, [r7, #8]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO ;
 8000316:	2301      	movs	r3, #1
 8000318:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_Config->EXTI_PIN.GPIO_Port , &PinCfg);
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	685b      	ldr	r3, [r3, #4]
 800031e:	f107 0208 	add.w	r2, r7, #8
 8000322:	4611      	mov	r1, r2
 8000324:	4618      	mov	r0, r3
 8000326:	f000 fa5a 	bl	80007de <MCAL_GPIO_Init>
	//==============================================

	//2- UPDATE AFIO to Route between EXTI Line with PORT A,B,C,D

	uint8_t  AFIO_EXTICR_index = EXTI_Config->EXTI_PIN.EXTI_InputLineNumber / 4 ;
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	881b      	ldrh	r3, [r3, #0]
 800032e:	089b      	lsrs	r3, r3, #2
 8000330:	b29b      	uxth	r3, r3
 8000332:	73fb      	strb	r3, [r7, #15]

	uint8_t	AFIO_EXTICR_Postion = (EXTI_Config->EXTI_PIN.EXTI_InputLineNumber % 4) * 4 ;
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	881b      	ldrh	r3, [r3, #0]
 8000338:	b2db      	uxtb	r3, r3
 800033a:	f003 0303 	and.w	r3, r3, #3
 800033e:	b2db      	uxtb	r3, r3
 8000340:	009b      	lsls	r3, r3, #2
 8000342:	73bb      	strb	r3, [r7, #14]

	//clear the four bit
	AFIO->AFIO_EXTICR[AFIO_EXTICR_index ] &= ~(0xF <<AFIO_EXTICR_Postion );           //clear register index with specific line(position)
 8000344:	4a5f      	ldr	r2, [pc, #380]	; (80004c4 <Update_EXTI+0x1bc>)
 8000346:	7bfb      	ldrb	r3, [r7, #15]
 8000348:	3302      	adds	r3, #2
 800034a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800034e:	7bbb      	ldrb	r3, [r7, #14]
 8000350:	210f      	movs	r1, #15
 8000352:	fa01 f303 	lsl.w	r3, r1, r3
 8000356:	43db      	mvns	r3, r3
 8000358:	4618      	mov	r0, r3
 800035a:	495a      	ldr	r1, [pc, #360]	; (80004c4 <Update_EXTI+0x1bc>)
 800035c:	7bfb      	ldrb	r3, [r7, #15]
 800035e:	4002      	ands	r2, r0
 8000360:	3302      	adds	r3, #2
 8000362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	AFIO->AFIO_EXTICR[AFIO_EXTICR_index ] |= ((AFIO_GPIO_EXTI_Mapping(EXTI_Config->EXTI_PIN.GPIO_Port) &0xF) << AFIO_EXTICR_Postion);
 8000366:	4a57      	ldr	r2, [pc, #348]	; (80004c4 <Update_EXTI+0x1bc>)
 8000368:	7bfb      	ldrb	r3, [r7, #15]
 800036a:	3302      	adds	r3, #2
 800036c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	685b      	ldr	r3, [r3, #4]
 8000374:	4954      	ldr	r1, [pc, #336]	; (80004c8 <Update_EXTI+0x1c0>)
 8000376:	428b      	cmp	r3, r1
 8000378:	d016      	beq.n	80003a8 <Update_EXTI+0xa0>
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	685b      	ldr	r3, [r3, #4]
 800037e:	4953      	ldr	r1, [pc, #332]	; (80004cc <Update_EXTI+0x1c4>)
 8000380:	428b      	cmp	r3, r1
 8000382:	d00f      	beq.n	80003a4 <Update_EXTI+0x9c>
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	685b      	ldr	r3, [r3, #4]
 8000388:	4951      	ldr	r1, [pc, #324]	; (80004d0 <Update_EXTI+0x1c8>)
 800038a:	428b      	cmp	r3, r1
 800038c:	d008      	beq.n	80003a0 <Update_EXTI+0x98>
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	685b      	ldr	r3, [r3, #4]
 8000392:	4950      	ldr	r1, [pc, #320]	; (80004d4 <Update_EXTI+0x1cc>)
 8000394:	428b      	cmp	r3, r1
 8000396:	d101      	bne.n	800039c <Update_EXTI+0x94>
 8000398:	2303      	movs	r3, #3
 800039a:	e006      	b.n	80003aa <Update_EXTI+0xa2>
 800039c:	2300      	movs	r3, #0
 800039e:	e004      	b.n	80003aa <Update_EXTI+0xa2>
 80003a0:	2302      	movs	r3, #2
 80003a2:	e002      	b.n	80003aa <Update_EXTI+0xa2>
 80003a4:	2301      	movs	r3, #1
 80003a6:	e000      	b.n	80003aa <Update_EXTI+0xa2>
 80003a8:	2300      	movs	r3, #0
 80003aa:	7bb9      	ldrb	r1, [r7, #14]
 80003ac:	408b      	lsls	r3, r1
 80003ae:	4618      	mov	r0, r3
 80003b0:	4944      	ldr	r1, [pc, #272]	; (80004c4 <Update_EXTI+0x1bc>)
 80003b2:	7bfb      	ldrb	r3, [r7, #15]
 80003b4:	4302      	orrs	r2, r0
 80003b6:	3302      	adds	r3, #2
 80003b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//==============================================


	//3- Update Rising or falling Register
	// first clearing exti line before updating trigger edge
	EXTI->EXTI_RTSR &= ~(1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80003bc:	4b46      	ldr	r3, [pc, #280]	; (80004d8 <Update_EXTI+0x1d0>)
 80003be:	689b      	ldr	r3, [r3, #8]
 80003c0:	687a      	ldr	r2, [r7, #4]
 80003c2:	8812      	ldrh	r2, [r2, #0]
 80003c4:	4611      	mov	r1, r2
 80003c6:	2201      	movs	r2, #1
 80003c8:	408a      	lsls	r2, r1
 80003ca:	43d2      	mvns	r2, r2
 80003cc:	4611      	mov	r1, r2
 80003ce:	4a42      	ldr	r2, [pc, #264]	; (80004d8 <Update_EXTI+0x1d0>)
 80003d0:	400b      	ands	r3, r1
 80003d2:	6093      	str	r3, [r2, #8]
	EXTI->EXTI_FTSR &= ~(1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80003d4:	4b40      	ldr	r3, [pc, #256]	; (80004d8 <Update_EXTI+0x1d0>)
 80003d6:	68db      	ldr	r3, [r3, #12]
 80003d8:	687a      	ldr	r2, [r7, #4]
 80003da:	8812      	ldrh	r2, [r2, #0]
 80003dc:	4611      	mov	r1, r2
 80003de:	2201      	movs	r2, #1
 80003e0:	408a      	lsls	r2, r1
 80003e2:	43d2      	mvns	r2, r2
 80003e4:	4611      	mov	r1, r2
 80003e6:	4a3c      	ldr	r2, [pc, #240]	; (80004d8 <Update_EXTI+0x1d0>)
 80003e8:	400b      	ands	r3, r1
 80003ea:	60d3      	str	r3, [r2, #12]

	if (EXTI_Config->Trigger_Case == EXTI_Trigger_RISING)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	7b1b      	ldrb	r3, [r3, #12]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d10b      	bne.n	800040c <Update_EXTI+0x104>
	{
		EXTI->EXTI_RTSR |=  (1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80003f4:	4b38      	ldr	r3, [pc, #224]	; (80004d8 <Update_EXTI+0x1d0>)
 80003f6:	689b      	ldr	r3, [r3, #8]
 80003f8:	687a      	ldr	r2, [r7, #4]
 80003fa:	8812      	ldrh	r2, [r2, #0]
 80003fc:	4611      	mov	r1, r2
 80003fe:	2201      	movs	r2, #1
 8000400:	408a      	lsls	r2, r1
 8000402:	4611      	mov	r1, r2
 8000404:	4a34      	ldr	r2, [pc, #208]	; (80004d8 <Update_EXTI+0x1d0>)
 8000406:	430b      	orrs	r3, r1
 8000408:	6093      	str	r3, [r2, #8]
 800040a:	e029      	b.n	8000460 <Update_EXTI+0x158>

	}else if  (EXTI_Config->Trigger_Case == EXTI_Trigger_FALLING)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	7b1b      	ldrb	r3, [r3, #12]
 8000410:	2b01      	cmp	r3, #1
 8000412:	d10b      	bne.n	800042c <Update_EXTI+0x124>
	{
		EXTI->EXTI_FTSR |= (1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000414:	4b30      	ldr	r3, [pc, #192]	; (80004d8 <Update_EXTI+0x1d0>)
 8000416:	68db      	ldr	r3, [r3, #12]
 8000418:	687a      	ldr	r2, [r7, #4]
 800041a:	8812      	ldrh	r2, [r2, #0]
 800041c:	4611      	mov	r1, r2
 800041e:	2201      	movs	r2, #1
 8000420:	408a      	lsls	r2, r1
 8000422:	4611      	mov	r1, r2
 8000424:	4a2c      	ldr	r2, [pc, #176]	; (80004d8 <Update_EXTI+0x1d0>)
 8000426:	430b      	orrs	r3, r1
 8000428:	60d3      	str	r3, [r2, #12]
 800042a:	e019      	b.n	8000460 <Update_EXTI+0x158>


	}else if  (EXTI_Config->Trigger_Case == EXTI_Trigger_RisingAndFalling)
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	7b1b      	ldrb	r3, [r3, #12]
 8000430:	2b02      	cmp	r3, #2
 8000432:	d115      	bne.n	8000460 <Update_EXTI+0x158>
	{
		EXTI->EXTI_RTSR |=  (1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000434:	4b28      	ldr	r3, [pc, #160]	; (80004d8 <Update_EXTI+0x1d0>)
 8000436:	689b      	ldr	r3, [r3, #8]
 8000438:	687a      	ldr	r2, [r7, #4]
 800043a:	8812      	ldrh	r2, [r2, #0]
 800043c:	4611      	mov	r1, r2
 800043e:	2201      	movs	r2, #1
 8000440:	408a      	lsls	r2, r1
 8000442:	4611      	mov	r1, r2
 8000444:	4a24      	ldr	r2, [pc, #144]	; (80004d8 <Update_EXTI+0x1d0>)
 8000446:	430b      	orrs	r3, r1
 8000448:	6093      	str	r3, [r2, #8]
		EXTI->EXTI_FTSR|= (1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800044a:	4b23      	ldr	r3, [pc, #140]	; (80004d8 <Update_EXTI+0x1d0>)
 800044c:	68db      	ldr	r3, [r3, #12]
 800044e:	687a      	ldr	r2, [r7, #4]
 8000450:	8812      	ldrh	r2, [r2, #0]
 8000452:	4611      	mov	r1, r2
 8000454:	2201      	movs	r2, #1
 8000456:	408a      	lsls	r2, r1
 8000458:	4611      	mov	r1, r2
 800045a:	4a1f      	ldr	r2, [pc, #124]	; (80004d8 <Update_EXTI+0x1d0>)
 800045c:	430b      	orrs	r3, r1
 800045e:	60d3      	str	r3, [r2, #12]


	//==============================================
	//4- Update IRQ Handling CALLBACK

	GP_IRQ_CallBack[EXTI_Config->EXTI_PIN.EXTI_InputLineNumber] = EXTI_Config->P_IRQ_CallBack ;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	881b      	ldrh	r3, [r3, #0]
 8000464:	4619      	mov	r1, r3
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	691b      	ldr	r3, [r3, #16]
 800046a:	4a1c      	ldr	r2, [pc, #112]	; (80004dc <Update_EXTI+0x1d4>)
 800046c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	//==============================================
	//5- Enable/Disable IRQ EXTI & NVIC

	if (EXTI_Config->IRQ_EN == EXTI_IRQ_Enable )
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	7b5b      	ldrb	r3, [r3, #13]
 8000474:	2b01      	cmp	r3, #1
 8000476:	d110      	bne.n	800049a <Update_EXTI+0x192>
	{
		EXTI->EXTI_IMR |= (1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber );
 8000478:	4b17      	ldr	r3, [pc, #92]	; (80004d8 <Update_EXTI+0x1d0>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	687a      	ldr	r2, [r7, #4]
 800047e:	8812      	ldrh	r2, [r2, #0]
 8000480:	4611      	mov	r1, r2
 8000482:	2201      	movs	r2, #1
 8000484:	408a      	lsls	r2, r1
 8000486:	4611      	mov	r1, r2
 8000488:	4a13      	ldr	r2, [pc, #76]	; (80004d8 <Update_EXTI+0x1d0>)
 800048a:	430b      	orrs	r3, r1
 800048c:	6013      	str	r3, [r2, #0]
		Enable_NVIC (EXTI_Config->EXTI_PIN.EXTI_InputLineNumber ) ;
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	881b      	ldrh	r3, [r3, #0]
 8000492:	4618      	mov	r0, r3
 8000494:	f7ff fe6c 	bl	8000170 <Enable_NVIC>
	{
		EXTI->EXTI_IMR &= ~(1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber );
		Disable_NVIC (EXTI_Config->EXTI_PIN.EXTI_InputLineNumber) ;
	}

}
 8000498:	e010      	b.n	80004bc <Update_EXTI+0x1b4>
		EXTI->EXTI_IMR &= ~(1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber );
 800049a:	4b0f      	ldr	r3, [pc, #60]	; (80004d8 <Update_EXTI+0x1d0>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	687a      	ldr	r2, [r7, #4]
 80004a0:	8812      	ldrh	r2, [r2, #0]
 80004a2:	4611      	mov	r1, r2
 80004a4:	2201      	movs	r2, #1
 80004a6:	408a      	lsls	r2, r1
 80004a8:	43d2      	mvns	r2, r2
 80004aa:	4611      	mov	r1, r2
 80004ac:	4a0a      	ldr	r2, [pc, #40]	; (80004d8 <Update_EXTI+0x1d0>)
 80004ae:	400b      	ands	r3, r1
 80004b0:	6013      	str	r3, [r2, #0]
		Disable_NVIC (EXTI_Config->EXTI_PIN.EXTI_InputLineNumber) ;
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	881b      	ldrh	r3, [r3, #0]
 80004b6:	4618      	mov	r0, r3
 80004b8:	f7ff fec0 	bl	800023c <Disable_NVIC>
}
 80004bc:	bf00      	nop
 80004be:	3710      	adds	r7, #16
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	40010000 	.word	0x40010000
 80004c8:	40010800 	.word	0x40010800
 80004cc:	40010c00 	.word	0x40010c00
 80004d0:	40011000 	.word	0x40011000
 80004d4:	40011400 	.word	0x40011400
 80004d8:	40010400 	.word	0x40010400
 80004dc:	20000020 	.word	0x20000020

080004e0 <MCAL_EXTI_GPIO_Init>:
 * @retval 			-none
 * Note				-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				 	But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 * 				 	-Also Mandatory to Enable RCC Clock for AFIO and the corresponding GPIO
 */
void MCAL_EXTI_GPIO_Init (EXTI_PinConfig_t* EXTI_Config){
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]

	Update_EXTI(EXTI_Config) ;
 80004e8:	6878      	ldr	r0, [r7, #4]
 80004ea:	f7ff ff0d 	bl	8000308 <Update_EXTI>
}
 80004ee:	bf00      	nop
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
	...

080004f8 <EXTI0_IRQHandler>:
///**===========			ISR  Functions        =========================
///**================================================================
// */

void EXTI0_IRQHandler(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
	//cleared by writing a ‘1’ into the bit Pending register (EXTI_PR)
	EXTI->EXTI_PR |= (1<<0) ;
 80004fc:	4b05      	ldr	r3, [pc, #20]	; (8000514 <EXTI0_IRQHandler+0x1c>)
 80004fe:	695b      	ldr	r3, [r3, #20]
 8000500:	4a04      	ldr	r2, [pc, #16]	; (8000514 <EXTI0_IRQHandler+0x1c>)
 8000502:	f043 0301 	orr.w	r3, r3, #1
 8000506:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALL
	GP_IRQ_CallBack[0]() ;
 8000508:	4b03      	ldr	r3, [pc, #12]	; (8000518 <EXTI0_IRQHandler+0x20>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4798      	blx	r3
}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	40010400 	.word	0x40010400
 8000518:	20000020 	.word	0x20000020

0800051c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void) {
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
	EXTI->EXTI_PR |=  (1<<1) ;
 8000520:	4b05      	ldr	r3, [pc, #20]	; (8000538 <EXTI1_IRQHandler+0x1c>)
 8000522:	695b      	ldr	r3, [r3, #20]
 8000524:	4a04      	ldr	r2, [pc, #16]	; (8000538 <EXTI1_IRQHandler+0x1c>)
 8000526:	f043 0302 	orr.w	r3, r3, #2
 800052a:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[1]() ;
 800052c:	4b03      	ldr	r3, [pc, #12]	; (800053c <EXTI1_IRQHandler+0x20>)
 800052e:	685b      	ldr	r3, [r3, #4]
 8000530:	4798      	blx	r3
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40010400 	.word	0x40010400
 800053c:	20000020 	.word	0x20000020

08000540 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler (void) {
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	EXTI->EXTI_PR |=  (1<<2) ;
 8000544:	4b05      	ldr	r3, [pc, #20]	; (800055c <EXTI2_IRQHandler+0x1c>)
 8000546:	695b      	ldr	r3, [r3, #20]
 8000548:	4a04      	ldr	r2, [pc, #16]	; (800055c <EXTI2_IRQHandler+0x1c>)
 800054a:	f043 0304 	orr.w	r3, r3, #4
 800054e:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[2]() ; }
 8000550:	4b03      	ldr	r3, [pc, #12]	; (8000560 <EXTI2_IRQHandler+0x20>)
 8000552:	689b      	ldr	r3, [r3, #8]
 8000554:	4798      	blx	r3
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40010400 	.word	0x40010400
 8000560:	20000020 	.word	0x20000020

08000564 <EXTI3_IRQHandler>:


void EXTI3_IRQHandler (void) {
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
	EXTI->EXTI_PR |=  (1<<3) ;
 8000568:	4b05      	ldr	r3, [pc, #20]	; (8000580 <EXTI3_IRQHandler+0x1c>)
 800056a:	695b      	ldr	r3, [r3, #20]
 800056c:	4a04      	ldr	r2, [pc, #16]	; (8000580 <EXTI3_IRQHandler+0x1c>)
 800056e:	f043 0308 	orr.w	r3, r3, #8
 8000572:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[3]() ; }
 8000574:	4b03      	ldr	r3, [pc, #12]	; (8000584 <EXTI3_IRQHandler+0x20>)
 8000576:	68db      	ldr	r3, [r3, #12]
 8000578:	4798      	blx	r3
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40010400 	.word	0x40010400
 8000584:	20000020 	.word	0x20000020

08000588 <EXTI4_IRQHandler>:


void EXTI4_IRQHandler (void) {
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	EXTI->EXTI_PR |=  (1<<4) ;
 800058c:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <EXTI4_IRQHandler+0x1c>)
 800058e:	695b      	ldr	r3, [r3, #20]
 8000590:	4a04      	ldr	r2, [pc, #16]	; (80005a4 <EXTI4_IRQHandler+0x1c>)
 8000592:	f043 0310 	orr.w	r3, r3, #16
 8000596:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]() ; }
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <EXTI4_IRQHandler+0x20>)
 800059a:	691b      	ldr	r3, [r3, #16]
 800059c:	4798      	blx	r3
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40010400 	.word	0x40010400
 80005a8:	20000020 	.word	0x20000020

080005ac <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler (void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	if (EXTI->EXTI_PR & 1<<5 ) {	EXTI->EXTI_PR |=  (1<<5)    ; GP_IRQ_CallBack[5]() ;   }
 80005b0:	4b26      	ldr	r3, [pc, #152]	; (800064c <EXTI9_5_IRQHandler+0xa0>)
 80005b2:	695b      	ldr	r3, [r3, #20]
 80005b4:	f003 0320 	and.w	r3, r3, #32
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d008      	beq.n	80005ce <EXTI9_5_IRQHandler+0x22>
 80005bc:	4b23      	ldr	r3, [pc, #140]	; (800064c <EXTI9_5_IRQHandler+0xa0>)
 80005be:	695b      	ldr	r3, [r3, #20]
 80005c0:	4a22      	ldr	r2, [pc, #136]	; (800064c <EXTI9_5_IRQHandler+0xa0>)
 80005c2:	f043 0320 	orr.w	r3, r3, #32
 80005c6:	6153      	str	r3, [r2, #20]
 80005c8:	4b21      	ldr	r3, [pc, #132]	; (8000650 <EXTI9_5_IRQHandler+0xa4>)
 80005ca:	695b      	ldr	r3, [r3, #20]
 80005cc:	4798      	blx	r3
	if (EXTI->EXTI_PR & 1<<6 ) {	EXTI->EXTI_PR |=  (1<<6)    ; GP_IRQ_CallBack[6]() ;   }
 80005ce:	4b1f      	ldr	r3, [pc, #124]	; (800064c <EXTI9_5_IRQHandler+0xa0>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d008      	beq.n	80005ec <EXTI9_5_IRQHandler+0x40>
 80005da:	4b1c      	ldr	r3, [pc, #112]	; (800064c <EXTI9_5_IRQHandler+0xa0>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	4a1b      	ldr	r2, [pc, #108]	; (800064c <EXTI9_5_IRQHandler+0xa0>)
 80005e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005e4:	6153      	str	r3, [r2, #20]
 80005e6:	4b1a      	ldr	r3, [pc, #104]	; (8000650 <EXTI9_5_IRQHandler+0xa4>)
 80005e8:	699b      	ldr	r3, [r3, #24]
 80005ea:	4798      	blx	r3
	if (EXTI->EXTI_PR & 1<<7 ) {	EXTI->EXTI_PR |=  (1<<7)    ; GP_IRQ_CallBack[7]() ;   }
 80005ec:	4b17      	ldr	r3, [pc, #92]	; (800064c <EXTI9_5_IRQHandler+0xa0>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d008      	beq.n	800060a <EXTI9_5_IRQHandler+0x5e>
 80005f8:	4b14      	ldr	r3, [pc, #80]	; (800064c <EXTI9_5_IRQHandler+0xa0>)
 80005fa:	695b      	ldr	r3, [r3, #20]
 80005fc:	4a13      	ldr	r2, [pc, #76]	; (800064c <EXTI9_5_IRQHandler+0xa0>)
 80005fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000602:	6153      	str	r3, [r2, #20]
 8000604:	4b12      	ldr	r3, [pc, #72]	; (8000650 <EXTI9_5_IRQHandler+0xa4>)
 8000606:	69db      	ldr	r3, [r3, #28]
 8000608:	4798      	blx	r3
	if (EXTI->EXTI_PR & 1<<8 ) {	EXTI->EXTI_PR |=  (1<<8)    ; GP_IRQ_CallBack[8]() ;   }
 800060a:	4b10      	ldr	r3, [pc, #64]	; (800064c <EXTI9_5_IRQHandler+0xa0>)
 800060c:	695b      	ldr	r3, [r3, #20]
 800060e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000612:	2b00      	cmp	r3, #0
 8000614:	d008      	beq.n	8000628 <EXTI9_5_IRQHandler+0x7c>
 8000616:	4b0d      	ldr	r3, [pc, #52]	; (800064c <EXTI9_5_IRQHandler+0xa0>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	4a0c      	ldr	r2, [pc, #48]	; (800064c <EXTI9_5_IRQHandler+0xa0>)
 800061c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000620:	6153      	str	r3, [r2, #20]
 8000622:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <EXTI9_5_IRQHandler+0xa4>)
 8000624:	6a1b      	ldr	r3, [r3, #32]
 8000626:	4798      	blx	r3
	if (EXTI->EXTI_PR & 1<<9 ) {	EXTI->EXTI_PR |=  (1<<9)    ; GP_IRQ_CallBack[9]() ;   }
 8000628:	4b08      	ldr	r3, [pc, #32]	; (800064c <EXTI9_5_IRQHandler+0xa0>)
 800062a:	695b      	ldr	r3, [r3, #20]
 800062c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000630:	2b00      	cmp	r3, #0
 8000632:	d008      	beq.n	8000646 <EXTI9_5_IRQHandler+0x9a>
 8000634:	4b05      	ldr	r3, [pc, #20]	; (800064c <EXTI9_5_IRQHandler+0xa0>)
 8000636:	695b      	ldr	r3, [r3, #20]
 8000638:	4a04      	ldr	r2, [pc, #16]	; (800064c <EXTI9_5_IRQHandler+0xa0>)
 800063a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800063e:	6153      	str	r3, [r2, #20]
 8000640:	4b03      	ldr	r3, [pc, #12]	; (8000650 <EXTI9_5_IRQHandler+0xa4>)
 8000642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000644:	4798      	blx	r3

}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40010400 	.word	0x40010400
 8000650:	20000020 	.word	0x20000020

08000654 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
	if (EXTI->EXTI_PR & 1<<10 ) {	EXTI->EXTI_PR |=  (1<<10)    ; GP_IRQ_CallBack[10]() ;   }
 8000658:	4b2d      	ldr	r3, [pc, #180]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 800065a:	695b      	ldr	r3, [r3, #20]
 800065c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000660:	2b00      	cmp	r3, #0
 8000662:	d008      	beq.n	8000676 <EXTI15_10_IRQHandler+0x22>
 8000664:	4b2a      	ldr	r3, [pc, #168]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 8000666:	695b      	ldr	r3, [r3, #20]
 8000668:	4a29      	ldr	r2, [pc, #164]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 800066a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800066e:	6153      	str	r3, [r2, #20]
 8000670:	4b28      	ldr	r3, [pc, #160]	; (8000714 <EXTI15_10_IRQHandler+0xc0>)
 8000672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000674:	4798      	blx	r3
	if (EXTI->EXTI_PR & 1<<11 ) {	EXTI->EXTI_PR |=  (1<<11)    ; GP_IRQ_CallBack[11]() ;   }
 8000676:	4b26      	ldr	r3, [pc, #152]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 8000678:	695b      	ldr	r3, [r3, #20]
 800067a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800067e:	2b00      	cmp	r3, #0
 8000680:	d008      	beq.n	8000694 <EXTI15_10_IRQHandler+0x40>
 8000682:	4b23      	ldr	r3, [pc, #140]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 8000684:	695b      	ldr	r3, [r3, #20]
 8000686:	4a22      	ldr	r2, [pc, #136]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 8000688:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800068c:	6153      	str	r3, [r2, #20]
 800068e:	4b21      	ldr	r3, [pc, #132]	; (8000714 <EXTI15_10_IRQHandler+0xc0>)
 8000690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000692:	4798      	blx	r3
	if (EXTI->EXTI_PR & 1<<12 ) {	EXTI->EXTI_PR |=  (1<<12)    ; GP_IRQ_CallBack[12]() ;   }
 8000694:	4b1e      	ldr	r3, [pc, #120]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 8000696:	695b      	ldr	r3, [r3, #20]
 8000698:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800069c:	2b00      	cmp	r3, #0
 800069e:	d008      	beq.n	80006b2 <EXTI15_10_IRQHandler+0x5e>
 80006a0:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 80006a2:	695b      	ldr	r3, [r3, #20]
 80006a4:	4a1a      	ldr	r2, [pc, #104]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 80006a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006aa:	6153      	str	r3, [r2, #20]
 80006ac:	4b19      	ldr	r3, [pc, #100]	; (8000714 <EXTI15_10_IRQHandler+0xc0>)
 80006ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b0:	4798      	blx	r3
	if (EXTI->EXTI_PR & 1<<13 ) {	EXTI->EXTI_PR |=  (1<<13)    ; GP_IRQ_CallBack[13]() ;   }
 80006b2:	4b17      	ldr	r3, [pc, #92]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d008      	beq.n	80006d0 <EXTI15_10_IRQHandler+0x7c>
 80006be:	4b14      	ldr	r3, [pc, #80]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 80006c0:	695b      	ldr	r3, [r3, #20]
 80006c2:	4a13      	ldr	r2, [pc, #76]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 80006c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006c8:	6153      	str	r3, [r2, #20]
 80006ca:	4b12      	ldr	r3, [pc, #72]	; (8000714 <EXTI15_10_IRQHandler+0xc0>)
 80006cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006ce:	4798      	blx	r3
	if (EXTI->EXTI_PR & 1<<14 ) {	EXTI->EXTI_PR |=  (1<<14)    ; GP_IRQ_CallBack[14]() ;   }
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 80006d2:	695b      	ldr	r3, [r3, #20]
 80006d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d008      	beq.n	80006ee <EXTI15_10_IRQHandler+0x9a>
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 80006de:	695b      	ldr	r3, [r3, #20]
 80006e0:	4a0b      	ldr	r2, [pc, #44]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 80006e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e6:	6153      	str	r3, [r2, #20]
 80006e8:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <EXTI15_10_IRQHandler+0xc0>)
 80006ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006ec:	4798      	blx	r3
	if (EXTI->EXTI_PR & 1<<15 ) {	EXTI->EXTI_PR |=  (1<<15)    ; GP_IRQ_CallBack[15]() ;   }
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 80006f0:	695b      	ldr	r3, [r3, #20]
 80006f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d008      	beq.n	800070c <EXTI15_10_IRQHandler+0xb8>
 80006fa:	4b05      	ldr	r3, [pc, #20]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	4a04      	ldr	r2, [pc, #16]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 8000700:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000704:	6153      	str	r3, [r2, #20]
 8000706:	4b03      	ldr	r3, [pc, #12]	; (8000714 <EXTI15_10_IRQHandler+0xc0>)
 8000708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800070a:	4798      	blx	r3


}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40010400 	.word	0x40010400
 8000714:	20000020 	.word	0x20000020

08000718 <Get_CRLH_Position>:
 * =======================================================================================
 * 							Generic Functions
 * =======================================================================================
 */
uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 8000722:	88fb      	ldrh	r3, [r7, #6]
 8000724:	2b80      	cmp	r3, #128	; 0x80
 8000726:	d042      	beq.n	80007ae <Get_CRLH_Position+0x96>
 8000728:	2b80      	cmp	r3, #128	; 0x80
 800072a:	dc11      	bgt.n	8000750 <Get_CRLH_Position+0x38>
 800072c:	2b08      	cmp	r3, #8
 800072e:	d036      	beq.n	800079e <Get_CRLH_Position+0x86>
 8000730:	2b08      	cmp	r3, #8
 8000732:	dc06      	bgt.n	8000742 <Get_CRLH_Position+0x2a>
 8000734:	2b02      	cmp	r3, #2
 8000736:	d02e      	beq.n	8000796 <Get_CRLH_Position+0x7e>
 8000738:	2b04      	cmp	r3, #4
 800073a:	d02e      	beq.n	800079a <Get_CRLH_Position+0x82>
 800073c:	2b01      	cmp	r3, #1
 800073e:	d028      	beq.n	8000792 <Get_CRLH_Position+0x7a>
 8000740:	e047      	b.n	80007d2 <Get_CRLH_Position+0xba>
 8000742:	2b20      	cmp	r3, #32
 8000744:	d02f      	beq.n	80007a6 <Get_CRLH_Position+0x8e>
 8000746:	2b40      	cmp	r3, #64	; 0x40
 8000748:	d02f      	beq.n	80007aa <Get_CRLH_Position+0x92>
 800074a:	2b10      	cmp	r3, #16
 800074c:	d029      	beq.n	80007a2 <Get_CRLH_Position+0x8a>
 800074e:	e040      	b.n	80007d2 <Get_CRLH_Position+0xba>
 8000750:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000754:	d033      	beq.n	80007be <Get_CRLH_Position+0xa6>
 8000756:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800075a:	dc09      	bgt.n	8000770 <Get_CRLH_Position+0x58>
 800075c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000760:	d029      	beq.n	80007b6 <Get_CRLH_Position+0x9e>
 8000762:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000766:	d028      	beq.n	80007ba <Get_CRLH_Position+0xa2>
 8000768:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800076c:	d021      	beq.n	80007b2 <Get_CRLH_Position+0x9a>
 800076e:	e030      	b.n	80007d2 <Get_CRLH_Position+0xba>
 8000770:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000774:	d027      	beq.n	80007c6 <Get_CRLH_Position+0xae>
 8000776:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800077a:	dc03      	bgt.n	8000784 <Get_CRLH_Position+0x6c>
 800077c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000780:	d01f      	beq.n	80007c2 <Get_CRLH_Position+0xaa>
 8000782:	e026      	b.n	80007d2 <Get_CRLH_Position+0xba>
 8000784:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000788:	d01f      	beq.n	80007ca <Get_CRLH_Position+0xb2>
 800078a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800078e:	d01e      	beq.n	80007ce <Get_CRLH_Position+0xb6>
 8000790:	e01f      	b.n	80007d2 <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0 ;
 8000792:	2300      	movs	r3, #0
 8000794:	e01e      	b.n	80007d4 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_1:
		return 4 ;
 8000796:	2304      	movs	r3, #4
 8000798:	e01c      	b.n	80007d4 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_2:
		return 8 ;
 800079a:	2308      	movs	r3, #8
 800079c:	e01a      	b.n	80007d4 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_3:
		return 12 ;
 800079e:	230c      	movs	r3, #12
 80007a0:	e018      	b.n	80007d4 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_4:
		return 16 ;
 80007a2:	2310      	movs	r3, #16
 80007a4:	e016      	b.n	80007d4 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_5:
		return 20 ;
 80007a6:	2314      	movs	r3, #20
 80007a8:	e014      	b.n	80007d4 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_6:
		return 24 ;
 80007aa:	2318      	movs	r3, #24
 80007ac:	e012      	b.n	80007d4 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_7:
		return 28 ;
 80007ae:	231c      	movs	r3, #28
 80007b0:	e010      	b.n	80007d4 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_8:
		return 0 ;
 80007b2:	2300      	movs	r3, #0
 80007b4:	e00e      	b.n	80007d4 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_9:
		return 4 ;
 80007b6:	2304      	movs	r3, #4
 80007b8:	e00c      	b.n	80007d4 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_10:
		return 8 ;
 80007ba:	2308      	movs	r3, #8
 80007bc:	e00a      	b.n	80007d4 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_11:
		return 12 ;
 80007be:	230c      	movs	r3, #12
 80007c0:	e008      	b.n	80007d4 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_12:
		return 16 ;
 80007c2:	2310      	movs	r3, #16
 80007c4:	e006      	b.n	80007d4 <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_13:
		return 20 ;
 80007c6:	2314      	movs	r3, #20
 80007c8:	e004      	b.n	80007d4 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_14:
		return 24 ;
 80007ca:	2318      	movs	r3, #24
 80007cc:	e002      	b.n	80007d4 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_15:
		return 28 ;
 80007ce:	231c      	movs	r3, #28
 80007d0:	e000      	b.n	80007d4 <Get_CRLH_Position+0xbc>
		break ;


	}
	return 0 ;
 80007d2:	2300      	movs	r3, #0

}
 80007d4:	4618      	mov	r0, r3
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr

080007de <MCAL_GPIO_Init>:
 * @retval 			-none
 * Note				-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 					 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx , GPIO_PINConfig_t* PinConfig)
{
 80007de:	b590      	push	{r4, r7, lr}
 80007e0:	b085      	sub	sp, #20
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	6078      	str	r0, [r7, #4]
 80007e6:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 >> 7
	//Port configuration register High (GPIOx_CRH) Configure PINS from 8 >> 15
	volatile uint32_t* ConfigRegister = NULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	60bb      	str	r3, [r7, #8]

	uint8_t PIN_Config = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	73fb      	strb	r3, [r7, #15]
	ConfigRegister = (PinConfig->GPIO_PinNumber<GPIO_PIN_8)?(&GPIOx->GPIOx_CRL):(&GPIOx->GPIOx_CRH);
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	881b      	ldrh	r3, [r3, #0]
 80007f4:	2bff      	cmp	r3, #255	; 0xff
 80007f6:	d801      	bhi.n	80007fc <MCAL_GPIO_Init+0x1e>
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	e001      	b.n	8000800 <MCAL_GPIO_Init+0x22>
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	3304      	adds	r3, #4
 8000800:	60bb      	str	r3, [r7, #8]
	(*ConfigRegister) &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	881b      	ldrh	r3, [r3, #0]
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff ff86 	bl	8000718 <Get_CRLH_Position>
 800080c:	4603      	mov	r3, r0
 800080e:	461a      	mov	r2, r3
 8000810:	230f      	movs	r3, #15
 8000812:	4093      	lsls	r3, r2
 8000814:	43da      	mvns	r2, r3
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	401a      	ands	r2, r3
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	601a      	str	r2, [r3, #0]

	//if pin is output
	if((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD)||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP)||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD)||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	789b      	ldrb	r3, [r3, #2]
 8000824:	2b07      	cmp	r3, #7
 8000826:	d00b      	beq.n	8000840 <MCAL_GPIO_Init+0x62>
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	789b      	ldrb	r3, [r3, #2]
 800082c:	2b06      	cmp	r3, #6
 800082e:	d007      	beq.n	8000840 <MCAL_GPIO_Init+0x62>
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	789b      	ldrb	r3, [r3, #2]
 8000834:	2b05      	cmp	r3, #5
 8000836:	d003      	beq.n	8000840 <MCAL_GPIO_Init+0x62>
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	789b      	ldrb	r3, [r3, #2]
 800083c:	2b04      	cmp	r3, #4
 800083e:	d11c      	bne.n	800087a <MCAL_GPIO_Init+0x9c>
	{
		//Set CNFy[1:0] and MODEx[1:0]
		PIN_Config = ( (((PinConfig->GPIO_MODE -4) << 2) | ((PinConfig->GPIO_Output_Speed) << 0)) & 0x0F );
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	789b      	ldrb	r3, [r3, #2]
 8000844:	3b04      	subs	r3, #4
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	b25a      	sxtb	r2, r3
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	78db      	ldrb	r3, [r3, #3]
 800084e:	b25b      	sxtb	r3, r3
 8000850:	4313      	orrs	r3, r2
 8000852:	b25b      	sxtb	r3, r3
 8000854:	b2db      	uxtb	r3, r3
 8000856:	f003 030f 	and.w	r3, r3, #15
 800085a:	73fb      	strb	r3, [r7, #15]
		(*ConfigRegister) |= ( (PIN_Config) <<Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 800085c:	7bfc      	ldrb	r4, [r7, #15]
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff ff58 	bl	8000718 <Get_CRLH_Position>
 8000868:	4603      	mov	r3, r0
 800086a:	fa04 f203 	lsl.w	r2, r4, r3
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	431a      	orrs	r2, r3
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	e02c      	b.n	80008d4 <MCAL_GPIO_Init+0xf6>
	}
	//if pin is input
	else //MODE = 00 :Input mode (reset state)
	{
		if((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO)||(PinConfig->GPIO_MODE == GPIO_MODE_ANALOG) )
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	789b      	ldrb	r3, [r3, #2]
 800087e:	2b01      	cmp	r3, #1
 8000880:	d003      	beq.n	800088a <MCAL_GPIO_Init+0xac>
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	789b      	ldrb	r3, [r3, #2]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d107      	bne.n	800089a <MCAL_GPIO_Init+0xbc>
		{
			//Set CNFy[1:0] and MODEx[1:0]
			PIN_Config = ( (((PinConfig->GPIO_MODE) << 2) | 0x0 ) & 0x0F );
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	789b      	ldrb	r3, [r3, #2]
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	b2db      	uxtb	r3, r3
 8000892:	f003 030f 	and.w	r3, r3, #15
 8000896:	73fb      	strb	r3, [r7, #15]
 8000898:	e01c      	b.n	80008d4 <MCAL_GPIO_Init+0xf6>
		}
		else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT) //consider it  as input  floating
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	789b      	ldrb	r3, [r3, #2]
 800089e:	2b08      	cmp	r3, #8
 80008a0:	d102      	bne.n	80008a8 <MCAL_GPIO_Init+0xca>
		{
			//Set CNFy[1:0] and MODEx[1:0]
			PIN_Config = ( (((GPIO_MODE_INPUT_FLO) << 2) | 0x0 ) & 0x0F );
 80008a2:	2304      	movs	r3, #4
 80008a4:	73fb      	strb	r3, [r7, #15]
 80008a6:	e015      	b.n	80008d4 <MCAL_GPIO_Init+0xf6>
		}
		else //PU PD Input
		{
			PIN_Config = ( (((GPIO_MODE_INPUT_PU) << 2) | 0x0 ) & 0x0F );
 80008a8:	2308      	movs	r3, #8
 80008aa:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	789b      	ldrb	r3, [r3, #2]
 80008b0:	2b02      	cmp	r3, #2
 80008b2:	d107      	bne.n	80008c4 <MCAL_GPIO_Init+0xe6>
			{
				//PxODR = 1 Input pull-up :Table 20. Port bit configuration table
				GPIOx->GPIOx_ODR |= PinConfig->GPIO_PinNumber;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	683a      	ldr	r2, [r7, #0]
 80008ba:	8812      	ldrh	r2, [r2, #0]
 80008bc:	431a      	orrs	r2, r3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	e007      	b.n	80008d4 <MCAL_GPIO_Init+0xf6>
			}else{
				//PxODR = 0 Input pull-down :Table 20. Port bit configuration table
				GPIOx->GPIOx_ODR &= ~(PinConfig->GPIO_PinNumber);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	683a      	ldr	r2, [r7, #0]
 80008ca:	8812      	ldrh	r2, [r2, #0]
 80008cc:	43d2      	mvns	r2, r2
 80008ce:	401a      	ands	r2, r3
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	60da      	str	r2, [r3, #12]

		}

	}
	//write on CRL or CRH
	(*ConfigRegister) |= ( (PIN_Config) <<Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 80008d4:	7bfc      	ldrb	r4, [r7, #15]
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	881b      	ldrh	r3, [r3, #0]
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff ff1c 	bl	8000718 <Get_CRLH_Position>
 80008e0:	4603      	mov	r3, r0
 80008e2:	fa04 f203 	lsl.w	r2, r4, r3
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	431a      	orrs	r2, r3
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	601a      	str	r2, [r3, #0]
}
 80008f0:	bf00      	nop
 80008f2:	3714      	adds	r7, #20
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd90      	pop	{r4, r7, pc}

080008f8 <MCAL_GPIO_WritePort>:
 * @param [in] 			-GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
 * @retval 				-none
 * Note					-none
 */
void MCAL_GPIO_WritePort(GPIO_TypeDef *GPIOx , uint16_t Value)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	460b      	mov	r3, r1
 8000902:	807b      	strh	r3, [r7, #2]
	GPIOx->GPIOx_ODR = (uint32_t)Value;
 8000904:	887a      	ldrh	r2, [r7, #2]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	60da      	str	r2, [r3, #12]
}
 800090a:	bf00      	nop
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	bc80      	pop	{r7}
 8000912:	4770      	bx	lr

08000914 <MCAL_GPIO_WritePin>:
 *@param [in] 			-Value: Pin Value
 * @retval 				-none
 * Note					-none
 */
void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx , uint16_t PinNumber, uint8_t Value)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	460b      	mov	r3, r1
 800091e:	807b      	strh	r3, [r7, #2]
 8000920:	4613      	mov	r3, r2
 8000922:	707b      	strb	r3, [r7, #1]

	if(Value != GPIO_PIN_RESET)
 8000924:	787b      	ldrb	r3, [r7, #1]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d003      	beq.n	8000932 <MCAL_GPIO_WritePin+0x1e>
	{
		//	Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
		//	These bits are write-only and can be accessed in Word mode only.
		//	0: No action on the corresponding ODRx bit
		//	1: Set the corresponding ODRx bit
		GPIOx->GPIOx_BSRR=(uint32_t)PinNumber;
 800092a:	887a      	ldrh	r2, [r7, #2]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	611a      	str	r2, [r3, #16]


		//	or
		//	GPIOx->GPIOx_ODR &= ~(PinNumber) ;
	}
}
 8000930:	e002      	b.n	8000938 <MCAL_GPIO_WritePin+0x24>
		GPIOx->GPIOx_BRR=(uint32_t)PinNumber;
 8000932:	887a      	ldrh	r2, [r7, #2]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	615a      	str	r2, [r3, #20]
}
 8000938:	bf00      	nop
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr

08000942 <my_wait>:
 * Created: 4/21/2024 11:02:25 AM
 *  Author: fadye
 */ 
#include "lcd.h"
GPIO_PINConfig_t PinCfg;
void my_wait(int x){
 8000942:	b480      	push	{r7}
 8000944:	b085      	sub	sp, #20
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
	unsigned int i,j;
	for (i=0; i<x;i++){
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	e00b      	b.n	8000968 <my_wait+0x26>
		for(j=0;j<255;j++);
 8000950:	2300      	movs	r3, #0
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	e002      	b.n	800095c <my_wait+0x1a>
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	3301      	adds	r3, #1
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	2bfe      	cmp	r3, #254	; 0xfe
 8000960:	d9f9      	bls.n	8000956 <my_wait+0x14>
	for (i=0; i<x;i++){
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	3301      	adds	r3, #1
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	68fa      	ldr	r2, [r7, #12]
 800096c:	429a      	cmp	r2, r3
 800096e:	d3ef      	bcc.n	8000950 <my_wait+0xe>
	}
}
 8000970:	bf00      	nop
 8000972:	3714      	adds	r7, #20
 8000974:	46bd      	mov	sp, r7
 8000976:	bc80      	pop	{r7}
 8000978:	4770      	bx	lr
	...

0800097c <LCD_init>:

void LCD_init(void){
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
	/* LCD Power ON delay always >15ms */
	my_wait(20);
 8000980:	2014      	movs	r0, #20
 8000982:	f7ff ffde 	bl	8000942 <my_wait>
//	LCD_IsBusy();
	//set  EN_SWITCH o/p
	PinCfg.GPIO_PinNumber = EN_SWITCH;
 8000986:	4b5b      	ldr	r3, [pc, #364]	; (8000af4 <LCD_init+0x178>)
 8000988:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800098c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800098e:	4b59      	ldr	r3, [pc, #356]	; (8000af4 <LCD_init+0x178>)
 8000990:	2201      	movs	r2, #1
 8000992:	70da      	strb	r2, [r3, #3]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000994:	4b57      	ldr	r3, [pc, #348]	; (8000af4 <LCD_init+0x178>)
 8000996:	2204      	movs	r2, #4
 8000998:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(GPIOA, &PinCfg);
 800099a:	4956      	ldr	r1, [pc, #344]	; (8000af4 <LCD_init+0x178>)
 800099c:	4856      	ldr	r0, [pc, #344]	; (8000af8 <LCD_init+0x17c>)
 800099e:	f7ff ff1e 	bl	80007de <MCAL_GPIO_Init>

	//set  RW_SWITCH o/p
	PinCfg.GPIO_PinNumber = RW_SWITCH;
 80009a2:	4b54      	ldr	r3, [pc, #336]	; (8000af4 <LCD_init+0x178>)
 80009a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009a8:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80009aa:	4b52      	ldr	r3, [pc, #328]	; (8000af4 <LCD_init+0x178>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	70da      	strb	r2, [r3, #3]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80009b0:	4b50      	ldr	r3, [pc, #320]	; (8000af4 <LCD_init+0x178>)
 80009b2:	2204      	movs	r2, #4
 80009b4:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(GPIOA, &PinCfg);
 80009b6:	494f      	ldr	r1, [pc, #316]	; (8000af4 <LCD_init+0x178>)
 80009b8:	484f      	ldr	r0, [pc, #316]	; (8000af8 <LCD_init+0x17c>)
 80009ba:	f7ff ff10 	bl	80007de <MCAL_GPIO_Init>

	//set  RS_SWITCH o/p
	PinCfg.GPIO_PinNumber = RS_SWITCH;
 80009be:	4b4d      	ldr	r3, [pc, #308]	; (8000af4 <LCD_init+0x178>)
 80009c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009c4:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80009c6:	4b4b      	ldr	r3, [pc, #300]	; (8000af4 <LCD_init+0x178>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	70da      	strb	r2, [r3, #3]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80009cc:	4b49      	ldr	r3, [pc, #292]	; (8000af4 <LCD_init+0x178>)
 80009ce:	2204      	movs	r2, #4
 80009d0:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(GPIOA, &PinCfg);
 80009d2:	4948      	ldr	r1, [pc, #288]	; (8000af4 <LCD_init+0x178>)
 80009d4:	4848      	ldr	r0, [pc, #288]	; (8000af8 <LCD_init+0x17c>)
 80009d6:	f7ff ff02 	bl	80007de <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_0;
 80009da:	4b46      	ldr	r3, [pc, #280]	; (8000af4 <LCD_init+0x178>)
 80009dc:	2201      	movs	r2, #1
 80009de:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80009e0:	4b44      	ldr	r3, [pc, #272]	; (8000af4 <LCD_init+0x178>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	70da      	strb	r2, [r3, #3]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80009e6:	4b43      	ldr	r3, [pc, #268]	; (8000af4 <LCD_init+0x178>)
 80009e8:	2204      	movs	r2, #4
 80009ea:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(GPIOA, &PinCfg);
 80009ec:	4941      	ldr	r1, [pc, #260]	; (8000af4 <LCD_init+0x178>)
 80009ee:	4842      	ldr	r0, [pc, #264]	; (8000af8 <LCD_init+0x17c>)
 80009f0:	f7ff fef5 	bl	80007de <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 80009f4:	4b3f      	ldr	r3, [pc, #252]	; (8000af4 <LCD_init+0x178>)
 80009f6:	2202      	movs	r2, #2
 80009f8:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80009fa:	4b3e      	ldr	r3, [pc, #248]	; (8000af4 <LCD_init+0x178>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	70da      	strb	r2, [r3, #3]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000a00:	4b3c      	ldr	r3, [pc, #240]	; (8000af4 <LCD_init+0x178>)
 8000a02:	2204      	movs	r2, #4
 8000a04:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000a06:	493b      	ldr	r1, [pc, #236]	; (8000af4 <LCD_init+0x178>)
 8000a08:	483b      	ldr	r0, [pc, #236]	; (8000af8 <LCD_init+0x17c>)
 8000a0a:	f7ff fee8 	bl	80007de <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8000a0e:	4b39      	ldr	r3, [pc, #228]	; (8000af4 <LCD_init+0x178>)
 8000a10:	2204      	movs	r2, #4
 8000a12:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000a14:	4b37      	ldr	r3, [pc, #220]	; (8000af4 <LCD_init+0x178>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	70da      	strb	r2, [r3, #3]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000a1a:	4b36      	ldr	r3, [pc, #216]	; (8000af4 <LCD_init+0x178>)
 8000a1c:	2204      	movs	r2, #4
 8000a1e:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000a20:	4934      	ldr	r1, [pc, #208]	; (8000af4 <LCD_init+0x178>)
 8000a22:	4835      	ldr	r0, [pc, #212]	; (8000af8 <LCD_init+0x17c>)
 8000a24:	f7ff fedb 	bl	80007de <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8000a28:	4b32      	ldr	r3, [pc, #200]	; (8000af4 <LCD_init+0x178>)
 8000a2a:	2208      	movs	r2, #8
 8000a2c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000a2e:	4b31      	ldr	r3, [pc, #196]	; (8000af4 <LCD_init+0x178>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	70da      	strb	r2, [r3, #3]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000a34:	4b2f      	ldr	r3, [pc, #188]	; (8000af4 <LCD_init+0x178>)
 8000a36:	2204      	movs	r2, #4
 8000a38:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000a3a:	492e      	ldr	r1, [pc, #184]	; (8000af4 <LCD_init+0x178>)
 8000a3c:	482e      	ldr	r0, [pc, #184]	; (8000af8 <LCD_init+0x17c>)
 8000a3e:	f7ff fece 	bl	80007de <MCAL_GPIO_Init>


	PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 8000a42:	4b2c      	ldr	r3, [pc, #176]	; (8000af4 <LCD_init+0x178>)
 8000a44:	2210      	movs	r2, #16
 8000a46:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000a48:	4b2a      	ldr	r3, [pc, #168]	; (8000af4 <LCD_init+0x178>)
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	70da      	strb	r2, [r3, #3]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000a4e:	4b29      	ldr	r3, [pc, #164]	; (8000af4 <LCD_init+0x178>)
 8000a50:	2204      	movs	r2, #4
 8000a52:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000a54:	4927      	ldr	r1, [pc, #156]	; (8000af4 <LCD_init+0x178>)
 8000a56:	4828      	ldr	r0, [pc, #160]	; (8000af8 <LCD_init+0x17c>)
 8000a58:	f7ff fec1 	bl	80007de <MCAL_GPIO_Init>


	PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 8000a5c:	4b25      	ldr	r3, [pc, #148]	; (8000af4 <LCD_init+0x178>)
 8000a5e:	2220      	movs	r2, #32
 8000a60:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000a62:	4b24      	ldr	r3, [pc, #144]	; (8000af4 <LCD_init+0x178>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	70da      	strb	r2, [r3, #3]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000a68:	4b22      	ldr	r3, [pc, #136]	; (8000af4 <LCD_init+0x178>)
 8000a6a:	2204      	movs	r2, #4
 8000a6c:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000a6e:	4921      	ldr	r1, [pc, #132]	; (8000af4 <LCD_init+0x178>)
 8000a70:	4821      	ldr	r0, [pc, #132]	; (8000af8 <LCD_init+0x17c>)
 8000a72:	f7ff feb4 	bl	80007de <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 8000a76:	4b1f      	ldr	r3, [pc, #124]	; (8000af4 <LCD_init+0x178>)
 8000a78:	2240      	movs	r2, #64	; 0x40
 8000a7a:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000a7c:	4b1d      	ldr	r3, [pc, #116]	; (8000af4 <LCD_init+0x178>)
 8000a7e:	2201      	movs	r2, #1
 8000a80:	70da      	strb	r2, [r3, #3]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000a82:	4b1c      	ldr	r3, [pc, #112]	; (8000af4 <LCD_init+0x178>)
 8000a84:	2204      	movs	r2, #4
 8000a86:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000a88:	491a      	ldr	r1, [pc, #104]	; (8000af4 <LCD_init+0x178>)
 8000a8a:	481b      	ldr	r0, [pc, #108]	; (8000af8 <LCD_init+0x17c>)
 8000a8c:	f7ff fea7 	bl	80007de <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 8000a90:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <LCD_init+0x178>)
 8000a92:	2280      	movs	r2, #128	; 0x80
 8000a94:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000a96:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <LCD_init+0x178>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	70da      	strb	r2, [r3, #3]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000a9c:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <LCD_init+0x178>)
 8000a9e:	2204      	movs	r2, #4
 8000aa0:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000aa2:	4914      	ldr	r1, [pc, #80]	; (8000af4 <LCD_init+0x178>)
 8000aa4:	4814      	ldr	r0, [pc, #80]	; (8000af8 <LCD_init+0x17c>)
 8000aa6:	f7ff fe9a 	bl	80007de <MCAL_GPIO_Init>

	//	Data_Dir_lcd_port |= (0xFF<<DATA_shift);
	MCAL_GPIO_WritePin(lcd_ctrl, EN_SWITCH, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ab0:	4811      	ldr	r0, [pc, #68]	; (8000af8 <LCD_init+0x17c>)
 8000ab2:	f7ff ff2f 	bl	8000914 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd_ctrl, RW_SWITCH, GPIO_PIN_RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000abc:	480e      	ldr	r0, [pc, #56]	; (8000af8 <LCD_init+0x17c>)
 8000abe:	f7ff ff29 	bl	8000914 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd_ctrl, RS_SWITCH, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ac8:	480b      	ldr	r0, [pc, #44]	; (8000af8 <LCD_init+0x17c>)
 8000aca:	f7ff ff23 	bl	8000914 <MCAL_GPIO_WritePin>
	my_wait(15);
 8000ace:	200f      	movs	r0, #15
 8000ad0:	f7ff ff37 	bl	8000942 <my_wait>
	LCD_Clear_Screen();
 8000ad4:	f000 f85e 	bl	8000b94 <LCD_Clear_Screen>
	//check if 8-bit or 4-bit  mode
#ifdef EIGHT_BIT_MODE
	LCD_Command(LCD_FUNCTION_8BIT_2LINES);
 8000ad8:	2038      	movs	r0, #56	; 0x38
 8000ada:	f000 f839 	bl	8000b50 <LCD_Command>
/*
#ifdef FOUR_BIT_MODE
	LCD_Command(0x02);
	LCD_Command(LCD_FUNCTION_4BIT_2LINES);
#endif*/
	LCD_Command(LCD_ENTRY_MODE);
 8000ade:	2006      	movs	r0, #6
 8000ae0:	f000 f836 	bl	8000b50 <LCD_Command>
	LCD_Command(LCD_BEGIN_AT_FIRST_ROW);
 8000ae4:	2080      	movs	r0, #128	; 0x80
 8000ae6:	f000 f833 	bl	8000b50 <LCD_Command>
	LCD_Command(LCD_DISP_ON_CURSOR_BLINK);
 8000aea:	200f      	movs	r0, #15
 8000aec:	f000 f830 	bl	8000b50 <LCD_Command>
}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	2000005c 	.word	0x2000005c
 8000af8:	40010800 	.word	0x40010800

08000afc <LCD_GOTO_XY>:

void LCD_GOTO_XY(int line , int position){
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	6039      	str	r1, [r7, #0]
	// check if 1st line
	if (line == 1)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d10c      	bne.n	8000b26 <LCD_GOTO_XY+0x2a>
	{	if (position < 16 && position >= 0 ){	
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	2b0f      	cmp	r3, #15
 8000b10:	dc09      	bgt.n	8000b26 <LCD_GOTO_XY+0x2a>
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	db06      	blt.n	8000b26 <LCD_GOTO_XY+0x2a>
		LCD_Command(LCD_BEGIN_AT_FIRST_ROW + position);
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	3b80      	subs	r3, #128	; 0x80
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	4618      	mov	r0, r3
 8000b22:	f000 f815 	bl	8000b50 <LCD_Command>
	}
	}
	// check if 2nd line
	if (line == 2)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2b02      	cmp	r3, #2
 8000b2a:	d10c      	bne.n	8000b46 <LCD_GOTO_XY+0x4a>
	{	if (position < 32 && position >= 0 ){
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	2b1f      	cmp	r3, #31
 8000b30:	dc09      	bgt.n	8000b46 <LCD_GOTO_XY+0x4a>
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	db06      	blt.n	8000b46 <LCD_GOTO_XY+0x4a>
		LCD_Command(LCD_BEGIN_AT_SECOND_ROW + position);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	3b40      	subs	r3, #64	; 0x40
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	4618      	mov	r0, r3
 8000b42:	f000 f805 	bl	8000b50 <LCD_Command>
	}
	}
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
	...

08000b50 <LCD_Command>:

void LCD_Command(unsigned char command){
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_WritePort(lcd_port, command);
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	4619      	mov	r1, r3
 8000b60:	480b      	ldr	r0, [pc, #44]	; (8000b90 <LCD_Command+0x40>)
 8000b62:	f7ff fec9 	bl	80008f8 <MCAL_GPIO_WritePort>
//	ClearBit(lcd_ctrl,RW_SWITCH);
	MCAL_GPIO_WritePin(lcd_ctrl, RW_SWITCH, GPIO_PIN_RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b6c:	4808      	ldr	r0, [pc, #32]	; (8000b90 <LCD_Command+0x40>)
 8000b6e:	f7ff fed1 	bl	8000914 <MCAL_GPIO_WritePin>
//	ClearBit(lcd_ctrl,RS_SWITCH);
	MCAL_GPIO_WritePin(lcd_ctrl, RS_SWITCH, GPIO_PIN_RESET);
 8000b72:	2200      	movs	r2, #0
 8000b74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b78:	4805      	ldr	r0, [pc, #20]	; (8000b90 <LCD_Command+0x40>)
 8000b7a:	f7ff fecb 	bl	8000914 <MCAL_GPIO_WritePin>
	my_wait(1);
 8000b7e:	2001      	movs	r0, #1
 8000b80:	f7ff fedf 	bl	8000942 <my_wait>
#ifdef EIGHT_BIT_MODE
	//Enable and disable pulse
	LCD_kick();
 8000b84:	f000 f80e 	bl	8000ba4 <LCD_kick>
	//Enable and disable pulse
	LCD_kick();
#endif
*/

}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40010800 	.word	0x40010800

08000b94 <LCD_Clear_Screen>:


void LCD_Clear_Screen(void){
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	LCD_Command(LCD_CLEAR_SCREEN);
 8000b98:	2001      	movs	r0, #1
 8000b9a:	f7ff ffd9 	bl	8000b50 <LCD_Command>
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
	...

08000ba4 <LCD_kick>:

void LCD_kick(void){
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
//	ClearBit(lcd_ctrl,EN_SWITCH);
	MCAL_GPIO_WritePin(lcd_ctrl, EN_SWITCH, GPIO_PIN_SET);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bae:	4807      	ldr	r0, [pc, #28]	; (8000bcc <LCD_kick+0x28>)
 8000bb0:	f7ff feb0 	bl	8000914 <MCAL_GPIO_WritePin>
	my_wait(50);
 8000bb4:	2032      	movs	r0, #50	; 0x32
 8000bb6:	f7ff fec4 	bl	8000942 <my_wait>
//	SetBit(lcd_ctrl,EN_SWITCH);
	MCAL_GPIO_WritePin(lcd_ctrl, EN_SWITCH, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bc0:	4802      	ldr	r0, [pc, #8]	; (8000bcc <LCD_kick+0x28>)
 8000bc2:	f7ff fea7 	bl	8000914 <MCAL_GPIO_WritePin>
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40010800 	.word	0x40010800

08000bd0 <LCD_WriteChar>:
	MCAL_GPIO_WritePin(lcd_ctrl, RW_SWITCH, GPIO_PIN_RESET);

}


void LCD_WriteChar(char data){
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_WritePort(lcd_port, data);
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	4619      	mov	r1, r3
 8000be0:	480b      	ldr	r0, [pc, #44]	; (8000c10 <LCD_WriteChar+0x40>)
 8000be2:	f7ff fe89 	bl	80008f8 <MCAL_GPIO_WritePort>
	//setting data mode
//	SetBit(lcd_ctrl,RS_SWITCH);
	MCAL_GPIO_WritePin(lcd_ctrl, RS_SWITCH, GPIO_PIN_SET);
 8000be6:	2201      	movs	r2, #1
 8000be8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bec:	4808      	ldr	r0, [pc, #32]	; (8000c10 <LCD_WriteChar+0x40>)
 8000bee:	f7ff fe91 	bl	8000914 <MCAL_GPIO_WritePin>
	//setting write mode
//	ClearBit(lcd_ctrl,RW_SWITCH);
	MCAL_GPIO_WritePin(lcd_ctrl, RW_SWITCH, GPIO_PIN_RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bf8:	4805      	ldr	r0, [pc, #20]	; (8000c10 <LCD_WriteChar+0x40>)
 8000bfa:	f7ff fe8b 	bl	8000914 <MCAL_GPIO_WritePin>
	my_wait(1);
 8000bfe:	2001      	movs	r0, #1
 8000c00:	f7ff fe9f 	bl	8000942 <my_wait>
	//Enable and disable pulse
	LCD_kick();
	//command passed to the function
	lcd_port = (lcd_port & 0x0F)|(data << DATA_shift);
#endif*/
	LCD_kick();
 8000c04:	f7ff ffce 	bl	8000ba4 <LCD_kick>
}
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40010800 	.word	0x40010800

08000c14 <LCD_WriteString>:


void LCD_WriteString( char* data){
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
	int counter = 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60fb      	str	r3, [r7, #12]
	while (*data > 0)
 8000c20:	e01c      	b.n	8000c5c <LCD_WriteString+0x48>
	{
		counter++;
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	3301      	adds	r3, #1
 8000c26:	60fb      	str	r3, [r7, #12]
		LCD_WriteChar(*data++);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	1c5a      	adds	r2, r3, #1
 8000c2c:	607a      	str	r2, [r7, #4]
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff ffcd 	bl	8000bd0 <LCD_WriteChar>
		if (counter == 16)
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	2b10      	cmp	r3, #16
 8000c3a:	d104      	bne.n	8000c46 <LCD_WriteString+0x32>
		{	
			LCD_GOTO_XY(2 , 0);
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	2002      	movs	r0, #2
 8000c40:	f7ff ff5c 	bl	8000afc <LCD_GOTO_XY>
 8000c44:	e00a      	b.n	8000c5c <LCD_WriteString+0x48>
		}
		else if (counter == 32)
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	2b20      	cmp	r3, #32
 8000c4a:	d107      	bne.n	8000c5c <LCD_WriteString+0x48>
		{	
			// lcd is full must be cleared
			LCD_Clear_Screen();
 8000c4c:	f7ff ffa2 	bl	8000b94 <LCD_Clear_Screen>
			//begin at first row
			LCD_GOTO_XY(1,0);
 8000c50:	2100      	movs	r1, #0
 8000c52:	2001      	movs	r0, #1
 8000c54:	f7ff ff52 	bl	8000afc <LCD_GOTO_XY>
			//reset counter
			counter = 0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60fb      	str	r3, [r7, #12]
	while (*data > 0)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d1de      	bne.n	8000c22 <LCD_WriteString+0xe>
		}
	}
}
 8000c64:	bf00      	nop
 8000c66:	3710      	adds	r7, #16
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <wait>:

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void wait(int x){
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	unsigned int i,j;
	for (i=0; i<x;i++){
 8000c74:	2300      	movs	r3, #0
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	e00b      	b.n	8000c92 <wait+0x26>
		for(j=0;j<255;j++);
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	e002      	b.n	8000c86 <wait+0x1a>
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	3301      	adds	r3, #1
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	2bfe      	cmp	r3, #254	; 0xfe
 8000c8a:	d9f9      	bls.n	8000c80 <wait+0x14>
	for (i=0; i<x;i++){
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	68fa      	ldr	r2, [r7, #12]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d3ef      	bcc.n	8000c7a <wait+0xe>
	}
}
 8000c9a:	bf00      	nop
 8000c9c:	3714      	adds	r7, #20
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr

08000ca4 <clock_init>:


void clock_init(){
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0

	RCC_GPIOA_CLK_EN();
 8000ca8:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <clock_init+0x30>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	4a09      	ldr	r2, [pc, #36]	; (8000cd4 <clock_init+0x30>)
 8000cae:	f043 0304 	orr.w	r3, r3, #4
 8000cb2:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000cb4:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <clock_init+0x30>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	4a06      	ldr	r2, [pc, #24]	; (8000cd4 <clock_init+0x30>)
 8000cba:	f043 0308 	orr.w	r3, r3, #8
 8000cbe:	6193      	str	r3, [r2, #24]
	//To enable EXTI
	RCC_AFIO_CLK_EN();
 8000cc0:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <clock_init+0x30>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	4a03      	ldr	r2, [pc, #12]	; (8000cd4 <clock_init+0x30>)
 8000cc6:	f043 0301 	orr.w	r3, r3, #1
 8000cca:	6193      	str	r3, [r2, #24]
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr
 8000cd4:	40021000 	.word	0x40021000

08000cd8 <EXTI9_Callback>:
uint8_t IRQ_Flag=0;

void EXTI9_Callback(){
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
	LCD_Clear_Screen();
 8000cdc:	f7ff ff5a 	bl	8000b94 <LCD_Clear_Screen>
	IRQ_Flag =1 ;
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <EXTI9_Callback+0x20>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	701a      	strb	r2, [r3, #0]
	LCD_WriteString("IRQ EXTI9 happened _|-");
 8000ce6:	4805      	ldr	r0, [pc, #20]	; (8000cfc <EXTI9_Callback+0x24>)
 8000ce8:	f7ff ff94 	bl	8000c14 <LCD_WriteString>
	wait(100);
 8000cec:	2064      	movs	r0, #100	; 0x64
 8000cee:	f7ff ffbd 	bl	8000c6c <wait>

}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	2000001c 	.word	0x2000001c
 8000cfc:	08000e2c 	.word	0x08000e2c

08000d00 <main>:

int main()
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
	clock_init();
 8000d06:	f7ff ffcd 	bl	8000ca4 <clock_init>
	LCD_init();
 8000d0a:	f7ff fe37 	bl	800097c <LCD_init>
	LCD_Clear_Screen();
 8000d0e:	f7ff ff41 	bl	8000b94 <LCD_Clear_Screen>
 * EXTI_CFG.EXTI_PIN.EXTI_InputLineNumber= EXTI9;
 * EXTI_CFG.EXTI_PIN.IVT_IRQ_Number= EXTI9_IRQ;
 */

// It is easier to do it like that(line below this comment)
	EXTI_CFG.EXTI_PIN = EXTI9PB9;
 8000d12:	4a14      	ldr	r2, [pc, #80]	; (8000d64 <main+0x64>)
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d18:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_CFG.IRQ_EN = EXTI_IRQ_Enable;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	747b      	strb	r3, [r7, #17]
	EXTI_CFG.P_IRQ_CallBack = EXTI9_Callback;
 8000d20:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <main+0x68>)
 8000d22:	617b      	str	r3, [r7, #20]
	EXTI_CFG.Trigger_Case = EXTI_Trigger_RISING;
 8000d24:	2300      	movs	r3, #0
 8000d26:	743b      	strb	r3, [r7, #16]
	MCAL_EXTI_GPIO_Init(&EXTI_CFG);
 8000d28:	1d3b      	adds	r3, r7, #4
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fbd8 	bl	80004e0 <MCAL_EXTI_GPIO_Init>
	LCD_WriteString("Hello and Welcome to my EXTI Test");
 8000d30:	480e      	ldr	r0, [pc, #56]	; (8000d6c <main+0x6c>)
 8000d32:	f7ff ff6f 	bl	8000c14 <LCD_WriteString>
	wait(100);
 8000d36:	2064      	movs	r0, #100	; 0x64
 8000d38:	f7ff ff98 	bl	8000c6c <wait>
	LCD_Clear_Screen();
 8000d3c:	f7ff ff2a 	bl	8000b94 <LCD_Clear_Screen>
	LCD_WriteString("LCD is Ready !!!");
 8000d40:	480b      	ldr	r0, [pc, #44]	; (8000d70 <main+0x70>)
 8000d42:	f7ff ff67 	bl	8000c14 <LCD_WriteString>
	wait(100);
 8000d46:	2064      	movs	r0, #100	; 0x64
 8000d48:	f7ff ff90 	bl	8000c6c <wait>
	LCD_Clear_Screen();
 8000d4c:	f7ff ff22 	bl	8000b94 <LCD_Clear_Screen>
	while(1){

		if(IRQ_Flag){
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <main+0x74>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d0fb      	beq.n	8000d50 <main+0x50>
			LCD_Clear_Screen();
 8000d58:	f7ff ff1c 	bl	8000b94 <LCD_Clear_Screen>
			IRQ_Flag=0;
 8000d5c:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <main+0x74>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	701a      	strb	r2, [r3, #0]
		if(IRQ_Flag){
 8000d62:	e7f5      	b.n	8000d50 <main+0x50>
 8000d64:	08000e7c 	.word	0x08000e7c
 8000d68:	08000cd9 	.word	0x08000cd9
 8000d6c:	08000e44 	.word	0x08000e44
 8000d70:	08000e68 	.word	0x08000e68
 8000d74:	2000001c 	.word	0x2000001c

08000d78 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d78:	480d      	ldr	r0, [pc, #52]	; (8000db0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d7a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d7c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d80:	480c      	ldr	r0, [pc, #48]	; (8000db4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d82:	490d      	ldr	r1, [pc, #52]	; (8000db8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d84:	4a0d      	ldr	r2, [pc, #52]	; (8000dbc <LoopForever+0xe>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d88:	e002      	b.n	8000d90 <LoopCopyDataInit>

08000d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8e:	3304      	adds	r3, #4

08000d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d94:	d3f9      	bcc.n	8000d8a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d96:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d98:	4c0a      	ldr	r4, [pc, #40]	; (8000dc4 <LoopForever+0x16>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d9c:	e001      	b.n	8000da2 <LoopFillZerobss>

08000d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da0:	3204      	adds	r2, #4

08000da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da4:	d3fb      	bcc.n	8000d9e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000da6:	f000 f811 	bl	8000dcc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000daa:	f7ff ffa9 	bl	8000d00 <main>

08000dae <LoopForever>:

LoopForever:
  b LoopForever
 8000dae:	e7fe      	b.n	8000dae <LoopForever>
  ldr   r0, =_estack
 8000db0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000dbc:	08000e90 	.word	0x08000e90
  ldr r2, =_sbss
 8000dc0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000dc4:	20000060 	.word	0x20000060

08000dc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dc8:	e7fe      	b.n	8000dc8 <ADC1_2_IRQHandler>
	...

08000dcc <__libc_init_array>:
 8000dcc:	b570      	push	{r4, r5, r6, lr}
 8000dce:	2500      	movs	r5, #0
 8000dd0:	4e0c      	ldr	r6, [pc, #48]	; (8000e04 <__libc_init_array+0x38>)
 8000dd2:	4c0d      	ldr	r4, [pc, #52]	; (8000e08 <__libc_init_array+0x3c>)
 8000dd4:	1ba4      	subs	r4, r4, r6
 8000dd6:	10a4      	asrs	r4, r4, #2
 8000dd8:	42a5      	cmp	r5, r4
 8000dda:	d109      	bne.n	8000df0 <__libc_init_array+0x24>
 8000ddc:	f000 f81a 	bl	8000e14 <_init>
 8000de0:	2500      	movs	r5, #0
 8000de2:	4e0a      	ldr	r6, [pc, #40]	; (8000e0c <__libc_init_array+0x40>)
 8000de4:	4c0a      	ldr	r4, [pc, #40]	; (8000e10 <__libc_init_array+0x44>)
 8000de6:	1ba4      	subs	r4, r4, r6
 8000de8:	10a4      	asrs	r4, r4, #2
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	d105      	bne.n	8000dfa <__libc_init_array+0x2e>
 8000dee:	bd70      	pop	{r4, r5, r6, pc}
 8000df0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000df4:	4798      	blx	r3
 8000df6:	3501      	adds	r5, #1
 8000df8:	e7ee      	b.n	8000dd8 <__libc_init_array+0xc>
 8000dfa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000dfe:	4798      	blx	r3
 8000e00:	3501      	adds	r5, #1
 8000e02:	e7f2      	b.n	8000dea <__libc_init_array+0x1e>
 8000e04:	08000e88 	.word	0x08000e88
 8000e08:	08000e88 	.word	0x08000e88
 8000e0c:	08000e88 	.word	0x08000e88
 8000e10:	08000e8c 	.word	0x08000e8c

08000e14 <_init>:
 8000e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e16:	bf00      	nop
 8000e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e1a:	bc08      	pop	{r3}
 8000e1c:	469e      	mov	lr, r3
 8000e1e:	4770      	bx	lr

08000e20 <_fini>:
 8000e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e22:	bf00      	nop
 8000e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e26:	bc08      	pop	{r3}
 8000e28:	469e      	mov	lr, r3
 8000e2a:	4770      	bx	lr
