
unit6_lesson 4_lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000166  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ba  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d2  00000000  00000000  0000092a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000032d  00000000  00000000  00000efc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  0000122c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037f  00000000  00000000  000012d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b4  00000000  00000000  0000164f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001703  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 84 00 	jmp	0x108	; 0x108 <__vector_1>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__vector_2>
   c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 6d 00 	call	0xda	; 0xda <main>
  74:	0c 94 b1 00 	jmp	0x162	; 0x162 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <GPIO_init>:
#include "memory_map.h"
#include "util.h"
#include <avr/interrupt.h>
void GPIO_init(void){
// setting three pins as input
	ClearBit(DDRD,2);
  7c:	81 b3       	in	r24, 0x11	; 17
  7e:	8b 7f       	andi	r24, 0xFB	; 251
  80:	81 bb       	out	0x11, r24	; 17
	ClearBit(DDRD,3);
  82:	81 b3       	in	r24, 0x11	; 17
  84:	87 7f       	andi	r24, 0xF7	; 247
  86:	81 bb       	out	0x11, r24	; 17
	ClearBit(DDRB,2);
  88:	87 b3       	in	r24, 0x17	; 23
  8a:	8b 7f       	andi	r24, 0xFB	; 251
  8c:	87 bb       	out	0x17, r24	; 23
	
//setting pins as output direction for the leds
	SetBit(DDRD,5);
  8e:	81 b3       	in	r24, 0x11	; 17
  90:	80 62       	ori	r24, 0x20	; 32
  92:	81 bb       	out	0x11, r24	; 17
	SetBit(DDRD,6);
  94:	81 b3       	in	r24, 0x11	; 17
  96:	80 64       	ori	r24, 0x40	; 64
  98:	81 bb       	out	0x11, r24	; 17
	SetBit(DDRD,7);
  9a:	81 b3       	in	r24, 0x11	; 17
  9c:	80 68       	ori	r24, 0x80	; 128
  9e:	81 bb       	out	0x11, r24	; 17
  a0:	08 95       	ret

000000a2 <INT_init>:
}
void INT_init(void){
//enable I-Bit in Status Register
	SetBit(SREG,7);
  a2:	8f b7       	in	r24, 0x3f	; 63
  a4:	80 68       	ori	r24, 0x80	; 128
  a6:	8f bf       	out	0x3f, r24	; 63
	
//enable general interrupt control for each INT 	
	SetBit(GICR,5);
  a8:	8b b7       	in	r24, 0x3b	; 59
  aa:	80 62       	ori	r24, 0x20	; 32
  ac:	8b bf       	out	0x3b, r24	; 59
	SetBit(GICR,6);
  ae:	8b b7       	in	r24, 0x3b	; 59
  b0:	80 64       	ori	r24, 0x40	; 64
  b2:	8b bf       	out	0x3b, r24	; 59
	SetBit(GICR,7);
  b4:	8b b7       	in	r24, 0x3b	; 59
  b6:	80 68       	ori	r24, 0x80	; 128
  b8:	8b bf       	out	0x3b, r24	; 59
	
// MCUCR CONFIG	:
	//setting INT0 to logical sense
	ClearBit(MCUCR,ISC01);
  ba:	85 b7       	in	r24, 0x35	; 53
  bc:	8d 7f       	andi	r24, 0xFD	; 253
  be:	85 bf       	out	0x35, r24	; 53
	SetBit(MCUCR,ISC00);
  c0:	85 b7       	in	r24, 0x35	; 53
  c2:	81 60       	ori	r24, 0x01	; 1
  c4:	85 bf       	out	0x35, r24	; 53
	//setting INT1 to rising sense 
	SetBit(MCUCR,ISC10);
  c6:	85 b7       	in	r24, 0x35	; 53
  c8:	84 60       	ori	r24, 0x04	; 4
  ca:	85 bf       	out	0x35, r24	; 53
	SetBit(MCUCR,ISC11);
  cc:	85 b7       	in	r24, 0x35	; 53
  ce:	88 60       	ori	r24, 0x08	; 8
  d0:	85 bf       	out	0x35, r24	; 53
	//setting INT2 to falling sense
	ClearBit(MCUCSR,ISC2);
  d2:	84 b7       	in	r24, 0x34	; 52
  d4:	8f 7b       	andi	r24, 0xBF	; 191
  d6:	84 bf       	out	0x34, r24	; 52
  d8:	08 95       	ret

000000da <main>:
	
	
}
int main(void)
{	
	GPIO_init();
  da:	0e 94 3e 00 	call	0x7c	; 0x7c <GPIO_init>
	INT_init();
  de:	0e 94 51 00 	call	0xa2	; 0xa2 <INT_init>
    while (1) 
    {
		ClearBit(PORTD,5);
  e2:	82 b3       	in	r24, 0x12	; 18
  e4:	8f 7d       	andi	r24, 0xDF	; 223
  e6:	82 bb       	out	0x12, r24	; 18
		ClearBit(PORTD,6);
  e8:	82 b3       	in	r24, 0x12	; 18
  ea:	8f 7b       	andi	r24, 0xBF	; 191
  ec:	82 bb       	out	0x12, r24	; 18
		ClearBit(PORTD,7);
  ee:	82 b3       	in	r24, 0x12	; 18
  f0:	8f 77       	andi	r24, 0x7F	; 127
  f2:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	2f e3       	ldi	r18, 0x3F	; 63
  f6:	82 e4       	ldi	r24, 0x42	; 66
  f8:	9f e0       	ldi	r25, 0x0F	; 15
  fa:	21 50       	subi	r18, 0x01	; 1
  fc:	80 40       	sbci	r24, 0x00	; 0
  fe:	90 40       	sbci	r25, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <main+0x20>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x2a>
 104:	00 00       	nop
 106:	ed cf       	rjmp	.-38     	; 0xe2 <main+0x8>

00000108 <__vector_1>:
		_delay_ms(5000);
		
    }
}

ISR(INT0_vect){
 108:	1f 92       	push	r1
 10a:	0f 92       	push	r0
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	0f 92       	push	r0
 110:	11 24       	eor	r1, r1
 112:	8f 93       	push	r24
	SetBit(PORTD,5);
 114:	82 b3       	in	r24, 0x12	; 18
 116:	80 62       	ori	r24, 0x20	; 32
 118:	82 bb       	out	0x12, r24	; 18
		
}
 11a:	8f 91       	pop	r24
 11c:	0f 90       	pop	r0
 11e:	0f be       	out	0x3f, r0	; 63
 120:	0f 90       	pop	r0
 122:	1f 90       	pop	r1
 124:	18 95       	reti

00000126 <__vector_2>:

ISR(INT1_vect){
 126:	1f 92       	push	r1
 128:	0f 92       	push	r0
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	0f 92       	push	r0
 12e:	11 24       	eor	r1, r1
 130:	8f 93       	push	r24
	SetBit(PORTD,6);
 132:	82 b3       	in	r24, 0x12	; 18
 134:	80 64       	ori	r24, 0x40	; 64
 136:	82 bb       	out	0x12, r24	; 18
	
}
 138:	8f 91       	pop	r24
 13a:	0f 90       	pop	r0
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

00000144 <__vector_3>:
ISR(INT2_vect){
 144:	1f 92       	push	r1
 146:	0f 92       	push	r0
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
 14e:	8f 93       	push	r24
	SetBit(PORTD,7);
 150:	82 b3       	in	r24, 0x12	; 18
 152:	80 68       	ori	r24, 0x80	; 128
 154:	82 bb       	out	0x12, r24	; 18
 156:	8f 91       	pop	r24
 158:	0f 90       	pop	r0
 15a:	0f be       	out	0x3f, r0	; 63
 15c:	0f 90       	pop	r0
 15e:	1f 90       	pop	r1
 160:	18 95       	reti

00000162 <_exit>:
 162:	f8 94       	cli

00000164 <__stop_program>:
 164:	ff cf       	rjmp	.-2      	; 0x164 <__stop_program>
