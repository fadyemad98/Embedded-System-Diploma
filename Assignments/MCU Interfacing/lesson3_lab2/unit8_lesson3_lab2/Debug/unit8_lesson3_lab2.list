
unit8_lesson3_lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000968  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000a98  08000a98  00010a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ab0  08000ab0  00010ab8  2**0
                  CONTENTS
  4 .ARM          00000000  08000ab0  08000ab0  00010ab8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ab0  08000ab8  00010ab8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ab0  08000ab0  00010ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ab4  08000ab4  00010ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010ab8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000000  08000ab8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08000ab8  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010ab8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000403b  00000000  00000000  00010ae1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000a31  00000000  00000000  00014b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a54  00000000  00000000  0001554d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001d0  00000000  00000000  00015fa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000178  00000000  00000000  00016178  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000bef  00000000  00000000  000162f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000216e  00000000  00000000  00016edf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a1fd  00000000  00000000  0001904d  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002324a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000590  00000000  00000000  000232c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000a80 	.word	0x08000a80

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000a80 	.word	0x08000a80

08000170 <EXTI0_IRQHandler>:
///**===========			ISR  Functions        =========================
///**================================================================
// */

void EXTI0_IRQHandler(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	//cleared by writing a ‘1’ into the bit Pending register (EXTI_PR)
	EXTI->EXTI_PR |= (1<<0) ;
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	695b      	ldr	r3, [r3, #20]
 8000178:	4a04      	ldr	r2, [pc, #16]	; (800018c <EXTI0_IRQHandler+0x1c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALL
	GP_IRQ_CallBack[0]() ;
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4798      	blx	r3
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010400 	.word	0x40010400
 8000190:	20000020 	.word	0x20000020

08000194 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void) {
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	EXTI->EXTI_PR |=  (1<<1) ;
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019e:	f043 0302 	orr.w	r3, r3, #2
 80001a2:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[1]() ;
 80001a4:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4798      	blx	r3
}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010400 	.word	0x40010400
 80001b4:	20000020 	.word	0x20000020

080001b8 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler (void) {
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	EXTI->EXTI_PR |=  (1<<2) ;
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	695b      	ldr	r3, [r3, #20]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[2]() ; }
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4798      	blx	r3
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010400 	.word	0x40010400
 80001d8:	20000020 	.word	0x20000020

080001dc <EXTI3_IRQHandler>:


void EXTI3_IRQHandler (void) {
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	EXTI->EXTI_PR |=  (1<<3) ;
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e6:	f043 0308 	orr.w	r3, r3, #8
 80001ea:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[3]() ; }
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4798      	blx	r3
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010400 	.word	0x40010400
 80001fc:	20000020 	.word	0x20000020

08000200 <EXTI4_IRQHandler>:


void EXTI4_IRQHandler (void) {
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	EXTI->EXTI_PR |=  (1<<4) ;
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <EXTI4_IRQHandler+0x1c>)
 800020a:	f043 0310 	orr.w	r3, r3, #16
 800020e:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]() ; }
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	4798      	blx	r3
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010400 	.word	0x40010400
 8000220:	20000020 	.word	0x20000020

08000224 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler (void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	if (EXTI->EXTI_PR & 1<<5 ) {	EXTI->EXTI_PR |=  (1<<5)    ; GP_IRQ_CallBack[5]() ;   }
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d008      	beq.n	8000246 <EXTI9_5_IRQHandler+0x22>
 8000234:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a22      	ldr	r2, [pc, #136]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
	if (EXTI->EXTI_PR & 1<<6 ) {	EXTI->EXTI_PR |=  (1<<6)    ; GP_IRQ_CallBack[6]() ;   }
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024e:	2b00      	cmp	r3, #0
 8000250:	d008      	beq.n	8000264 <EXTI9_5_IRQHandler+0x40>
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025c:	6153      	str	r3, [r2, #20]
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4798      	blx	r3
	if (EXTI->EXTI_PR & 1<<7 ) {	EXTI->EXTI_PR |=  (1<<7)    ; GP_IRQ_CallBack[7]() ;   }
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800026c:	2b00      	cmp	r3, #0
 800026e:	d008      	beq.n	8000282 <EXTI9_5_IRQHandler+0x5e>
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027a:	6153      	str	r3, [r2, #20]
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4798      	blx	r3
	if (EXTI->EXTI_PR & 1<<8 ) {	EXTI->EXTI_PR |=  (1<<8)    ; GP_IRQ_CallBack[8]() ;   }
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <EXTI9_5_IRQHandler+0x7c>
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000298:	6153      	str	r3, [r2, #20]
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	4798      	blx	r3
	if (EXTI->EXTI_PR & 1<<9 ) {	EXTI->EXTI_PR |=  (1<<9)    ; GP_IRQ_CallBack[9]() ;   }
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d008      	beq.n	80002be <EXTI9_5_IRQHandler+0x9a>
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	6153      	str	r3, [r2, #20]
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002bc:	4798      	blx	r3

}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	20000020 	.word	0x20000020

080002cc <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	if (EXTI->EXTI_PR & 1<<10 ) {	EXTI->EXTI_PR |=  (1<<10)    ; GP_IRQ_CallBack[10]() ;   }
 80002d0:	4b2d      	ldr	r3, [pc, #180]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d008      	beq.n	80002ee <EXTI15_10_IRQHandler+0x22>
 80002dc:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a29      	ldr	r2, [pc, #164]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e6:	6153      	str	r3, [r2, #20]
 80002e8:	4b28      	ldr	r3, [pc, #160]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 80002ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002ec:	4798      	blx	r3
	if (EXTI->EXTI_PR & 1<<11 ) {	EXTI->EXTI_PR |=  (1<<11)    ; GP_IRQ_CallBack[11]() ;   }
 80002ee:	4b26      	ldr	r3, [pc, #152]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <EXTI15_10_IRQHandler+0x40>
 80002fa:	4b23      	ldr	r3, [pc, #140]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a22      	ldr	r2, [pc, #136]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b21      	ldr	r3, [pc, #132]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030a:	4798      	blx	r3
	if (EXTI->EXTI_PR & 1<<12 ) {	EXTI->EXTI_PR |=  (1<<12)    ; GP_IRQ_CallBack[12]() ;   }
 800030c:	4b1e      	ldr	r3, [pc, #120]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI15_10_IRQHandler+0x5e>
 8000318:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a1a      	ldr	r2, [pc, #104]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000322:	6153      	str	r3, [r2, #20]
 8000324:	4b19      	ldr	r3, [pc, #100]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4798      	blx	r3
	if (EXTI->EXTI_PR & 1<<13 ) {	EXTI->EXTI_PR |=  (1<<13)    ; GP_IRQ_CallBack[13]() ;   }
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI15_10_IRQHandler+0x7c>
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a13      	ldr	r2, [pc, #76]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800033c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000346:	4798      	blx	r3
	if (EXTI->EXTI_PR & 1<<14 ) {	EXTI->EXTI_PR |=  (1<<14)    ; GP_IRQ_CallBack[14]() ;   }
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI15_10_IRQHandler+0x9a>
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6153      	str	r3, [r2, #20]
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000364:	4798      	blx	r3
	if (EXTI->EXTI_PR & 1<<15 ) {	EXTI->EXTI_PR |=  (1<<15)    ; GP_IRQ_CallBack[15]() ;   }
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800036e:	2b00      	cmp	r3, #0
 8000370:	d008      	beq.n	8000384 <EXTI15_10_IRQHandler+0xb8>
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b03      	ldr	r3, [pc, #12]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000382:	4798      	blx	r3


}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40010400 	.word	0x40010400
 800038c:	20000020 	.word	0x20000020

08000390 <Get_CRLH_Position>:
 * =======================================================================================
 * 							Generic Functions
 * =======================================================================================
 */
uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 800039a:	88fb      	ldrh	r3, [r7, #6]
 800039c:	2b80      	cmp	r3, #128	; 0x80
 800039e:	d042      	beq.n	8000426 <Get_CRLH_Position+0x96>
 80003a0:	2b80      	cmp	r3, #128	; 0x80
 80003a2:	dc11      	bgt.n	80003c8 <Get_CRLH_Position+0x38>
 80003a4:	2b08      	cmp	r3, #8
 80003a6:	d036      	beq.n	8000416 <Get_CRLH_Position+0x86>
 80003a8:	2b08      	cmp	r3, #8
 80003aa:	dc06      	bgt.n	80003ba <Get_CRLH_Position+0x2a>
 80003ac:	2b02      	cmp	r3, #2
 80003ae:	d02e      	beq.n	800040e <Get_CRLH_Position+0x7e>
 80003b0:	2b04      	cmp	r3, #4
 80003b2:	d02e      	beq.n	8000412 <Get_CRLH_Position+0x82>
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d028      	beq.n	800040a <Get_CRLH_Position+0x7a>
 80003b8:	e047      	b.n	800044a <Get_CRLH_Position+0xba>
 80003ba:	2b20      	cmp	r3, #32
 80003bc:	d02f      	beq.n	800041e <Get_CRLH_Position+0x8e>
 80003be:	2b40      	cmp	r3, #64	; 0x40
 80003c0:	d02f      	beq.n	8000422 <Get_CRLH_Position+0x92>
 80003c2:	2b10      	cmp	r3, #16
 80003c4:	d029      	beq.n	800041a <Get_CRLH_Position+0x8a>
 80003c6:	e040      	b.n	800044a <Get_CRLH_Position+0xba>
 80003c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003cc:	d033      	beq.n	8000436 <Get_CRLH_Position+0xa6>
 80003ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003d2:	dc09      	bgt.n	80003e8 <Get_CRLH_Position+0x58>
 80003d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003d8:	d029      	beq.n	800042e <Get_CRLH_Position+0x9e>
 80003da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003de:	d028      	beq.n	8000432 <Get_CRLH_Position+0xa2>
 80003e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80003e4:	d021      	beq.n	800042a <Get_CRLH_Position+0x9a>
 80003e6:	e030      	b.n	800044a <Get_CRLH_Position+0xba>
 80003e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003ec:	d027      	beq.n	800043e <Get_CRLH_Position+0xae>
 80003ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003f2:	dc03      	bgt.n	80003fc <Get_CRLH_Position+0x6c>
 80003f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80003f8:	d01f      	beq.n	800043a <Get_CRLH_Position+0xaa>
 80003fa:	e026      	b.n	800044a <Get_CRLH_Position+0xba>
 80003fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000400:	d01f      	beq.n	8000442 <Get_CRLH_Position+0xb2>
 8000402:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000406:	d01e      	beq.n	8000446 <Get_CRLH_Position+0xb6>
 8000408:	e01f      	b.n	800044a <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0 ;
 800040a:	2300      	movs	r3, #0
 800040c:	e01e      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_1:
		return 4 ;
 800040e:	2304      	movs	r3, #4
 8000410:	e01c      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_2:
		return 8 ;
 8000412:	2308      	movs	r3, #8
 8000414:	e01a      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_3:
		return 12 ;
 8000416:	230c      	movs	r3, #12
 8000418:	e018      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_4:
		return 16 ;
 800041a:	2310      	movs	r3, #16
 800041c:	e016      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_5:
		return 20 ;
 800041e:	2314      	movs	r3, #20
 8000420:	e014      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_6:
		return 24 ;
 8000422:	2318      	movs	r3, #24
 8000424:	e012      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_7:
		return 28 ;
 8000426:	231c      	movs	r3, #28
 8000428:	e010      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_8:
		return 0 ;
 800042a:	2300      	movs	r3, #0
 800042c:	e00e      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_9:
		return 4 ;
 800042e:	2304      	movs	r3, #4
 8000430:	e00c      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_10:
		return 8 ;
 8000432:	2308      	movs	r3, #8
 8000434:	e00a      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_11:
		return 12 ;
 8000436:	230c      	movs	r3, #12
 8000438:	e008      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_12:
		return 16 ;
 800043a:	2310      	movs	r3, #16
 800043c:	e006      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_13:
		return 20 ;
 800043e:	2314      	movs	r3, #20
 8000440:	e004      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_14:
		return 24 ;
 8000442:	2318      	movs	r3, #24
 8000444:	e002      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_15:
		return 28 ;
 8000446:	231c      	movs	r3, #28
 8000448:	e000      	b.n	800044c <Get_CRLH_Position+0xbc>
		break ;


	}
	return 0 ;
 800044a:	2300      	movs	r3, #0

}
 800044c:	4618      	mov	r0, r3
 800044e:	370c      	adds	r7, #12
 8000450:	46bd      	mov	sp, r7
 8000452:	bc80      	pop	{r7}
 8000454:	4770      	bx	lr

08000456 <MCAL_GPIO_Init>:
 * @retval 			-none
 * Note				-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 					 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx , GPIO_PINConfig_t* PinConfig)
{
 8000456:	b590      	push	{r4, r7, lr}
 8000458:	b085      	sub	sp, #20
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
 800045e:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 >> 7
	//Port configuration register High (GPIOx_CRH) Configure PINS from 8 >> 15
	volatile uint32_t* ConfigRegister = NULL;
 8000460:	2300      	movs	r3, #0
 8000462:	60bb      	str	r3, [r7, #8]

	uint8_t PIN_Config = 0;
 8000464:	2300      	movs	r3, #0
 8000466:	73fb      	strb	r3, [r7, #15]
	ConfigRegister = (PinConfig->GPIO_PinNumber<GPIO_PIN_8)?(&GPIOx->GPIOx_CRL):(&GPIOx->GPIOx_CRH);
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	881b      	ldrh	r3, [r3, #0]
 800046c:	2bff      	cmp	r3, #255	; 0xff
 800046e:	d801      	bhi.n	8000474 <MCAL_GPIO_Init+0x1e>
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	e001      	b.n	8000478 <MCAL_GPIO_Init+0x22>
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	3304      	adds	r3, #4
 8000478:	60bb      	str	r3, [r7, #8]
	(*ConfigRegister) &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	881b      	ldrh	r3, [r3, #0]
 800047e:	4618      	mov	r0, r3
 8000480:	f7ff ff86 	bl	8000390 <Get_CRLH_Position>
 8000484:	4603      	mov	r3, r0
 8000486:	461a      	mov	r2, r3
 8000488:	230f      	movs	r3, #15
 800048a:	4093      	lsls	r3, r2
 800048c:	43da      	mvns	r2, r3
 800048e:	68bb      	ldr	r3, [r7, #8]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	401a      	ands	r2, r3
 8000494:	68bb      	ldr	r3, [r7, #8]
 8000496:	601a      	str	r2, [r3, #0]

	//if pin is output
	if((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD)||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP)||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD)||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	789b      	ldrb	r3, [r3, #2]
 800049c:	2b07      	cmp	r3, #7
 800049e:	d00b      	beq.n	80004b8 <MCAL_GPIO_Init+0x62>
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	789b      	ldrb	r3, [r3, #2]
 80004a4:	2b06      	cmp	r3, #6
 80004a6:	d007      	beq.n	80004b8 <MCAL_GPIO_Init+0x62>
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	789b      	ldrb	r3, [r3, #2]
 80004ac:	2b05      	cmp	r3, #5
 80004ae:	d003      	beq.n	80004b8 <MCAL_GPIO_Init+0x62>
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	789b      	ldrb	r3, [r3, #2]
 80004b4:	2b04      	cmp	r3, #4
 80004b6:	d11c      	bne.n	80004f2 <MCAL_GPIO_Init+0x9c>
	{
		//Set CNFy[1:0] and MODEx[1:0]
		PIN_Config = ( (((PinConfig->GPIO_MODE -4) << 2) | ((PinConfig->GPIO_Output_Speed) << 0)) & 0x0F );
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	789b      	ldrb	r3, [r3, #2]
 80004bc:	3b04      	subs	r3, #4
 80004be:	009b      	lsls	r3, r3, #2
 80004c0:	b25a      	sxtb	r2, r3
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	78db      	ldrb	r3, [r3, #3]
 80004c6:	b25b      	sxtb	r3, r3
 80004c8:	4313      	orrs	r3, r2
 80004ca:	b25b      	sxtb	r3, r3
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	f003 030f 	and.w	r3, r3, #15
 80004d2:	73fb      	strb	r3, [r7, #15]
		(*ConfigRegister) |= ( (PIN_Config) <<Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 80004d4:	7bfc      	ldrb	r4, [r7, #15]
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	881b      	ldrh	r3, [r3, #0]
 80004da:	4618      	mov	r0, r3
 80004dc:	f7ff ff58 	bl	8000390 <Get_CRLH_Position>
 80004e0:	4603      	mov	r3, r0
 80004e2:	fa04 f203 	lsl.w	r2, r4, r3
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	431a      	orrs	r2, r3
 80004ec:	68bb      	ldr	r3, [r7, #8]
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	e02c      	b.n	800054c <MCAL_GPIO_Init+0xf6>
	}
	//if pin is input
	else //MODE = 00 :Input mode (reset state)
	{
		if((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO)||(PinConfig->GPIO_MODE == GPIO_MODE_ANALOG) )
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	789b      	ldrb	r3, [r3, #2]
 80004f6:	2b01      	cmp	r3, #1
 80004f8:	d003      	beq.n	8000502 <MCAL_GPIO_Init+0xac>
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	789b      	ldrb	r3, [r3, #2]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d107      	bne.n	8000512 <MCAL_GPIO_Init+0xbc>
		{
			//Set CNFy[1:0] and MODEx[1:0]
			PIN_Config = ( (((PinConfig->GPIO_MODE) << 2) | 0x0 ) & 0x0F );
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	789b      	ldrb	r3, [r3, #2]
 8000506:	009b      	lsls	r3, r3, #2
 8000508:	b2db      	uxtb	r3, r3
 800050a:	f003 030f 	and.w	r3, r3, #15
 800050e:	73fb      	strb	r3, [r7, #15]
 8000510:	e01c      	b.n	800054c <MCAL_GPIO_Init+0xf6>
		}
		else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT) //consider it  as input  floating
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	789b      	ldrb	r3, [r3, #2]
 8000516:	2b08      	cmp	r3, #8
 8000518:	d102      	bne.n	8000520 <MCAL_GPIO_Init+0xca>
		{
			//Set CNFy[1:0] and MODEx[1:0]
			PIN_Config = ( (((GPIO_MODE_INPUT_FLO) << 2) | 0x0 ) & 0x0F );
 800051a:	2304      	movs	r3, #4
 800051c:	73fb      	strb	r3, [r7, #15]
 800051e:	e015      	b.n	800054c <MCAL_GPIO_Init+0xf6>
		}
		else //PU PD Input
		{
			PIN_Config = ( (((GPIO_MODE_INPUT_PU) << 2) | 0x0 ) & 0x0F );
 8000520:	2308      	movs	r3, #8
 8000522:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	789b      	ldrb	r3, [r3, #2]
 8000528:	2b02      	cmp	r3, #2
 800052a:	d107      	bne.n	800053c <MCAL_GPIO_Init+0xe6>
			{
				//PxODR = 1 Input pull-up :Table 20. Port bit configuration table
				GPIOx->GPIOx_ODR |= PinConfig->GPIO_PinNumber;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	68db      	ldr	r3, [r3, #12]
 8000530:	683a      	ldr	r2, [r7, #0]
 8000532:	8812      	ldrh	r2, [r2, #0]
 8000534:	431a      	orrs	r2, r3
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	e007      	b.n	800054c <MCAL_GPIO_Init+0xf6>
			}else{
				//PxODR = 0 Input pull-down :Table 20. Port bit configuration table
				GPIOx->GPIOx_ODR &= ~(PinConfig->GPIO_PinNumber);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	68db      	ldr	r3, [r3, #12]
 8000540:	683a      	ldr	r2, [r7, #0]
 8000542:	8812      	ldrh	r2, [r2, #0]
 8000544:	43d2      	mvns	r2, r2
 8000546:	401a      	ands	r2, r3
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	60da      	str	r2, [r3, #12]

		}

	}
	//write on CRL or CRH
	(*ConfigRegister) |= ( (PIN_Config) <<Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 800054c:	7bfc      	ldrb	r4, [r7, #15]
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	881b      	ldrh	r3, [r3, #0]
 8000552:	4618      	mov	r0, r3
 8000554:	f7ff ff1c 	bl	8000390 <Get_CRLH_Position>
 8000558:	4603      	mov	r3, r0
 800055a:	fa04 f203 	lsl.w	r2, r4, r3
 800055e:	68bb      	ldr	r3, [r7, #8]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	431a      	orrs	r2, r3
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	601a      	str	r2, [r3, #0]
}
 8000568:	bf00      	nop
 800056a:	3714      	adds	r7, #20
 800056c:	46bd      	mov	sp, r7
 800056e:	bd90      	pop	{r4, r7, pc}

08000570 <MCAL_RCC_GetSYS_CLCKFreq>:
 * 							Generic Functions
 * =======================================================================================
 */

uint32_t MCAL_RCC_GetSYS_CLCKFreq(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
	//	Set and cleared by hardware to indicate which clock source is used as system clock.
	//	00: HSI oscillator used as system clock
	//	01: HSE oscillator used as system clock
	//	10: PLL used as system clock
	//	11: Not applicable
	switch  ( (RCC->RCC_CFGR  >> 2  ) & 0b11 )
 8000574:	4b0a      	ldr	r3, [pc, #40]	; (80005a0 <MCAL_RCC_GetSYS_CLCKFreq+0x30>)
 8000576:	685b      	ldr	r3, [r3, #4]
 8000578:	089b      	lsrs	r3, r3, #2
 800057a:	f003 0303 	and.w	r3, r3, #3
 800057e:	2b01      	cmp	r3, #1
 8000580:	d006      	beq.n	8000590 <MCAL_RCC_GetSYS_CLCKFreq+0x20>
 8000582:	2b01      	cmp	r3, #1
 8000584:	d302      	bcc.n	800058c <MCAL_RCC_GetSYS_CLCKFreq+0x1c>
 8000586:	2b02      	cmp	r3, #2
 8000588:	d004      	beq.n	8000594 <MCAL_RCC_GetSYS_CLCKFreq+0x24>
 800058a:	e005      	b.n	8000598 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
	{
	case 0:
		return HSI_RC_Clk ;
 800058c:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <MCAL_RCC_GetSYS_CLCKFreq+0x34>)
 800058e:	e003      	b.n	8000598 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break ;

	case 1:
		//todo need to calculate  it //HSE User Should Specify it
		return HSE_Clock ;
 8000590:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 8000592:	e001      	b.n	8000598 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break ;

	case 2:
		//todo need to calculate  it PLLCLK and PLLMUL & PLL Source MUX
		return 16000000 ;
 8000594:	4b04      	ldr	r3, [pc, #16]	; (80005a8 <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 8000596:	e7ff      	b.n	8000598 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break ;
	}
}
 8000598:	4618      	mov	r0, r3
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr
 80005a0:	40021000 	.word	0x40021000
 80005a4:	007a1200 	.word	0x007a1200
 80005a8:	00f42400 	.word	0x00f42400

080005ac <MCAL_RCC_GetHCLKFreq>:


uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (MCAL_RCC_GetSYS_CLCKFreq() >> AHBPrescTable[ ( (RCC->RCC_CFGR >> 4 ) & 0xF) ]  ); //the first shift is multiplication}
 80005b0:	f7ff ffde 	bl	8000570 <MCAL_RCC_GetSYS_CLCKFreq>
 80005b4:	4601      	mov	r1, r0
 80005b6:	4b05      	ldr	r3, [pc, #20]	; (80005cc <MCAL_RCC_GetHCLKFreq+0x20>)
 80005b8:	685b      	ldr	r3, [r3, #4]
 80005ba:	091b      	lsrs	r3, r3, #4
 80005bc:	f003 030f 	and.w	r3, r3, #15
 80005c0:	4a03      	ldr	r2, [pc, #12]	; (80005d0 <MCAL_RCC_GetHCLKFreq+0x24>)
 80005c2:	5cd3      	ldrb	r3, [r2, r3]
 80005c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40021000 	.word	0x40021000
 80005d0:	08000aa0 	.word	0x08000aa0

080005d4 <MCAL_RCC_GetPCLK1Freq>:

//APB Low speed clock (PCLK1).
//Bits 10:8 PPRE1[2:0]: APB Low-speed prescaler (APB1)
uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[ ( (RCC->RCC_CFGR >> 8 ) & 0b111) ]  ); //the first shift is multiplication
 80005d8:	f7ff ffe8 	bl	80005ac <MCAL_RCC_GetHCLKFreq>
 80005dc:	4601      	mov	r1, r0
 80005de:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <MCAL_RCC_GetPCLK1Freq+0x20>)
 80005e0:	685b      	ldr	r3, [r3, #4]
 80005e2:	0a1b      	lsrs	r3, r3, #8
 80005e4:	f003 0307 	and.w	r3, r3, #7
 80005e8:	4a03      	ldr	r2, [pc, #12]	; (80005f8 <MCAL_RCC_GetPCLK1Freq+0x24>)
 80005ea:	5cd3      	ldrb	r3, [r2, r3]
 80005ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40021000 	.word	0x40021000
 80005f8:	08000a98 	.word	0x08000a98

080005fc <MCAL_RCC_GetPCLK2Freq>:

uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[ ( (RCC->RCC_CFGR >> 11 ) & 0b111) ]  ); //the first shift is multiplication
 8000600:	f7ff ffd4 	bl	80005ac <MCAL_RCC_GetHCLKFreq>
 8000604:	4601      	mov	r1, r0
 8000606:	4b05      	ldr	r3, [pc, #20]	; (800061c <MCAL_RCC_GetPCLK2Freq+0x20>)
 8000608:	685b      	ldr	r3, [r3, #4]
 800060a:	0adb      	lsrs	r3, r3, #11
 800060c:	f003 0307 	and.w	r3, r3, #7
 8000610:	4a03      	ldr	r2, [pc, #12]	; (8000620 <MCAL_RCC_GetPCLK2Freq+0x24>)
 8000612:	5cd3      	ldrb	r3, [r2, r3]
 8000614:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000618:	4618      	mov	r0, r3
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40021000 	.word	0x40021000
 8000620:	08000a98 	.word	0x08000a98

08000624 <MCAL_UART_Init>:
 * @param [in] 		- UART_Config: All UART Configuration EXTI_PinConfig_t
 * @retval 			-none
 * Note				-Support for Now Asynch mode & Clock 8 MHZ S
 */
void MCAL_UART_Init (USART_TypeDef *USARTx, UART_Config* UART_Config)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
	Global_UART_Config = UART_Config ;
 800062e:	4a57      	ldr	r2, [pc, #348]	; (800078c <MCAL_UART_Init+0x168>)
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	6013      	str	r3, [r2, #0]
	uint32_t pclk ,BRR  ;
	//	enable the Clock for given USART peripheral

	if ( USARTx == USART1 )
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a56      	ldr	r2, [pc, #344]	; (8000790 <MCAL_UART_Init+0x16c>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d106      	bne.n	800064a <MCAL_UART_Init+0x26>
		RCC_USART1_CLK_EN();
 800063c:	4b55      	ldr	r3, [pc, #340]	; (8000794 <MCAL_UART_Init+0x170>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	4a54      	ldr	r2, [pc, #336]	; (8000794 <MCAL_UART_Init+0x170>)
 8000642:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000646:	6193      	str	r3, [r2, #24]
 8000648:	e014      	b.n	8000674 <MCAL_UART_Init+0x50>

	else if ( USARTx == USART2 )
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4a52      	ldr	r2, [pc, #328]	; (8000798 <MCAL_UART_Init+0x174>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d106      	bne.n	8000660 <MCAL_UART_Init+0x3c>
		RCC_USART2_CLK_EN();
 8000652:	4b50      	ldr	r3, [pc, #320]	; (8000794 <MCAL_UART_Init+0x170>)
 8000654:	69db      	ldr	r3, [r3, #28]
 8000656:	4a4f      	ldr	r2, [pc, #316]	; (8000794 <MCAL_UART_Init+0x170>)
 8000658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800065c:	61d3      	str	r3, [r2, #28]
 800065e:	e009      	b.n	8000674 <MCAL_UART_Init+0x50>

	else if ( USARTx == USART3 )
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	4a4e      	ldr	r2, [pc, #312]	; (800079c <MCAL_UART_Init+0x178>)
 8000664:	4293      	cmp	r3, r2
 8000666:	d105      	bne.n	8000674 <MCAL_UART_Init+0x50>
		RCC_USART3_CLK_EN();
 8000668:	4b4a      	ldr	r3, [pc, #296]	; (8000794 <MCAL_UART_Init+0x170>)
 800066a:	69db      	ldr	r3, [r3, #28]
 800066c:	4a49      	ldr	r2, [pc, #292]	; (8000794 <MCAL_UART_Init+0x170>)
 800066e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000672:	61d3      	str	r3, [r2, #28]


	//Enable USART Module
	//	USART_CR1  Bit 13 UE: USART enable
	USARTx->CR1 |= 1<<13 ;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	68db      	ldr	r3, [r3, #12]
 8000678:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	60da      	str	r2, [r3, #12]

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	//	USART_CR1 Bit 3 TE: Transmitter enable & Bit 2 RE: Receiver enable
	USARTx->CR1 |= UART_Config->USART_Mode ;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	68db      	ldr	r3, [r3, #12]
 8000684:	683a      	ldr	r2, [r7, #0]
 8000686:	7812      	ldrb	r2, [r2, #0]
 8000688:	431a      	orrs	r2, r3
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	60da      	str	r2, [r3, #12]

	//PAYLOAD Width
	// USARTx->CR1  Bit 12 M: Word length
	USARTx->CR1 |= UART_Config->Payload_Length ;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	68db      	ldr	r3, [r3, #12]
 8000692:	683a      	ldr	r2, [r7, #0]
 8000694:	7a12      	ldrb	r2, [r2, #8]
 8000696:	431a      	orrs	r2, r3
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	60da      	str	r2, [r3, #12]

	//Configuration of parity control bit fields
	// USARTx->CR1 	Bit 10 PCE: Parity control enable     Bit 9 PS: Parity selection
	USARTx->CR1 |= UART_Config->Parity ;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	68db      	ldr	r3, [r3, #12]
 80006a0:	683a      	ldr	r2, [r7, #0]
 80006a2:	7a52      	ldrb	r2, [r2, #9]
 80006a4:	431a      	orrs	r2, r3
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	60da      	str	r2, [r3, #12]

	//configure the number of stop bits
	//USART_CR2  Bits 13:12 STOP: STOP bits
	USARTx->CR2 |= UART_Config->StopBits ;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	691b      	ldr	r3, [r3, #16]
 80006ae:	683a      	ldr	r2, [r7, #0]
 80006b0:	7a92      	ldrb	r2, [r2, #10]
 80006b2:	431a      	orrs	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	611a      	str	r2, [r3, #16]


	//USART hardware flow control
	//USART_CR3  Bit 9 CTSE: CTS enable   Bit 8 RTSE: RTS enable
	USARTx->CR3 |= UART_Config->HwFlowCtl ;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	695b      	ldr	r3, [r3, #20]
 80006bc:	683a      	ldr	r2, [r7, #0]
 80006be:	7ad2      	ldrb	r2, [r2, #11]
 80006c0:	431a      	orrs	r2, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	615a      	str	r2, [r3, #20]


	//Configuration of BRR(Baudrate register)
	//PCLK1 for USART2, 3
	//PCLK2 for USART1
	if ( USARTx == USART1 )
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4a31      	ldr	r2, [pc, #196]	; (8000790 <MCAL_UART_Init+0x16c>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d103      	bne.n	80006d6 <MCAL_UART_Init+0xb2>
	{
		pclk = MCAL_RCC_GetPCLK2Freq();
 80006ce:	f7ff ff95 	bl	80005fc <MCAL_RCC_GetPCLK2Freq>
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	e002      	b.n	80006dc <MCAL_UART_Init+0xb8>
	}
	else //USART 2 or 3
	{
		pclk = MCAL_RCC_GetPCLK1Freq();
 80006d6:	f7ff ff7d 	bl	80005d4 <MCAL_RCC_GetPCLK1Freq>
 80006da:	60f8      	str	r0, [r7, #12]
	}

	BRR = UART_BRR_Register(pclk, UART_Config->BaudRate) ;
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	011b      	lsls	r3, r3, #4
 80006e2:	68fa      	ldr	r2, [r7, #12]
 80006e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80006e8:	0119      	lsls	r1, r3, #4
 80006ea:	68fa      	ldr	r2, [r7, #12]
 80006ec:	4613      	mov	r3, r2
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	4413      	add	r3, r2
 80006f2:	009a      	lsls	r2, r3, #2
 80006f4:	441a      	add	r2, r3
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	685b      	ldr	r3, [r3, #4]
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	685b      	ldr	r3, [r3, #4]
 8000704:	011b      	lsls	r3, r3, #4
 8000706:	68f8      	ldr	r0, [r7, #12]
 8000708:	fbb0 f3f3 	udiv	r3, r0, r3
 800070c:	2064      	movs	r0, #100	; 0x64
 800070e:	fb00 f303 	mul.w	r3, r0, r3
 8000712:	1ad3      	subs	r3, r2, r3
 8000714:	011b      	lsls	r3, r3, #4
 8000716:	4a22      	ldr	r2, [pc, #136]	; (80007a0 <MCAL_UART_Init+0x17c>)
 8000718:	fba2 2303 	umull	r2, r3, r2, r3
 800071c:	095b      	lsrs	r3, r3, #5
 800071e:	f003 030f 	and.w	r3, r3, #15
 8000722:	430b      	orrs	r3, r1
 8000724:	60bb      	str	r3, [r7, #8]

	USARTx->BRR = BRR ;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	68ba      	ldr	r2, [r7, #8]
 800072a:	609a      	str	r2, [r3, #8]


	//ENABLE / DISABLE Interrupt
	//USART_CR1
	if (UART_Config->IRQ_Enable  != UART_IRQ_Enable_NONE)
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	7b1b      	ldrb	r3, [r3, #12]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d026      	beq.n	8000782 <MCAL_UART_Init+0x15e>
	{
		USARTx->CR1 |= (UART_Config->IRQ_Enable) ;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	68db      	ldr	r3, [r3, #12]
 8000738:	683a      	ldr	r2, [r7, #0]
 800073a:	7b12      	ldrb	r2, [r2, #12]
 800073c:	431a      	orrs	r2, r3
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	60da      	str	r2, [r3, #12]
		//		Enable NVIC For USARTx IRQ
		if ( USARTx == USART1 )
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	4a12      	ldr	r2, [pc, #72]	; (8000790 <MCAL_UART_Init+0x16c>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d106      	bne.n	8000758 <MCAL_UART_Init+0x134>
			NVIC_IRQ37_USART1_Enable ;
 800074a:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <MCAL_UART_Init+0x180>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a15      	ldr	r2, [pc, #84]	; (80007a4 <MCAL_UART_Init+0x180>)
 8000750:	f043 0320 	orr.w	r3, r3, #32
 8000754:	6013      	str	r3, [r2, #0]

		else if ( USARTx == USART3 )
			NVIC_IRQ39_USART3_Enable ;
	}

}
 8000756:	e014      	b.n	8000782 <MCAL_UART_Init+0x15e>
		else if ( USARTx == USART2 )
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	4a0f      	ldr	r2, [pc, #60]	; (8000798 <MCAL_UART_Init+0x174>)
 800075c:	4293      	cmp	r3, r2
 800075e:	d106      	bne.n	800076e <MCAL_UART_Init+0x14a>
			NVIC_IRQ38_USART2_Enable ;
 8000760:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <MCAL_UART_Init+0x180>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a0f      	ldr	r2, [pc, #60]	; (80007a4 <MCAL_UART_Init+0x180>)
 8000766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800076a:	6013      	str	r3, [r2, #0]
}
 800076c:	e009      	b.n	8000782 <MCAL_UART_Init+0x15e>
		else if ( USARTx == USART3 )
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4a0a      	ldr	r2, [pc, #40]	; (800079c <MCAL_UART_Init+0x178>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d105      	bne.n	8000782 <MCAL_UART_Init+0x15e>
			NVIC_IRQ39_USART3_Enable ;
 8000776:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <MCAL_UART_Init+0x180>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a0a      	ldr	r2, [pc, #40]	; (80007a4 <MCAL_UART_Init+0x180>)
 800077c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000780:	6013      	str	r3, [r2, #0]
}
 8000782:	bf00      	nop
 8000784:	3710      	adds	r7, #16
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	2000001c 	.word	0x2000001c
 8000790:	40013800 	.word	0x40013800
 8000794:	40021000 	.word	0x40021000
 8000798:	40004400 	.word	0x40004400
 800079c:	40004800 	.word	0x40004800
 80007a0:	51eb851f 	.word	0x51eb851f
 80007a4:	e000e104 	.word	0xe000e104

080007a8 <MCAL_UART_SendData>:
			//			bit

 */

void MCAL_UART_SendData	(USART_TypeDef *USARTx, uint16_t *pTxBuffer,enum Polling_mechism PollingEn )
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	60f8      	str	r0, [r7, #12]
 80007b0:	60b9      	str	r1, [r7, #8]
 80007b2:	4613      	mov	r3, r2
 80007b4:	71fb      	strb	r3, [r7, #7]
	uint16_t *pdata;

	// wait until TXE flag is set in the SR
	if (PollingEn == enable)
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d106      	bne.n	80007ca <MCAL_UART_SendData+0x22>
		while(! (USARTx->SR & 1<<7 ) );
 80007bc:	bf00      	nop
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d0f9      	beq.n	80007be <MCAL_UART_SendData+0x16>
		USARTx->DR = (*pTxBuffer & (uint16_t)0x01FF);

	}else
	{
		//This is 8bit data transfer
		USARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	881b      	ldrh	r3, [r3, #0]
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	605a      	str	r2, [r3, #4]
	}




}
 80007d4:	bf00      	nop
 80007d6:	3714      	adds	r7, #20
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr
	...

080007e0 <MCAL_UART_ReceiveData>:
}



void MCAL_UART_ReceiveData	(USART_TypeDef *USARTx, uint16_t *pRxBuffer ,enum Polling_mechism PollingEn )
{
 80007e0:	b480      	push	{r7}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	60f8      	str	r0, [r7, #12]
 80007e8:	60b9      	str	r1, [r7, #8]
 80007ea:	4613      	mov	r3, r2
 80007ec:	71fb      	strb	r3, [r7, #7]
	//Loop over until "Len" number of bytes are transferred
	//wait until RXNE flag is set in the SR
	if (PollingEn == enable)
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d106      	bne.n	8000802 <MCAL_UART_ReceiveData+0x22>
	{
		while( ! (USARTx->SR & 1<<5 ));
 80007f4:	bf00      	nop
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f003 0320 	and.w	r3, r3, #32
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d0f9      	beq.n	80007f6 <MCAL_UART_ReceiveData+0x16>
			*((uint16_t*) pRxBuffer) = ( USARTx->DR  & (uint8_t)0xFF );
		}
	}else
	{
		//This is 8bit data
		if (Global_UART_Config->Parity ==UART_Parity__NONE)
 8000802:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <MCAL_UART_ReceiveData+0x58>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	7a5b      	ldrb	r3, [r3, #9]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d107      	bne.n	800081c <MCAL_UART_ReceiveData+0x3c>
		{
			//no parity So all 8bit are considered data
			*((uint16_t*) pRxBuffer) = ( USARTx->DR  & (uint8_t)0xFF ) ;
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	b29b      	uxth	r3, r3
 8000812:	b2db      	uxtb	r3, r3
 8000814:	b29a      	uxth	r2, r3
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	801a      	strh	r2, [r3, #0]
		{
			//Parity is used, so,7 bits will be of user data and 1 bit is parity
			*((uint16_t*) pRxBuffer) = ( USARTx->DR  & (uint8_t)0X7F );
		}
	}
}
 800081a:	e007      	b.n	800082c <MCAL_UART_ReceiveData+0x4c>
			*((uint16_t*) pRxBuffer) = ( USARTx->DR  & (uint8_t)0X7F );
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	b29b      	uxth	r3, r3
 8000822:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000826:	b29a      	uxth	r2, r3
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	801a      	strh	r2, [r3, #0]
}
 800082c:	bf00      	nop
 800082e:	3714      	adds	r7, #20
 8000830:	46bd      	mov	sp, r7
 8000832:	bc80      	pop	{r7}
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	2000001c 	.word	0x2000001c

0800083c <MCAL_UART_GPIO_Set_Pins>:
 * @param [in] 		- USARTx: where x can be (1..3 depending on device used)
 * @retval 			-none
 * Note				-Should enable the corresponding ALT  & GPIO  in RCC clock Also called after MCAL_UART_Init()
 */
void MCAL_UART_GPIO_Set_Pins (USART_TypeDef *USARTx)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
	GPIO_PINConfig_t PinCfg ;

	if ( USARTx == USART1 )
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	4a2b      	ldr	r2, [pc, #172]	; (80008f4 <MCAL_UART_GPIO_Set_Pins+0xb8>)
 8000848:	4293      	cmp	r3, r2
 800084a:	d118      	bne.n	800087e <MCAL_UART_GPIO_Set_Pins+0x42>
		//PA10 RX
		//PA11 CTS
		//PA12 RTS

		//PA9 TX
		PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 800084c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000850:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000852:	2306      	movs	r3, #6
 8000854:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_50M;
 8000856:	2303      	movs	r3, #3
 8000858:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 800085a:	f107 030c 	add.w	r3, r7, #12
 800085e:	4619      	mov	r1, r3
 8000860:	4825      	ldr	r0, [pc, #148]	; (80008f8 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000862:	f7ff fdf8 	bl	8000456 <MCAL_GPIO_Init>

		//PA10 RX
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8000866:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800086a:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 800086c:	2308      	movs	r3, #8
 800086e:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000870:	f107 030c 	add.w	r3, r7, #12
 8000874:	4619      	mov	r1, r3
 8000876:	4820      	ldr	r0, [pc, #128]	; (80008f8 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000878:	f7ff fded 	bl	8000456 <MCAL_GPIO_Init>
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
			MCAL_GPIO_Init(GPIOB, &PinCfg);

		}
	}
}
 800087c:	e036      	b.n	80008ec <MCAL_UART_GPIO_Set_Pins+0xb0>
	else if ( USARTx == USART2 )
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4a1e      	ldr	r2, [pc, #120]	; (80008fc <MCAL_UART_GPIO_Set_Pins+0xc0>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d116      	bne.n	80008b4 <MCAL_UART_GPIO_Set_Pins+0x78>
		PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8000886:	2304      	movs	r3, #4
 8000888:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 800088a:	2306      	movs	r3, #6
 800088c:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800088e:	2301      	movs	r3, #1
 8000890:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000892:	f107 030c 	add.w	r3, r7, #12
 8000896:	4619      	mov	r1, r3
 8000898:	4817      	ldr	r0, [pc, #92]	; (80008f8 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 800089a:	f7ff fddc 	bl	8000456 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 800089e:	2308      	movs	r3, #8
 80008a0:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 80008a2:	2308      	movs	r3, #8
 80008a4:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 80008a6:	f107 030c 	add.w	r3, r7, #12
 80008aa:	4619      	mov	r1, r3
 80008ac:	4812      	ldr	r0, [pc, #72]	; (80008f8 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 80008ae:	f7ff fdd2 	bl	8000456 <MCAL_GPIO_Init>
}
 80008b2:	e01b      	b.n	80008ec <MCAL_UART_GPIO_Set_Pins+0xb0>
	else if ( USARTx == USART3 )
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4a12      	ldr	r2, [pc, #72]	; (8000900 <MCAL_UART_GPIO_Set_Pins+0xc4>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d117      	bne.n	80008ec <MCAL_UART_GPIO_Set_Pins+0xb0>
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 80008bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008c0:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80008c2:	2306      	movs	r3, #6
 80008c4:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80008c6:	2301      	movs	r3, #1
 80008c8:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	4619      	mov	r1, r3
 80008d0:	480c      	ldr	r0, [pc, #48]	; (8000904 <MCAL_UART_GPIO_Set_Pins+0xc8>)
 80008d2:	f7ff fdc0 	bl	8000456 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 80008d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80008da:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 80008dc:	2308      	movs	r3, #8
 80008de:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 80008e0:	f107 030c 	add.w	r3, r7, #12
 80008e4:	4619      	mov	r1, r3
 80008e6:	4807      	ldr	r0, [pc, #28]	; (8000904 <MCAL_UART_GPIO_Set_Pins+0xc8>)
 80008e8:	f7ff fdb5 	bl	8000456 <MCAL_GPIO_Init>
}
 80008ec:	bf00      	nop
 80008ee:	3710      	adds	r7, #16
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40013800 	.word	0x40013800
 80008f8:	40010800 	.word	0x40010800
 80008fc:	40004400 	.word	0x40004400
 8000900:	40004800 	.word	0x40004800
 8000904:	40010c00 	.word	0x40010c00

08000908 <USART1_IRQHandler>:


//ISR
void USART1_IRQHandler (void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0

	Global_UART_Config->P_IRQ_CallBack () ;
 800090c:	4b02      	ldr	r3, [pc, #8]	; (8000918 <USART1_IRQHandler+0x10>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	691b      	ldr	r3, [r3, #16]
 8000912:	4798      	blx	r3

}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	2000001c 	.word	0x2000001c

0800091c <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack () ;
 8000920:	4b02      	ldr	r3, [pc, #8]	; (800092c <USART2_IRQHandler+0x10>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	691b      	ldr	r3, [r3, #16]
 8000926:	4798      	blx	r3

}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	2000001c 	.word	0x2000001c

08000930 <USART3_IRQHandler>:
void USART3_IRQHandler (void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack () ;
 8000934:	4b02      	ldr	r3, [pc, #8]	; (8000940 <USART3_IRQHandler+0x10>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	691b      	ldr	r3, [r3, #16]
 800093a:	4798      	blx	r3


}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	2000001c 	.word	0x2000001c

08000944 <clock_init>:
#include "lcd.h"
#include "keypad.h"
#include "seven_seg.h"


void clock_init(){
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0

	RCC_GPIOA_CLK_EN();
 8000948:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <clock_init+0x30>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	4a09      	ldr	r2, [pc, #36]	; (8000974 <clock_init+0x30>)
 800094e:	f043 0304 	orr.w	r3, r3, #4
 8000952:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000954:	4b07      	ldr	r3, [pc, #28]	; (8000974 <clock_init+0x30>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	4a06      	ldr	r2, [pc, #24]	; (8000974 <clock_init+0x30>)
 800095a:	f043 0308 	orr.w	r3, r3, #8
 800095e:	6193      	str	r3, [r2, #24]
	//To enable EXTI
	RCC_AFIO_CLK_EN();
 8000960:	4b04      	ldr	r3, [pc, #16]	; (8000974 <clock_init+0x30>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	4a03      	ldr	r2, [pc, #12]	; (8000974 <clock_init+0x30>)
 8000966:	f043 0301 	orr.w	r3, r3, #1
 800096a:	6193      	str	r3, [r2, #24]
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr
 8000974:	40021000 	.word	0x40021000

08000978 <UART_IRQ_Callback>:

unsigned char ch;

void UART_IRQ_Callback (void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0

	MCAL_UART_ReceiveData(USART1, &ch, disable);
 800097c:	2201      	movs	r2, #1
 800097e:	4905      	ldr	r1, [pc, #20]	; (8000994 <UART_IRQ_Callback+0x1c>)
 8000980:	4805      	ldr	r0, [pc, #20]	; (8000998 <UART_IRQ_Callback+0x20>)
 8000982:	f7ff ff2d 	bl	80007e0 <MCAL_UART_ReceiveData>
	MCAL_UART_SendData(USART1, &ch, enable);
 8000986:	2200      	movs	r2, #0
 8000988:	4902      	ldr	r1, [pc, #8]	; (8000994 <UART_IRQ_Callback+0x1c>)
 800098a:	4803      	ldr	r0, [pc, #12]	; (8000998 <UART_IRQ_Callback+0x20>)
 800098c:	f7ff ff0c 	bl	80007a8 <MCAL_UART_SendData>

}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}
 8000994:	2000005c 	.word	0x2000005c
 8000998:	40013800 	.word	0x40013800

0800099c <main>:


int main()
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0

	UART_Config uartCFG;

	clock_init();
 80009a2:	f7ff ffcf 	bl	8000944 <clock_init>

	uartCFG.BaudRate = UART_BaudRate_115200;
 80009a6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80009aa:	60bb      	str	r3, [r7, #8]
	uartCFG.HwFlowCtl = UART_HwFlowCtl_NONE;
 80009ac:	2300      	movs	r3, #0
 80009ae:	73fb      	strb	r3, [r7, #15]
	uartCFG.Parity = UART_Parity__NONE;
 80009b0:	2300      	movs	r3, #0
 80009b2:	737b      	strb	r3, [r7, #13]
	uartCFG.Payload_Length = UART_Payload_Length_8B;
 80009b4:	2300      	movs	r3, #0
 80009b6:	733b      	strb	r3, [r7, #12]
	uartCFG.StopBits = UART_StopBits__1;
 80009b8:	2300      	movs	r3, #0
 80009ba:	73bb      	strb	r3, [r7, #14]
	uartCFG.USART_Mode = UART_MODE_TX_RX;
 80009bc:	230c      	movs	r3, #12
 80009be:	713b      	strb	r3, [r7, #4]
//polling mechanism
	uartCFG.IRQ_Enable = UART_IRQ_Enable_RXNEIE;
 80009c0:	2320      	movs	r3, #32
 80009c2:	743b      	strb	r3, [r7, #16]
	uartCFG.P_IRQ_CallBack = UART_IRQ_Callback ;   // address of function without brackets!!!!!!
 80009c4:	4b05      	ldr	r3, [pc, #20]	; (80009dc <main+0x40>)
 80009c6:	617b      	str	r3, [r7, #20]

	MCAL_UART_Init(USART1,&uartCFG);
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	4619      	mov	r1, r3
 80009cc:	4804      	ldr	r0, [pc, #16]	; (80009e0 <main+0x44>)
 80009ce:	f7ff fe29 	bl	8000624 <MCAL_UART_Init>
	MCAL_UART_GPIO_Set_Pins(USART1);
 80009d2:	4803      	ldr	r0, [pc, #12]	; (80009e0 <main+0x44>)
 80009d4:	f7ff ff32 	bl	800083c <MCAL_UART_GPIO_Set_Pins>

	while(1){
 80009d8:	e7fe      	b.n	80009d8 <main+0x3c>
 80009da:	bf00      	nop
 80009dc:	08000979 	.word	0x08000979
 80009e0:	40013800 	.word	0x40013800

080009e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009e4:	480d      	ldr	r0, [pc, #52]	; (8000a1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009e6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009e8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009ec:	480c      	ldr	r0, [pc, #48]	; (8000a20 <LoopForever+0x6>)
  ldr r1, =_edata
 80009ee:	490d      	ldr	r1, [pc, #52]	; (8000a24 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009f0:	4a0d      	ldr	r2, [pc, #52]	; (8000a28 <LoopForever+0xe>)
  movs r3, #0
 80009f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f4:	e002      	b.n	80009fc <LoopCopyDataInit>

080009f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009fa:	3304      	adds	r3, #4

080009fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a00:	d3f9      	bcc.n	80009f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a02:	4a0a      	ldr	r2, [pc, #40]	; (8000a2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a04:	4c0a      	ldr	r4, [pc, #40]	; (8000a30 <LoopForever+0x16>)
  movs r3, #0
 8000a06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a08:	e001      	b.n	8000a0e <LoopFillZerobss>

08000a0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a0c:	3204      	adds	r2, #4

08000a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a10:	d3fb      	bcc.n	8000a0a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a12:	f000 f811 	bl	8000a38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a16:	f7ff ffc1 	bl	800099c <main>

08000a1a <LoopForever>:

LoopForever:
    b LoopForever
 8000a1a:	e7fe      	b.n	8000a1a <LoopForever>
  ldr   r0, =_estack
 8000a1c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a24:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000a28:	08000ab8 	.word	0x08000ab8
  ldr r2, =_sbss
 8000a2c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000a30:	20000060 	.word	0x20000060

08000a34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a34:	e7fe      	b.n	8000a34 <ADC1_2_IRQHandler>
	...

08000a38 <__libc_init_array>:
 8000a38:	b570      	push	{r4, r5, r6, lr}
 8000a3a:	2500      	movs	r5, #0
 8000a3c:	4e0c      	ldr	r6, [pc, #48]	; (8000a70 <__libc_init_array+0x38>)
 8000a3e:	4c0d      	ldr	r4, [pc, #52]	; (8000a74 <__libc_init_array+0x3c>)
 8000a40:	1ba4      	subs	r4, r4, r6
 8000a42:	10a4      	asrs	r4, r4, #2
 8000a44:	42a5      	cmp	r5, r4
 8000a46:	d109      	bne.n	8000a5c <__libc_init_array+0x24>
 8000a48:	f000 f81a 	bl	8000a80 <_init>
 8000a4c:	2500      	movs	r5, #0
 8000a4e:	4e0a      	ldr	r6, [pc, #40]	; (8000a78 <__libc_init_array+0x40>)
 8000a50:	4c0a      	ldr	r4, [pc, #40]	; (8000a7c <__libc_init_array+0x44>)
 8000a52:	1ba4      	subs	r4, r4, r6
 8000a54:	10a4      	asrs	r4, r4, #2
 8000a56:	42a5      	cmp	r5, r4
 8000a58:	d105      	bne.n	8000a66 <__libc_init_array+0x2e>
 8000a5a:	bd70      	pop	{r4, r5, r6, pc}
 8000a5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a60:	4798      	blx	r3
 8000a62:	3501      	adds	r5, #1
 8000a64:	e7ee      	b.n	8000a44 <__libc_init_array+0xc>
 8000a66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a6a:	4798      	blx	r3
 8000a6c:	3501      	adds	r5, #1
 8000a6e:	e7f2      	b.n	8000a56 <__libc_init_array+0x1e>
 8000a70:	08000ab0 	.word	0x08000ab0
 8000a74:	08000ab0 	.word	0x08000ab0
 8000a78:	08000ab0 	.word	0x08000ab0
 8000a7c:	08000ab4 	.word	0x08000ab4

08000a80 <_init>:
 8000a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a82:	bf00      	nop
 8000a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a86:	bc08      	pop	{r3}
 8000a88:	469e      	mov	lr, r3
 8000a8a:	4770      	bx	lr

08000a8c <_fini>:
 8000a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a8e:	bf00      	nop
 8000a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a92:	bc08      	pop	{r3}
 8000a94:	469e      	mov	lr, r3
 8000a96:	4770      	bx	lr
