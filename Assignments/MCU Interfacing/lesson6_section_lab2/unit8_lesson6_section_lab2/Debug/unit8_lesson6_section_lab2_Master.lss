
unit8_lesson6_section_lab2_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000166  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000091c  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ba  00000000  00000000  00000bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000660  00000000  00000000  0000128e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e8  00000000  00000000  000018f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000442  00000000  00000000  000019d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000031f  00000000  00000000  00001e1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002139  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 74 00 	call	0xe8	; 0xe8 <main>
  64:	0c 94 b1 00 	jmp	0x162	; 0x162 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <I2C_Master_init>:
s8 I2C_Master_Read_Nack()						 /* I2C master read with Nack send */
{
	TWCR=(1<<TWEN)|(1<<TWINT);					/* Enable TWI and clear interrupt flag */
	while(!(TWCR&(1<<TWINT)));					/* Wait until TWI finish its current job */
	return TWDR;								/* Return received data */
}
  6c:	9b 01       	movw	r18, r22
  6e:	ac 01       	movw	r20, r24
  70:	60 e0       	ldi	r22, 0x00	; 0
  72:	72 e1       	ldi	r23, 0x12	; 18
  74:	8a e7       	ldi	r24, 0x7A	; 122
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	0e 94 8f 00 	call	0x11e	; 0x11e <__udivmodsi4>
  7c:	da 01       	movw	r26, r20
  7e:	c9 01       	movw	r24, r18
  80:	40 97       	sbiw	r24, 0x10	; 16
  82:	a1 09       	sbc	r26, r1
  84:	b1 09       	sbc	r27, r1
  86:	b6 95       	lsr	r27
  88:	a7 95       	ror	r26
  8a:	97 95       	ror	r25
  8c:	87 95       	ror	r24
  8e:	80 b9       	out	0x00, r24	; 0
  90:	11 b8       	out	0x01, r1	; 1
  92:	08 95       	ret

00000094 <I2C_Start>:
  94:	94 ea       	ldi	r25, 0xA4	; 164
  96:	96 bf       	out	0x36, r25	; 54
  98:	06 b6       	in	r0, 0x36	; 54
  9a:	07 fe       	sbrs	r0, 7
  9c:	fd cf       	rjmp	.-6      	; 0x98 <I2C_Start+0x4>
  9e:	91 b1       	in	r25, 0x01	; 1
  a0:	98 7f       	andi	r25, 0xF8	; 248
  a2:	98 30       	cpi	r25, 0x08	; 8
  a4:	71 f4       	brne	.+28     	; 0xc2 <I2C_Start+0x2e>
  a6:	83 b9       	out	0x03, r24	; 3
  a8:	84 e8       	ldi	r24, 0x84	; 132
  aa:	86 bf       	out	0x36, r24	; 54
  ac:	06 b6       	in	r0, 0x36	; 54
  ae:	07 fe       	sbrs	r0, 7
  b0:	fd cf       	rjmp	.-6      	; 0xac <I2C_Start+0x18>
  b2:	81 b1       	in	r24, 0x01	; 1
  b4:	88 7f       	andi	r24, 0xF8	; 248
  b6:	88 31       	cpi	r24, 0x18	; 24
  b8:	31 f0       	breq	.+12     	; 0xc6 <I2C_Start+0x32>
  ba:	80 32       	cpi	r24, 0x20	; 32
  bc:	31 f4       	brne	.+12     	; 0xca <I2C_Start+0x36>
  be:	82 e0       	ldi	r24, 0x02	; 2
  c0:	08 95       	ret
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	08 95       	ret
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	08 95       	ret
  ca:	83 e0       	ldi	r24, 0x03	; 3
  cc:	08 95       	ret

000000ce <I2C_Master_Read_Ack>:
  ce:	84 ec       	ldi	r24, 0xC4	; 196
  d0:	86 bf       	out	0x36, r24	; 54
  d2:	06 b6       	in	r0, 0x36	; 54
  d4:	07 fe       	sbrs	r0, 7
  d6:	fd cf       	rjmp	.-6      	; 0xd2 <I2C_Master_Read_Ack+0x4>
  d8:	83 b1       	in	r24, 0x03	; 3
  da:	08 95       	ret

000000dc <I2C_Stop>:


void I2C_Stop(void){
	TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);		/* Enable TWI, generate stop */
  dc:	84 e9       	ldi	r24, 0x94	; 148
  de:	86 bf       	out	0x36, r24	; 54
	while(TWCR&(1<<TWSTO));						/* Wait until stop condition execution */
  e0:	06 b6       	in	r0, 0x36	; 54
  e2:	04 fc       	sbrc	r0, 4
  e4:	fd cf       	rjmp	.-6      	; 0xe0 <I2C_Stop+0x4>
}
  e6:	08 95       	ret

000000e8 <main>:
#include <avr/io.h>
#include "i2c.h"

int main(void)
{	u8 ch;
	DDRA = 0xFF;						//make port A direction as O/P
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	8a bb       	out	0x1a, r24	; 26
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	2f ef       	ldi	r18, 0xFF	; 255
  ee:	84 e3       	ldi	r24, 0x34	; 52
  f0:	9c e0       	ldi	r25, 0x0C	; 12
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0xa>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x14>
  fc:	00 00       	nop
	
	while (1)
	{	_delay_ms(500);
		I2C_Master_init(0x48);
  fe:	68 e4       	ldi	r22, 0x48	; 72
 100:	70 e0       	ldi	r23, 0x00	; 0
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 36 00 	call	0x6c	; 0x6c <I2C_Master_init>
		I2C_Start(0b11010000+1)	;			//SLA+R(1)
 10a:	81 ed       	ldi	r24, 0xD1	; 209
 10c:	0e 94 4a 00 	call	0x94	; 0x94 <I2C_Start>
		ch= I2C_Master_Read_Ack();		//read from slave and send ack
 110:	0e 94 67 00 	call	0xce	; 0xce <I2C_Master_Read_Ack>
 114:	c8 2f       	mov	r28, r24
		I2C_Stop();
 116:	0e 94 6e 00 	call	0xdc	; 0xdc <I2C_Stop>
		PORTA =ch;
 11a:	cb bb       	out	0x1b, r28	; 27
 11c:	e7 cf       	rjmp	.-50     	; 0xec <main+0x4>

0000011e <__udivmodsi4>:
 11e:	a1 e2       	ldi	r26, 0x21	; 33
 120:	1a 2e       	mov	r1, r26
 122:	aa 1b       	sub	r26, r26
 124:	bb 1b       	sub	r27, r27
 126:	fd 01       	movw	r30, r26
 128:	0d c0       	rjmp	.+26     	; 0x144 <__udivmodsi4_ep>

0000012a <__udivmodsi4_loop>:
 12a:	aa 1f       	adc	r26, r26
 12c:	bb 1f       	adc	r27, r27
 12e:	ee 1f       	adc	r30, r30
 130:	ff 1f       	adc	r31, r31
 132:	a2 17       	cp	r26, r18
 134:	b3 07       	cpc	r27, r19
 136:	e4 07       	cpc	r30, r20
 138:	f5 07       	cpc	r31, r21
 13a:	20 f0       	brcs	.+8      	; 0x144 <__udivmodsi4_ep>
 13c:	a2 1b       	sub	r26, r18
 13e:	b3 0b       	sbc	r27, r19
 140:	e4 0b       	sbc	r30, r20
 142:	f5 0b       	sbc	r31, r21

00000144 <__udivmodsi4_ep>:
 144:	66 1f       	adc	r22, r22
 146:	77 1f       	adc	r23, r23
 148:	88 1f       	adc	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	1a 94       	dec	r1
 14e:	69 f7       	brne	.-38     	; 0x12a <__udivmodsi4_loop>
 150:	60 95       	com	r22
 152:	70 95       	com	r23
 154:	80 95       	com	r24
 156:	90 95       	com	r25
 158:	9b 01       	movw	r18, r22
 15a:	ac 01       	movw	r20, r24
 15c:	bd 01       	movw	r22, r26
 15e:	cf 01       	movw	r24, r30
 160:	08 95       	ret

00000162 <_exit>:
 162:	f8 94       	cli

00000164 <__stop_program>:
 164:	ff cf       	rjmp	.-2      	; 0x164 <__stop_program>
