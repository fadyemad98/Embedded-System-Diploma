
unit8_lesson4_section_lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000164  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008ed  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000734  00000000  00000000  00000b91  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004f3  00000000  00000000  000012c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000bc  00000000  00000000  000017b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003fb  00000000  00000000  00001874  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000011b  00000000  00000000  00001c6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001d8a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  64:	0c 94 b0 00 	jmp	0x160	; 0x160 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <EIGHT_7SEG_Disp>:
	  
}

void EIGHT_7SEG_Disp(u8 address, u8 data)
{
	PORTB &= ~(1 << SS);
  6c:	98 b3       	in	r25, 0x18	; 24
  6e:	9f 7e       	andi	r25, 0xEF	; 239
  70:	98 bb       	out	0x18, r25	; 24
	SPDR = address;
  72:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1 << SPIF)));
  74:	77 9b       	sbis	0x0e, 7	; 14
  76:	fe cf       	rjmp	.-4      	; 0x74 <EIGHT_7SEG_Disp+0x8>
	SPDR = data;
  78:	6f b9       	out	0x0f, r22	; 15
	while (!(SPSR & (1 << SPIF)));
  7a:	77 9b       	sbis	0x0e, 7	; 14
  7c:	fe cf       	rjmp	.-4      	; 0x7a <EIGHT_7SEG_Disp+0xe>
	PORTB |= (1 << SS);
  7e:	88 b3       	in	r24, 0x18	; 24
  80:	80 61       	ori	r24, 0x10	; 16
  82:	88 bb       	out	0x18, r24	; 24
  84:	08 95       	ret

00000086 <EIGHT_7SEG_init>:
	/*   EIGHT_7SEG_Disp(0x09, 0xFF); //decode all display
	   EIGHT_7SEG_Disp(0x0A, 0x07); //set scan limit 
	   EIGHT_7SEG_Disp(0x0B, 0x0F);	//max intensity
	   EIGHT_7SEG_Disp(0x0C, 0x01);	//turn on display
	   */
	   EIGHT_7SEG_Disp(DisplayTestReg, TestModeOff);  //display test register - test mode off
  86:	60 e0       	ldi	r22, 0x00	; 0
  88:	8f e0       	ldi	r24, 0x0F	; 15
  8a:	0e 94 36 00 	call	0x6c	; 0x6c <EIGHT_7SEG_Disp>
	   EIGHT_7SEG_Disp(shutdown_modeReg, normal_operation); //shutdown register - normal operation
  8e:	61 e0       	ldi	r22, 0x01	; 1
  90:	8c e0       	ldi	r24, 0x0C	; 12
  92:	0e 94 36 00 	call	0x6c	; 0x6c <EIGHT_7SEG_Disp>
	   EIGHT_7SEG_Disp(ScanLimitReg(4)); //scan limit register - display digits 0 thru 7
  96:	63 e0       	ldi	r22, 0x03	; 3
  98:	8b e0       	ldi	r24, 0x0B	; 11
  9a:	0e 94 36 00 	call	0x6c	; 0x6c <EIGHT_7SEG_Disp>
	   EIGHT_7SEG_Disp(IntensityReg, MaxBrightness);  //intensity register - max brightness
  9e:	6f e0       	ldi	r22, 0x0F	; 15
  a0:	8a e0       	ldi	r24, 0x0A	; 10
  a2:	0e 94 36 00 	call	0x6c	; 0x6c <EIGHT_7SEG_Disp>
	   EIGHT_7SEG_Disp(DecodeModeReg, DecodeAll);   //decode mode register - CodeB decode all digits
  a6:	6f ef       	ldi	r22, 0xFF	; 255
  a8:	89 e0       	ldi	r24, 0x09	; 9
  aa:	0e 94 36 00 	call	0x6c	; 0x6c <EIGHT_7SEG_Disp>
  ae:	08 95       	ret

000000b0 <main>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "Eight_7seg.h"

int main(void)
{
  b0:	cf 93       	push	r28
  b2:	df 93       	push	r29
  b4:	cd b7       	in	r28, 0x3d	; 61
  b6:	de b7       	in	r29, 0x3e	; 62
  b8:	28 97       	sbiw	r28, 0x08	; 8
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	f8 94       	cli
  be:	de bf       	out	0x3e, r29	; 62
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	cd bf       	out	0x3d, r28	; 61
   unsigned char counter = 0;
   unsigned char i;
   SPI_Masterinit();
  c4:	0e 94 97 00 	call	0x12e	; 0x12e <SPI_Masterinit>
   EIGHT_7SEG_init();
  c8:	0e 94 43 00 	call	0x86	; 0x86 <EIGHT_7SEG_init>

	while (1){
		char arr[4]={H,E,L,P};
  cc:	8c e0       	ldi	r24, 0x0C	; 12
  ce:	8d 83       	std	Y+5, r24	; 0x05
  d0:	8b e0       	ldi	r24, 0x0B	; 11
  d2:	8e 83       	std	Y+6, r24	; 0x06
  d4:	8d e0       	ldi	r24, 0x0D	; 13
  d6:	8f 83       	std	Y+7, r24	; 0x07
  d8:	8e e0       	ldi	r24, 0x0E	; 14
  da:	88 87       	std	Y+8, r24	; 0x08
		char index[4]={digit_1,digit_2,digit_3,digit_4};
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	89 83       	std	Y+1, r24	; 0x01
  e0:	82 e0       	ldi	r24, 0x02	; 2
  e2:	8a 83       	std	Y+2, r24	; 0x02
  e4:	83 e0       	ldi	r24, 0x03	; 3
  e6:	8b 83       	std	Y+3, r24	; 0x03
  e8:	84 e0       	ldi	r24, 0x04	; 4
  ea:	8c 83       	std	Y+4, r24	; 0x04
	 for (i = 0; i < 5; i++){
  ec:	10 e0       	ldi	r17, 0x00	; 0
  ee:	1c c0       	rjmp	.+56     	; 0x128 <main+0x78>
		 EIGHT_7SEG_Disp(index[i], arr[i]);
  f0:	81 2f       	mov	r24, r17
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	e5 e0       	ldi	r30, 0x05	; 5
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	ec 0f       	add	r30, r28
  fa:	fd 1f       	adc	r31, r29
  fc:	e8 0f       	add	r30, r24
  fe:	f9 1f       	adc	r31, r25
 100:	60 81       	ld	r22, Z
 102:	e1 e0       	ldi	r30, 0x01	; 1
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	ec 0f       	add	r30, r28
 108:	fd 1f       	adc	r31, r29
 10a:	e8 0f       	add	r30, r24
 10c:	f9 1f       	adc	r31, r25
 10e:	80 81       	ld	r24, Z
 110:	0e 94 36 00 	call	0x6c	; 0x6c <EIGHT_7SEG_Disp>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 114:	2f e3       	ldi	r18, 0x3F	; 63
 116:	8d e0       	ldi	r24, 0x0D	; 13
 118:	93 e0       	ldi	r25, 0x03	; 3
 11a:	21 50       	subi	r18, 0x01	; 1
 11c:	80 40       	sbci	r24, 0x00	; 0
 11e:	90 40       	sbci	r25, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <main+0x6a>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0x74>
 124:	00 00       	nop
   EIGHT_7SEG_init();

	while (1){
		char arr[4]={H,E,L,P};
		char index[4]={digit_1,digit_2,digit_3,digit_4};
	 for (i = 0; i < 5; i++){
 126:	1f 5f       	subi	r17, 0xFF	; 255
 128:	15 30       	cpi	r17, 0x05	; 5
 12a:	10 f3       	brcs	.-60     	; 0xf0 <main+0x40>
 12c:	cf cf       	rjmp	.-98     	; 0xcc <main+0x1c>

0000012e <SPI_Masterinit>:
#include "SPI.h"


void SPI_Masterinit(void){
//	set MOSI Pin as O/P	
	DDR_SPI |= (1<<MOSI);
 12e:	87 b3       	in	r24, 0x17	; 23
 130:	80 62       	ori	r24, 0x20	; 32
 132:	87 bb       	out	0x17, r24	; 23
	
//	set MISO Pin as I/P
	DDR_SPI &= ~(1<<MISO);
 134:	87 b3       	in	r24, 0x17	; 23
 136:	8f 7b       	andi	r24, 0xBF	; 191
 138:	87 bb       	out	0x17, r24	; 23
	
//	set SS Pin as O/P
	DDR_SPI |= (1<<SS);
 13a:	87 b3       	in	r24, 0x17	; 23
 13c:	80 61       	ori	r24, 0x10	; 16
 13e:	87 bb       	out	0x17, r24	; 23
	
//	set SCK Pin as O/P
	DDR_SPI |= (1<<SCK);
 140:	87 b3       	in	r24, 0x17	; 23
 142:	80 68       	ori	r24, 0x80	; 128
 144:	87 bb       	out	0x17, r24	; 23

//	set SCK frequency fosc/16
	SPCR |= (1<<SPR0);
 146:	8d b1       	in	r24, 0x0d	; 13
 148:	81 60       	ori	r24, 0x01	; 1
 14a:	8d b9       	out	0x0d, r24	; 13
	
//	Bit 4 – MSTR:?Master/Slave Select
//	This bit selects Master SPI mode when written to one, and Slave SPI mode when written logic zero. 
	SPCR |= (1<<MSTR);
 14c:	8d b1       	in	r24, 0x0d	; 13
 14e:	80 61       	ori	r24, 0x10	; 16
 150:	8d b9       	out	0x0d, r24	; 13
	
//	set ss as low
	PORTB &= ~(1<<SS);
 152:	88 b3       	in	r24, 0x18	; 24
 154:	8f 7e       	andi	r24, 0xEF	; 239
 156:	88 bb       	out	0x18, r24	; 24
	
//	Bit 6 – SPE:?SPI Enable
//	When the SPE bit is written to one, the SPI is enabled. This bit must be set to enable any SPI operations.
	SPCR |= (1<<SPE);	
 158:	8d b1       	in	r24, 0x0d	; 13
 15a:	80 64       	ori	r24, 0x40	; 64
 15c:	8d b9       	out	0x0d, r24	; 13
 15e:	08 95       	ret

00000160 <_exit>:
 160:	f8 94       	cli

00000162 <__stop_program>:
 162:	ff cf       	rjmp	.-2      	; 0x162 <__stop_program>
