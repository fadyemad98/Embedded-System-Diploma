
unit8_lesson4_section_lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000759  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000653  00000000  00000000  00000959  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d7  00000000  00000000  00000fac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  00001384  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039a  00000000  00000000  00001404  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d5  00000000  00000000  0000179e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001873  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 72 00 	jmp	0xe4	; 0xe4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "avr/interrupt.h"	
#include "SPI.h"


int main(void)
{	SPI_Masterinit();
  6c:	cf 93       	push	r28
  6e:	0e 94 51 00 	call	0xa2	; 0xa2 <SPI_Masterinit>
	DDRD = 0xFF;
  72:	8f ef       	ldi	r24, 0xFF	; 255
  74:	81 bb       	out	0x11, r24	; 17
	u8 data = 1;
  76:	c1 e0       	ldi	r28, 0x01	; 1
    while (data < 99) 
  78:	0e c0       	rjmp	.+28     	; 0x96 <main+0x2a>
    {
		PORTD = SPI_MasterTransmit(data);
  7a:	8c 2f       	mov	r24, r28
  7c:	0e 94 6a 00 	call	0xd4	; 0xd4 <SPI_MasterTransmit>
  80:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	2f ef       	ldi	r18, 0xFF	; 255
  84:	89 e6       	ldi	r24, 0x69	; 105
  86:	98 e1       	ldi	r25, 0x18	; 24
  88:	21 50       	subi	r18, 0x01	; 1
  8a:	80 40       	sbci	r24, 0x00	; 0
  8c:	90 40       	sbci	r25, 0x00	; 0
  8e:	e1 f7       	brne	.-8      	; 0x88 <main+0x1c>
  90:	00 c0       	rjmp	.+0      	; 0x92 <main+0x26>
  92:	00 00       	nop
		_delay_ms(1000);
		data++;
  94:	cf 5f       	subi	r28, 0xFF	; 255

int main(void)
{	SPI_Masterinit();
	DDRD = 0xFF;
	u8 data = 1;
    while (data < 99) 
  96:	c3 36       	cpi	r28, 0x63	; 99
  98:	80 f3       	brcs	.-32     	; 0x7a <main+0xe>
    {
		PORTD = SPI_MasterTransmit(data);
		_delay_ms(1000);
		data++;
    }
}
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	cf 91       	pop	r28
  a0:	08 95       	ret

000000a2 <SPI_Masterinit>:
	SPDR = cdata;
	while (!(SPSR & (1<<SPIF ) )); //as long as flag is not set
	//when flag is set ---> recieve complete
	return SPDR;
	
}
  a2:	87 b3       	in	r24, 0x17	; 23
  a4:	80 62       	ori	r24, 0x20	; 32
  a6:	87 bb       	out	0x17, r24	; 23
  a8:	87 b3       	in	r24, 0x17	; 23
  aa:	8f 7b       	andi	r24, 0xBF	; 191
  ac:	87 bb       	out	0x17, r24	; 23
  ae:	87 b3       	in	r24, 0x17	; 23
  b0:	80 61       	ori	r24, 0x10	; 16
  b2:	87 bb       	out	0x17, r24	; 23
  b4:	87 b3       	in	r24, 0x17	; 23
  b6:	80 68       	ori	r24, 0x80	; 128
  b8:	87 bb       	out	0x17, r24	; 23
  ba:	8d b1       	in	r24, 0x0d	; 13
  bc:	81 60       	ori	r24, 0x01	; 1
  be:	8d b9       	out	0x0d, r24	; 13
  c0:	8d b1       	in	r24, 0x0d	; 13
  c2:	80 61       	ori	r24, 0x10	; 16
  c4:	8d b9       	out	0x0d, r24	; 13
  c6:	88 b3       	in	r24, 0x18	; 24
  c8:	8f 7e       	andi	r24, 0xEF	; 239
  ca:	88 bb       	out	0x18, r24	; 24
  cc:	8d b1       	in	r24, 0x0d	; 13
  ce:	80 64       	ori	r24, 0x40	; 64
  d0:	8d b9       	out	0x0d, r24	; 13
  d2:	08 95       	ret

000000d4 <SPI_MasterTransmit>:

u8 SPI_MasterTransmit(u8 cdata){
	SPDR = cdata;
  d4:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF ) )); //as long as flag is not set
  d6:	77 9b       	sbis	0x0e, 7	; 14
  d8:	fe cf       	rjmp	.-4      	; 0xd6 <SPI_MasterTransmit+0x2>
	//when flag is set ---> transmit complete
	
//	set ss as low
	PORTB |= (1<<SS);
  da:	88 b3       	in	r24, 0x18	; 24
  dc:	80 61       	ori	r24, 0x10	; 16
  de:	88 bb       	out	0x18, r24	; 24
	
	return SPDR;
  e0:	8f b1       	in	r24, 0x0f	; 15
}
  e2:	08 95       	ret

000000e4 <_exit>:
  e4:	f8 94       	cli

000000e6 <__stop_program>:
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <__stop_program>
