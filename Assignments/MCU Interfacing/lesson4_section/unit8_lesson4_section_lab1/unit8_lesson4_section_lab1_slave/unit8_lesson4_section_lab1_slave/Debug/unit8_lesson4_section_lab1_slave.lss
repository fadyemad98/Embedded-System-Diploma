
unit8_lesson4_section_lab1_slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000013a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000759  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000653  00000000  00000000  00000959  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003dd  00000000  00000000  00000fac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  0000138c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c1  00000000  00000000  0000140c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d6  00000000  00000000  000017cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000018a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 71 00 	jmp	0xe2	; 0xe2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include "SPI.h"
#include "LCD.h"


int main(void)
{	SPI_SlaveInit();
  7c:	cf 93       	push	r28
  7e:	0e 94 59 00 	call	0xb2	; 0xb2 <SPI_SlaveInit>
	DDRA = 0xFF;
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	8a bb       	out	0x1a, r24	; 26
	s8 data = 99;
  86:	c3 e6       	ldi	r28, 0x63	; 99
    while (data > 0) 
  88:	0e c0       	rjmp	.+28     	; 0xa6 <main+0x2a>
    {
		PORTA = SPI_SlaveReceive(data);
  8a:	8c 2f       	mov	r24, r28
  8c:	0e 94 6c 00 	call	0xd8	; 0xd8 <SPI_SlaveReceive>
  90:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	2f ef       	ldi	r18, 0xFF	; 255
  94:	89 e6       	ldi	r24, 0x69	; 105
  96:	98 e1       	ldi	r25, 0x18	; 24
  98:	21 50       	subi	r18, 0x01	; 1
  9a:	80 40       	sbci	r24, 0x00	; 0
  9c:	90 40       	sbci	r25, 0x00	; 0
  9e:	e1 f7       	brne	.-8      	; 0x98 <main+0x1c>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <main+0x26>
  a2:	00 00       	nop
		_delay_ms(1000);
		data--;
  a4:	c1 50       	subi	r28, 0x01	; 1

int main(void)
{	SPI_SlaveInit();
	DDRA = 0xFF;
	s8 data = 99;
    while (data > 0) 
  a6:	1c 16       	cp	r1, r28
  a8:	84 f3       	brlt	.-32     	; 0x8a <main+0xe>
    {
		PORTA = SPI_SlaveReceive(data);
		_delay_ms(1000);
		data--;
    }
}
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	cf 91       	pop	r28
  b0:	08 95       	ret

000000b2 <SPI_SlaveInit>:
	
}

void SPI_SlaveInit(void){
//	set MOSI Pin as I/P
	DDR_SPI &= ~(1<<MOSI);	
  b2:	87 b3       	in	r24, 0x17	; 23
  b4:	8f 7d       	andi	r24, 0xDF	; 223
  b6:	87 bb       	out	0x17, r24	; 23
	
//	set SCK Pin input
	DDR_SPI &= ~(1<<SCK);
  b8:	87 b3       	in	r24, 0x17	; 23
  ba:	8f 77       	andi	r24, 0x7F	; 127
  bc:	87 bb       	out	0x17, r24	; 23
	
//	set MISO Pin as O/P
	DDR_SPI |= (1<<MISO);
  be:	87 b3       	in	r24, 0x17	; 23
  c0:	80 64       	ori	r24, 0x40	; 64
  c2:	87 bb       	out	0x17, r24	; 23
	
//	set SS Pin as I/P
	DDR_SPI &= ~(1<<SS);
  c4:	87 b3       	in	r24, 0x17	; 23
  c6:	8f 7e       	andi	r24, 0xEF	; 239
  c8:	87 bb       	out	0x17, r24	; 23
	
//	Bit 4 – MSTR:?Master/Slave Select
//	This bit selects Master SPI mode when written to one, and Slave SPI mode when written logic zero. 
	SPCR &= ~(1<<MSTR);
  ca:	8d b1       	in	r24, 0x0d	; 13
  cc:	8f 7e       	andi	r24, 0xEF	; 239
  ce:	8d b9       	out	0x0d, r24	; 13
	
//	Bit 6 – SPE:?SPI Enable
//	When the SPE bit is written to one, the SPI is enabled. This bit must be set to enable any SPI operations.
	SPCR |= (1<<SPE);
  d0:	8d b1       	in	r24, 0x0d	; 13
  d2:	80 64       	ori	r24, 0x40	; 64
  d4:	8d b9       	out	0x0d, r24	; 13
  d6:	08 95       	ret

000000d8 <SPI_SlaveReceive>:

}

u8 SPI_SlaveReceive(u8 cdata){
	SPDR = cdata;
  d8:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF))); //as long as flag is not set
  da:	77 9b       	sbis	0x0e, 7	; 14
  dc:	fe cf       	rjmp	.-4      	; 0xda <SPI_SlaveReceive+0x2>
	//when flag is set ---> recieve complete
	return SPDR;
  de:	8f b1       	in	r24, 0x0f	; 15
	
}
  e0:	08 95       	ret

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>
