
unit8_lesson7_lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000108c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080011bc  080011bc  000111bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011dc  080011dc  000111e4  2**0
                  CONTENTS
  4 .ARM          00000000  080011dc  080011dc  000111e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080011dc  080011e4  000111e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011dc  080011dc  000111dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080011e0  080011e0  000111e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000111e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000000  080011e4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  080011e4  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000111e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006e09  00000000  00000000  0001120d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000010bf  00000000  00000000  00018016  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001356  00000000  00000000  000190d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000002f0  00000000  00000000  0001a430  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000268  00000000  00000000  0001a720  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002f96  00000000  00000000  0001a988  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000036df  00000000  00000000  0001d91e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000c819  00000000  00000000  00020ffd  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002d816  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000009c4  00000000  00000000  0002d894  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080011a4 	.word	0x080011a4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080011a4 	.word	0x080011a4

08000170 <eeprom_init>:


#include "I2C_Slave_EEPROM.h"

void eeprom_init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b08a      	sub	sp, #40	; 0x28
 8000174:	af00      	add	r7, sp, #0

	I2C_InitTypeDef I2C1CFG ;

	//I2C Controller act as a Master

	I2C1CFG.General_Call_Address_Detection = I2C_ENGC_Enable ;
 8000176:	2340      	movs	r3, #64	; 0x40
 8000178:	623b      	str	r3, [r7, #32]
	I2C1CFG.I2C_ACK_Control =I2C_Ack_Enable ;
 800017a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800017e:	61fb      	str	r3, [r7, #28]
	I2C1CFG.I2C_ClockSpeed = I2C_SCLK_SM_100K ;
 8000180:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <eeprom_init+0x38>)
 8000182:	607b      	str	r3, [r7, #4]
	I2C1CFG.I2C_Mode = I2C_mode_I2C ;
 8000184:	2300      	movs	r3, #0
 8000186:	60fb      	str	r3, [r7, #12]
	I2C1CFG.P_Slave_Event_CallBack = NULL ;
 8000188:	2300      	movs	r3, #0
 800018a:	627b      	str	r3, [r7, #36]	; 0x24
	I2C1CFG.StretchMode = I2C_StretchMode_Enable;
 800018c:	2300      	movs	r3, #0
 800018e:	60bb      	str	r3, [r7, #8]

	MCAL_I2C_GPIO_Set_Pins (I2C1);
 8000190:	4806      	ldr	r0, [pc, #24]	; (80001ac <eeprom_init+0x3c>)
 8000192:	f000 fb9b 	bl	80008cc <MCAL_I2C_GPIO_Set_Pins>
	MCAL_I2C_Init(I2C1, &I2C1CFG);
 8000196:	1d3b      	adds	r3, r7, #4
 8000198:	4619      	mov	r1, r3
 800019a:	4804      	ldr	r0, [pc, #16]	; (80001ac <eeprom_init+0x3c>)
 800019c:	f000 fa86 	bl	80006ac <MCAL_I2C_Init>


}
 80001a0:	bf00      	nop
 80001a2:	3728      	adds	r7, #40	; 0x28
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	000186a0 	.word	0x000186a0
 80001ac:	40005400 	.word	0x40005400

080001b0 <eeprom_write_Nbytes>:
unsigned char eeprom_write_Nbytes(unsigned int Memory_address, unsigned char* bytes,uint8_t Data_Length)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b0c8      	sub	sp, #288	; 0x120
 80001b4:	af02      	add	r7, sp, #8
 80001b6:	f107 030c 	add.w	r3, r7, #12
 80001ba:	6018      	str	r0, [r3, #0]
 80001bc:	f107 0308 	add.w	r3, r7, #8
 80001c0:	6019      	str	r1, [r3, #0]
 80001c2:	1dfb      	adds	r3, r7, #7
 80001c4:	701a      	strb	r2, [r3, #0]
	uint8_t i=0 ;
 80001c6:	2300      	movs	r3, #0
 80001c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	//MISRA C++ 2008, 18-4-1 - Dynamic heap memory allocation shall not be used
	//Violate MISRA Rule
	//(unsigned char*)malloc(Data_Length+2)  ;
	uint8_t buffer[256]  ;
	buffer[0] = (uint8_t)(Memory_address>>8) ; 	//upper byte Memory Address
 80001cc:	f107 030c 	add.w	r3, r7, #12
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	0a1b      	lsrs	r3, r3, #8
 80001d4:	b2da      	uxtb	r2, r3
 80001d6:	f107 0314 	add.w	r3, r7, #20
 80001da:	701a      	strb	r2, [r3, #0]
	buffer[1] = (uint8_t)Memory_address ; 	//lower byte Memory Address
 80001dc:	f107 030c 	add.w	r3, r7, #12
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	b2da      	uxtb	r2, r3
 80001e4:	f107 0314 	add.w	r3, r7, #20
 80001e8:	705a      	strb	r2, [r3, #1]

	for (i=2 ; i<(Data_Length+2) ; i++ )
 80001ea:	2302      	movs	r3, #2
 80001ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 80001f0:	e011      	b.n	8000216 <eeprom_write_Nbytes+0x66>
	{buffer[i] = bytes[i-2] ;}
 80001f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80001f6:	3b02      	subs	r3, #2
 80001f8:	f107 0208 	add.w	r2, r7, #8
 80001fc:	6812      	ldr	r2, [r2, #0]
 80001fe:	441a      	add	r2, r3
 8000200:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000204:	7811      	ldrb	r1, [r2, #0]
 8000206:	f107 0214 	add.w	r2, r7, #20
 800020a:	54d1      	strb	r1, [r2, r3]
	for (i=2 ; i<(Data_Length+2) ; i++ )
 800020c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000210:	3301      	adds	r3, #1
 8000212:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8000216:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 800021a:	1dfb      	adds	r3, r7, #7
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	3302      	adds	r3, #2
 8000220:	429a      	cmp	r2, r3
 8000222:	dbe6      	blt.n	80001f2 <eeprom_write_Nbytes+0x42>

	MCAL_I2C_Master_TX(I2C1, EEPROM_Slave_address, buffer, (Data_Length+2), With_Stop, Start);
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	3302      	adds	r3, #2
 800022a:	4619      	mov	r1, r3
 800022c:	f107 0214 	add.w	r2, r7, #20
 8000230:	2300      	movs	r3, #0
 8000232:	9301      	str	r3, [sp, #4]
 8000234:	2300      	movs	r3, #0
 8000236:	9300      	str	r3, [sp, #0]
 8000238:	460b      	mov	r3, r1
 800023a:	212a      	movs	r1, #42	; 0x2a
 800023c:	4804      	ldr	r0, [pc, #16]	; (8000250 <eeprom_write_Nbytes+0xa0>)
 800023e:	f000 fc03 	bl	8000a48 <MCAL_I2C_Master_TX>

	return 0 ;
 8000242:	2300      	movs	r3, #0
}
 8000244:	4618      	mov	r0, r3
 8000246:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	40005400 	.word	0x40005400

08000254 <eeprom_read_byte>:


unsigned char eeprom_read_byte(unsigned int address , uint8_t* dataOut, uint8_t dataLen)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b088      	sub	sp, #32
 8000258:	af02      	add	r7, sp, #8
 800025a:	60f8      	str	r0, [r7, #12]
 800025c:	60b9      	str	r1, [r7, #8]
 800025e:	4613      	mov	r3, r2
 8000260:	71fb      	strb	r3, [r7, #7]

	unsigned char buffer[2];
	buffer[0] = (uint8_t)(address>>8) ; 	//Upper Memory Address
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	0a1b      	lsrs	r3, r3, #8
 8000266:	b2db      	uxtb	r3, r3
 8000268:	753b      	strb	r3, [r7, #20]
	buffer[1] = (uint8_t)(address) ; 	//Lower Memory Address
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	b2db      	uxtb	r3, r3
 800026e:	757b      	strb	r3, [r7, #21]

	MCAL_I2C_Master_TX(I2C1, EEPROM_Slave_address , buffer, 2 ,without_Stop ,Start); //Write Address Only
 8000270:	f107 0214 	add.w	r2, r7, #20
 8000274:	2300      	movs	r3, #0
 8000276:	9301      	str	r3, [sp, #4]
 8000278:	2301      	movs	r3, #1
 800027a:	9300      	str	r3, [sp, #0]
 800027c:	2302      	movs	r3, #2
 800027e:	212a      	movs	r1, #42	; 0x2a
 8000280:	4809      	ldr	r0, [pc, #36]	; (80002a8 <eeprom_read_byte+0x54>)
 8000282:	f000 fbe1 	bl	8000a48 <MCAL_I2C_Master_TX>

	MCAL_I2C_Master_RX(I2C1, EEPROM_Slave_address, dataOut, dataLen,With_Stop,repeated_start); 			//Read Data
 8000286:	79fa      	ldrb	r2, [r7, #7]
 8000288:	2301      	movs	r3, #1
 800028a:	9301      	str	r3, [sp, #4]
 800028c:	2300      	movs	r3, #0
 800028e:	9300      	str	r3, [sp, #0]
 8000290:	4613      	mov	r3, r2
 8000292:	68ba      	ldr	r2, [r7, #8]
 8000294:	212a      	movs	r1, #42	; 0x2a
 8000296:	4804      	ldr	r0, [pc, #16]	; (80002a8 <eeprom_read_byte+0x54>)
 8000298:	f000 fb62 	bl	8000960 <MCAL_I2C_Master_RX>

	return 0 ;
 800029c:	2300      	movs	r3, #0

}
 800029e:	4618      	mov	r0, r3
 80002a0:	3718      	adds	r7, #24
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40005400 	.word	0x40005400

080002ac <EXTI0_IRQHandler>:
///**===========			ISR  Functions        =========================
///**================================================================
// */

void EXTI0_IRQHandler(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
	//cleared by writing a ‘1’ into the bit Pending register (EXTI_PR)
	EXTI->EXTI_PR |= (1<<0) ;
 80002b0:	4b05      	ldr	r3, [pc, #20]	; (80002c8 <EXTI0_IRQHandler+0x1c>)
 80002b2:	695b      	ldr	r3, [r3, #20]
 80002b4:	4a04      	ldr	r2, [pc, #16]	; (80002c8 <EXTI0_IRQHandler+0x1c>)
 80002b6:	f043 0301 	orr.w	r3, r3, #1
 80002ba:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALL
	GP_IRQ_CallBack[0]() ;
 80002bc:	4b03      	ldr	r3, [pc, #12]	; (80002cc <EXTI0_IRQHandler+0x20>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4798      	blx	r3
}
 80002c2:	bf00      	nop
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	40010400 	.word	0x40010400
 80002cc:	20000078 	.word	0x20000078

080002d0 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void) {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	EXTI->EXTI_PR |=  (1<<1) ;
 80002d4:	4b05      	ldr	r3, [pc, #20]	; (80002ec <EXTI1_IRQHandler+0x1c>)
 80002d6:	695b      	ldr	r3, [r3, #20]
 80002d8:	4a04      	ldr	r2, [pc, #16]	; (80002ec <EXTI1_IRQHandler+0x1c>)
 80002da:	f043 0302 	orr.w	r3, r3, #2
 80002de:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[1]() ;
 80002e0:	4b03      	ldr	r3, [pc, #12]	; (80002f0 <EXTI1_IRQHandler+0x20>)
 80002e2:	685b      	ldr	r3, [r3, #4]
 80002e4:	4798      	blx	r3
}
 80002e6:	bf00      	nop
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	40010400 	.word	0x40010400
 80002f0:	20000078 	.word	0x20000078

080002f4 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler (void) {
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	EXTI->EXTI_PR |=  (1<<2) ;
 80002f8:	4b05      	ldr	r3, [pc, #20]	; (8000310 <EXTI2_IRQHandler+0x1c>)
 80002fa:	695b      	ldr	r3, [r3, #20]
 80002fc:	4a04      	ldr	r2, [pc, #16]	; (8000310 <EXTI2_IRQHandler+0x1c>)
 80002fe:	f043 0304 	orr.w	r3, r3, #4
 8000302:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[2]() ; }
 8000304:	4b03      	ldr	r3, [pc, #12]	; (8000314 <EXTI2_IRQHandler+0x20>)
 8000306:	689b      	ldr	r3, [r3, #8]
 8000308:	4798      	blx	r3
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	40010400 	.word	0x40010400
 8000314:	20000078 	.word	0x20000078

08000318 <EXTI3_IRQHandler>:


void EXTI3_IRQHandler (void) {
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	EXTI->EXTI_PR |=  (1<<3) ;
 800031c:	4b05      	ldr	r3, [pc, #20]	; (8000334 <EXTI3_IRQHandler+0x1c>)
 800031e:	695b      	ldr	r3, [r3, #20]
 8000320:	4a04      	ldr	r2, [pc, #16]	; (8000334 <EXTI3_IRQHandler+0x1c>)
 8000322:	f043 0308 	orr.w	r3, r3, #8
 8000326:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[3]() ; }
 8000328:	4b03      	ldr	r3, [pc, #12]	; (8000338 <EXTI3_IRQHandler+0x20>)
 800032a:	68db      	ldr	r3, [r3, #12]
 800032c:	4798      	blx	r3
 800032e:	bf00      	nop
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	40010400 	.word	0x40010400
 8000338:	20000078 	.word	0x20000078

0800033c <EXTI4_IRQHandler>:


void EXTI4_IRQHandler (void) {
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	EXTI->EXTI_PR |=  (1<<4) ;
 8000340:	4b05      	ldr	r3, [pc, #20]	; (8000358 <EXTI4_IRQHandler+0x1c>)
 8000342:	695b      	ldr	r3, [r3, #20]
 8000344:	4a04      	ldr	r2, [pc, #16]	; (8000358 <EXTI4_IRQHandler+0x1c>)
 8000346:	f043 0310 	orr.w	r3, r3, #16
 800034a:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]() ; }
 800034c:	4b03      	ldr	r3, [pc, #12]	; (800035c <EXTI4_IRQHandler+0x20>)
 800034e:	691b      	ldr	r3, [r3, #16]
 8000350:	4798      	blx	r3
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40010400 	.word	0x40010400
 800035c:	20000078 	.word	0x20000078

08000360 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler (void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
	if (EXTI->EXTI_PR & 1<<5 ) {	EXTI->EXTI_PR |=  (1<<5)    ; GP_IRQ_CallBack[5]() ;   }
 8000364:	4b26      	ldr	r3, [pc, #152]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 8000366:	695b      	ldr	r3, [r3, #20]
 8000368:	f003 0320 	and.w	r3, r3, #32
 800036c:	2b00      	cmp	r3, #0
 800036e:	d008      	beq.n	8000382 <EXTI9_5_IRQHandler+0x22>
 8000370:	4b23      	ldr	r3, [pc, #140]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 8000372:	695b      	ldr	r3, [r3, #20]
 8000374:	4a22      	ldr	r2, [pc, #136]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 8000376:	f043 0320 	orr.w	r3, r3, #32
 800037a:	6153      	str	r3, [r2, #20]
 800037c:	4b21      	ldr	r3, [pc, #132]	; (8000404 <EXTI9_5_IRQHandler+0xa4>)
 800037e:	695b      	ldr	r3, [r3, #20]
 8000380:	4798      	blx	r3
	if (EXTI->EXTI_PR & 1<<6 ) {	EXTI->EXTI_PR |=  (1<<6)    ; GP_IRQ_CallBack[6]() ;   }
 8000382:	4b1f      	ldr	r3, [pc, #124]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800038a:	2b00      	cmp	r3, #0
 800038c:	d008      	beq.n	80003a0 <EXTI9_5_IRQHandler+0x40>
 800038e:	4b1c      	ldr	r3, [pc, #112]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	4a1b      	ldr	r2, [pc, #108]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 8000394:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000398:	6153      	str	r3, [r2, #20]
 800039a:	4b1a      	ldr	r3, [pc, #104]	; (8000404 <EXTI9_5_IRQHandler+0xa4>)
 800039c:	699b      	ldr	r3, [r3, #24]
 800039e:	4798      	blx	r3
	if (EXTI->EXTI_PR & 1<<7 ) {	EXTI->EXTI_PR |=  (1<<7)    ; GP_IRQ_CallBack[7]() ;   }
 80003a0:	4b17      	ldr	r3, [pc, #92]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003a2:	695b      	ldr	r3, [r3, #20]
 80003a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d008      	beq.n	80003be <EXTI9_5_IRQHandler+0x5e>
 80003ac:	4b14      	ldr	r3, [pc, #80]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003ae:	695b      	ldr	r3, [r3, #20]
 80003b0:	4a13      	ldr	r2, [pc, #76]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003b6:	6153      	str	r3, [r2, #20]
 80003b8:	4b12      	ldr	r3, [pc, #72]	; (8000404 <EXTI9_5_IRQHandler+0xa4>)
 80003ba:	69db      	ldr	r3, [r3, #28]
 80003bc:	4798      	blx	r3
	if (EXTI->EXTI_PR & 1<<8 ) {	EXTI->EXTI_PR |=  (1<<8)    ; GP_IRQ_CallBack[8]() ;   }
 80003be:	4b10      	ldr	r3, [pc, #64]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d008      	beq.n	80003dc <EXTI9_5_IRQHandler+0x7c>
 80003ca:	4b0d      	ldr	r3, [pc, #52]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	4a0c      	ldr	r2, [pc, #48]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003d4:	6153      	str	r3, [r2, #20]
 80003d6:	4b0b      	ldr	r3, [pc, #44]	; (8000404 <EXTI9_5_IRQHandler+0xa4>)
 80003d8:	6a1b      	ldr	r3, [r3, #32]
 80003da:	4798      	blx	r3
	if (EXTI->EXTI_PR & 1<<9 ) {	EXTI->EXTI_PR |=  (1<<9)    ; GP_IRQ_CallBack[9]() ;   }
 80003dc:	4b08      	ldr	r3, [pc, #32]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003de:	695b      	ldr	r3, [r3, #20]
 80003e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d008      	beq.n	80003fa <EXTI9_5_IRQHandler+0x9a>
 80003e8:	4b05      	ldr	r3, [pc, #20]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003ea:	695b      	ldr	r3, [r3, #20]
 80003ec:	4a04      	ldr	r2, [pc, #16]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003f2:	6153      	str	r3, [r2, #20]
 80003f4:	4b03      	ldr	r3, [pc, #12]	; (8000404 <EXTI9_5_IRQHandler+0xa4>)
 80003f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003f8:	4798      	blx	r3

}
 80003fa:	bf00      	nop
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	40010400 	.word	0x40010400
 8000404:	20000078 	.word	0x20000078

08000408 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
	if (EXTI->EXTI_PR & 1<<10 ) {	EXTI->EXTI_PR |=  (1<<10)    ; GP_IRQ_CallBack[10]() ;   }
 800040c:	4b2d      	ldr	r3, [pc, #180]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 800040e:	695b      	ldr	r3, [r3, #20]
 8000410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000414:	2b00      	cmp	r3, #0
 8000416:	d008      	beq.n	800042a <EXTI15_10_IRQHandler+0x22>
 8000418:	4b2a      	ldr	r3, [pc, #168]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 800041a:	695b      	ldr	r3, [r3, #20]
 800041c:	4a29      	ldr	r2, [pc, #164]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 800041e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000422:	6153      	str	r3, [r2, #20]
 8000424:	4b28      	ldr	r3, [pc, #160]	; (80004c8 <EXTI15_10_IRQHandler+0xc0>)
 8000426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000428:	4798      	blx	r3
	if (EXTI->EXTI_PR & 1<<11 ) {	EXTI->EXTI_PR |=  (1<<11)    ; GP_IRQ_CallBack[11]() ;   }
 800042a:	4b26      	ldr	r3, [pc, #152]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000432:	2b00      	cmp	r3, #0
 8000434:	d008      	beq.n	8000448 <EXTI15_10_IRQHandler+0x40>
 8000436:	4b23      	ldr	r3, [pc, #140]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	4a22      	ldr	r2, [pc, #136]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 800043c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000440:	6153      	str	r3, [r2, #20]
 8000442:	4b21      	ldr	r3, [pc, #132]	; (80004c8 <EXTI15_10_IRQHandler+0xc0>)
 8000444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000446:	4798      	blx	r3
	if (EXTI->EXTI_PR & 1<<12 ) {	EXTI->EXTI_PR |=  (1<<12)    ; GP_IRQ_CallBack[12]() ;   }
 8000448:	4b1e      	ldr	r3, [pc, #120]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 800044a:	695b      	ldr	r3, [r3, #20]
 800044c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000450:	2b00      	cmp	r3, #0
 8000452:	d008      	beq.n	8000466 <EXTI15_10_IRQHandler+0x5e>
 8000454:	4b1b      	ldr	r3, [pc, #108]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 8000456:	695b      	ldr	r3, [r3, #20]
 8000458:	4a1a      	ldr	r2, [pc, #104]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 800045a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800045e:	6153      	str	r3, [r2, #20]
 8000460:	4b19      	ldr	r3, [pc, #100]	; (80004c8 <EXTI15_10_IRQHandler+0xc0>)
 8000462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000464:	4798      	blx	r3
	if (EXTI->EXTI_PR & 1<<13 ) {	EXTI->EXTI_PR |=  (1<<13)    ; GP_IRQ_CallBack[13]() ;   }
 8000466:	4b17      	ldr	r3, [pc, #92]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800046e:	2b00      	cmp	r3, #0
 8000470:	d008      	beq.n	8000484 <EXTI15_10_IRQHandler+0x7c>
 8000472:	4b14      	ldr	r3, [pc, #80]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	4a13      	ldr	r2, [pc, #76]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 8000478:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800047c:	6153      	str	r3, [r2, #20]
 800047e:	4b12      	ldr	r3, [pc, #72]	; (80004c8 <EXTI15_10_IRQHandler+0xc0>)
 8000480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000482:	4798      	blx	r3
	if (EXTI->EXTI_PR & 1<<14 ) {	EXTI->EXTI_PR |=  (1<<14)    ; GP_IRQ_CallBack[14]() ;   }
 8000484:	4b0f      	ldr	r3, [pc, #60]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 8000486:	695b      	ldr	r3, [r3, #20]
 8000488:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800048c:	2b00      	cmp	r3, #0
 800048e:	d008      	beq.n	80004a2 <EXTI15_10_IRQHandler+0x9a>
 8000490:	4b0c      	ldr	r3, [pc, #48]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 8000492:	695b      	ldr	r3, [r3, #20]
 8000494:	4a0b      	ldr	r2, [pc, #44]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 8000496:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800049a:	6153      	str	r3, [r2, #20]
 800049c:	4b0a      	ldr	r3, [pc, #40]	; (80004c8 <EXTI15_10_IRQHandler+0xc0>)
 800049e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004a0:	4798      	blx	r3
	if (EXTI->EXTI_PR & 1<<15 ) {	EXTI->EXTI_PR |=  (1<<15)    ; GP_IRQ_CallBack[15]() ;   }
 80004a2:	4b08      	ldr	r3, [pc, #32]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d008      	beq.n	80004c0 <EXTI15_10_IRQHandler+0xb8>
 80004ae:	4b05      	ldr	r3, [pc, #20]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	4a04      	ldr	r2, [pc, #16]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 80004b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004b8:	6153      	str	r3, [r2, #20]
 80004ba:	4b03      	ldr	r3, [pc, #12]	; (80004c8 <EXTI15_10_IRQHandler+0xc0>)
 80004bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004be:	4798      	blx	r3


}
 80004c0:	bf00      	nop
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	40010400 	.word	0x40010400
 80004c8:	20000078 	.word	0x20000078

080004cc <Get_CRLH_Position>:
 * =======================================================================================
 * 							Generic Functions
 * =======================================================================================
 */
uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 80004d6:	88fb      	ldrh	r3, [r7, #6]
 80004d8:	2b80      	cmp	r3, #128	; 0x80
 80004da:	d042      	beq.n	8000562 <Get_CRLH_Position+0x96>
 80004dc:	2b80      	cmp	r3, #128	; 0x80
 80004de:	dc11      	bgt.n	8000504 <Get_CRLH_Position+0x38>
 80004e0:	2b08      	cmp	r3, #8
 80004e2:	d036      	beq.n	8000552 <Get_CRLH_Position+0x86>
 80004e4:	2b08      	cmp	r3, #8
 80004e6:	dc06      	bgt.n	80004f6 <Get_CRLH_Position+0x2a>
 80004e8:	2b02      	cmp	r3, #2
 80004ea:	d02e      	beq.n	800054a <Get_CRLH_Position+0x7e>
 80004ec:	2b04      	cmp	r3, #4
 80004ee:	d02e      	beq.n	800054e <Get_CRLH_Position+0x82>
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d028      	beq.n	8000546 <Get_CRLH_Position+0x7a>
 80004f4:	e047      	b.n	8000586 <Get_CRLH_Position+0xba>
 80004f6:	2b20      	cmp	r3, #32
 80004f8:	d02f      	beq.n	800055a <Get_CRLH_Position+0x8e>
 80004fa:	2b40      	cmp	r3, #64	; 0x40
 80004fc:	d02f      	beq.n	800055e <Get_CRLH_Position+0x92>
 80004fe:	2b10      	cmp	r3, #16
 8000500:	d029      	beq.n	8000556 <Get_CRLH_Position+0x8a>
 8000502:	e040      	b.n	8000586 <Get_CRLH_Position+0xba>
 8000504:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000508:	d033      	beq.n	8000572 <Get_CRLH_Position+0xa6>
 800050a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800050e:	dc09      	bgt.n	8000524 <Get_CRLH_Position+0x58>
 8000510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000514:	d029      	beq.n	800056a <Get_CRLH_Position+0x9e>
 8000516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800051a:	d028      	beq.n	800056e <Get_CRLH_Position+0xa2>
 800051c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000520:	d021      	beq.n	8000566 <Get_CRLH_Position+0x9a>
 8000522:	e030      	b.n	8000586 <Get_CRLH_Position+0xba>
 8000524:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000528:	d027      	beq.n	800057a <Get_CRLH_Position+0xae>
 800052a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800052e:	dc03      	bgt.n	8000538 <Get_CRLH_Position+0x6c>
 8000530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000534:	d01f      	beq.n	8000576 <Get_CRLH_Position+0xaa>
 8000536:	e026      	b.n	8000586 <Get_CRLH_Position+0xba>
 8000538:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800053c:	d01f      	beq.n	800057e <Get_CRLH_Position+0xb2>
 800053e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000542:	d01e      	beq.n	8000582 <Get_CRLH_Position+0xb6>
 8000544:	e01f      	b.n	8000586 <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0 ;
 8000546:	2300      	movs	r3, #0
 8000548:	e01e      	b.n	8000588 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_1:
		return 4 ;
 800054a:	2304      	movs	r3, #4
 800054c:	e01c      	b.n	8000588 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_2:
		return 8 ;
 800054e:	2308      	movs	r3, #8
 8000550:	e01a      	b.n	8000588 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_3:
		return 12 ;
 8000552:	230c      	movs	r3, #12
 8000554:	e018      	b.n	8000588 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_4:
		return 16 ;
 8000556:	2310      	movs	r3, #16
 8000558:	e016      	b.n	8000588 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_5:
		return 20 ;
 800055a:	2314      	movs	r3, #20
 800055c:	e014      	b.n	8000588 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_6:
		return 24 ;
 800055e:	2318      	movs	r3, #24
 8000560:	e012      	b.n	8000588 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_7:
		return 28 ;
 8000562:	231c      	movs	r3, #28
 8000564:	e010      	b.n	8000588 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_8:
		return 0 ;
 8000566:	2300      	movs	r3, #0
 8000568:	e00e      	b.n	8000588 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_9:
		return 4 ;
 800056a:	2304      	movs	r3, #4
 800056c:	e00c      	b.n	8000588 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_10:
		return 8 ;
 800056e:	2308      	movs	r3, #8
 8000570:	e00a      	b.n	8000588 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_11:
		return 12 ;
 8000572:	230c      	movs	r3, #12
 8000574:	e008      	b.n	8000588 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_12:
		return 16 ;
 8000576:	2310      	movs	r3, #16
 8000578:	e006      	b.n	8000588 <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_13:
		return 20 ;
 800057a:	2314      	movs	r3, #20
 800057c:	e004      	b.n	8000588 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_14:
		return 24 ;
 800057e:	2318      	movs	r3, #24
 8000580:	e002      	b.n	8000588 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_15:
		return 28 ;
 8000582:	231c      	movs	r3, #28
 8000584:	e000      	b.n	8000588 <Get_CRLH_Position+0xbc>
		break ;


	}
	return 0 ;
 8000586:	2300      	movs	r3, #0

}
 8000588:	4618      	mov	r0, r3
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	bc80      	pop	{r7}
 8000590:	4770      	bx	lr

08000592 <MCAL_GPIO_Init>:
 * @retval 			-none
 * Note				-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 					 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx , GPIO_PINConfig_t* PinConfig)
{
 8000592:	b590      	push	{r4, r7, lr}
 8000594:	b085      	sub	sp, #20
 8000596:	af00      	add	r7, sp, #0
 8000598:	6078      	str	r0, [r7, #4]
 800059a:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 >> 7
	//Port configuration register High (GPIOx_CRH) Configure PINS from 8 >> 15
	volatile uint32_t* ConfigRegister = NULL;
 800059c:	2300      	movs	r3, #0
 800059e:	60bb      	str	r3, [r7, #8]

	uint8_t PIN_Config = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	73fb      	strb	r3, [r7, #15]
	ConfigRegister = (PinConfig->GPIO_PinNumber<GPIO_PIN_8)?(&GPIOx->GPIOx_CRL):(&GPIOx->GPIOx_CRH);
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	881b      	ldrh	r3, [r3, #0]
 80005a8:	2bff      	cmp	r3, #255	; 0xff
 80005aa:	d801      	bhi.n	80005b0 <MCAL_GPIO_Init+0x1e>
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	e001      	b.n	80005b4 <MCAL_GPIO_Init+0x22>
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	3304      	adds	r3, #4
 80005b4:	60bb      	str	r3, [r7, #8]
	(*ConfigRegister) &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	881b      	ldrh	r3, [r3, #0]
 80005ba:	4618      	mov	r0, r3
 80005bc:	f7ff ff86 	bl	80004cc <Get_CRLH_Position>
 80005c0:	4603      	mov	r3, r0
 80005c2:	461a      	mov	r2, r3
 80005c4:	230f      	movs	r3, #15
 80005c6:	4093      	lsls	r3, r2
 80005c8:	43da      	mvns	r2, r3
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	401a      	ands	r2, r3
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	601a      	str	r2, [r3, #0]

	//if pin is output
	if((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD)||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP)||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD)||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	789b      	ldrb	r3, [r3, #2]
 80005d8:	2b07      	cmp	r3, #7
 80005da:	d00b      	beq.n	80005f4 <MCAL_GPIO_Init+0x62>
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	789b      	ldrb	r3, [r3, #2]
 80005e0:	2b06      	cmp	r3, #6
 80005e2:	d007      	beq.n	80005f4 <MCAL_GPIO_Init+0x62>
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	789b      	ldrb	r3, [r3, #2]
 80005e8:	2b05      	cmp	r3, #5
 80005ea:	d003      	beq.n	80005f4 <MCAL_GPIO_Init+0x62>
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	789b      	ldrb	r3, [r3, #2]
 80005f0:	2b04      	cmp	r3, #4
 80005f2:	d11c      	bne.n	800062e <MCAL_GPIO_Init+0x9c>
	{
		//Set CNFy[1:0] and MODEx[1:0]
		PIN_Config = ( (((PinConfig->GPIO_MODE -4) << 2) | ((PinConfig->GPIO_Output_Speed) << 0)) & 0x0F );
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	789b      	ldrb	r3, [r3, #2]
 80005f8:	3b04      	subs	r3, #4
 80005fa:	009b      	lsls	r3, r3, #2
 80005fc:	b25a      	sxtb	r2, r3
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	78db      	ldrb	r3, [r3, #3]
 8000602:	b25b      	sxtb	r3, r3
 8000604:	4313      	orrs	r3, r2
 8000606:	b25b      	sxtb	r3, r3
 8000608:	b2db      	uxtb	r3, r3
 800060a:	f003 030f 	and.w	r3, r3, #15
 800060e:	73fb      	strb	r3, [r7, #15]
		(*ConfigRegister) |= ( (PIN_Config) <<Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 8000610:	7bfc      	ldrb	r4, [r7, #15]
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	881b      	ldrh	r3, [r3, #0]
 8000616:	4618      	mov	r0, r3
 8000618:	f7ff ff58 	bl	80004cc <Get_CRLH_Position>
 800061c:	4603      	mov	r3, r0
 800061e:	fa04 f203 	lsl.w	r2, r4, r3
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	431a      	orrs	r2, r3
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	e02c      	b.n	8000688 <MCAL_GPIO_Init+0xf6>
	}
	//if pin is input
	else //MODE = 00 :Input mode (reset state)
	{
		if((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO)||(PinConfig->GPIO_MODE == GPIO_MODE_ANALOG) )
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	789b      	ldrb	r3, [r3, #2]
 8000632:	2b01      	cmp	r3, #1
 8000634:	d003      	beq.n	800063e <MCAL_GPIO_Init+0xac>
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	789b      	ldrb	r3, [r3, #2]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d107      	bne.n	800064e <MCAL_GPIO_Init+0xbc>
		{
			//Set CNFy[1:0] and MODEx[1:0]
			PIN_Config = ( (((PinConfig->GPIO_MODE) << 2) | 0x0 ) & 0x0F );
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	789b      	ldrb	r3, [r3, #2]
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	b2db      	uxtb	r3, r3
 8000646:	f003 030f 	and.w	r3, r3, #15
 800064a:	73fb      	strb	r3, [r7, #15]
 800064c:	e01c      	b.n	8000688 <MCAL_GPIO_Init+0xf6>
		}
		else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT) //consider it  as input  floating
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	789b      	ldrb	r3, [r3, #2]
 8000652:	2b08      	cmp	r3, #8
 8000654:	d102      	bne.n	800065c <MCAL_GPIO_Init+0xca>
		{
			//Set CNFy[1:0] and MODEx[1:0]
			PIN_Config = ( (((GPIO_MODE_INPUT_FLO) << 2) | 0x0 ) & 0x0F );
 8000656:	2304      	movs	r3, #4
 8000658:	73fb      	strb	r3, [r7, #15]
 800065a:	e015      	b.n	8000688 <MCAL_GPIO_Init+0xf6>
		}
		else //PU PD Input
		{
			PIN_Config = ( (((GPIO_MODE_INPUT_PU) << 2) | 0x0 ) & 0x0F );
 800065c:	2308      	movs	r3, #8
 800065e:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	789b      	ldrb	r3, [r3, #2]
 8000664:	2b02      	cmp	r3, #2
 8000666:	d107      	bne.n	8000678 <MCAL_GPIO_Init+0xe6>
			{
				//PxODR = 1 Input pull-up :Table 20. Port bit configuration table
				GPIOx->GPIOx_ODR |= PinConfig->GPIO_PinNumber;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	68db      	ldr	r3, [r3, #12]
 800066c:	683a      	ldr	r2, [r7, #0]
 800066e:	8812      	ldrh	r2, [r2, #0]
 8000670:	431a      	orrs	r2, r3
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	e007      	b.n	8000688 <MCAL_GPIO_Init+0xf6>
			}else{
				//PxODR = 0 Input pull-down :Table 20. Port bit configuration table
				GPIOx->GPIOx_ODR &= ~(PinConfig->GPIO_PinNumber);
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	683a      	ldr	r2, [r7, #0]
 800067e:	8812      	ldrh	r2, [r2, #0]
 8000680:	43d2      	mvns	r2, r2
 8000682:	401a      	ands	r2, r3
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	60da      	str	r2, [r3, #12]

		}

	}
	//write on CRL or CRH
	(*ConfigRegister) |= ( (PIN_Config) <<Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 8000688:	7bfc      	ldrb	r4, [r7, #15]
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	881b      	ldrh	r3, [r3, #0]
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff ff1c 	bl	80004cc <Get_CRLH_Position>
 8000694:	4603      	mov	r3, r0
 8000696:	fa04 f203 	lsl.w	r2, r4, r3
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	431a      	orrs	r2, r3
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	601a      	str	r2, [r3, #0]
}
 80006a4:	bf00      	nop
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd90      	pop	{r4, r7, pc}

080006ac <MCAL_I2C_Init>:
 * 							APIs
 * =======================================================================================
 */

void MCAL_I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80006ac:	b5b0      	push	{r4, r5, r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
	uint16_t tmpreg = 0, freqrange = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	82fb      	strh	r3, [r7, #22]
 80006ba:	2300      	movs	r3, #0
 80006bc:	82bb      	strh	r3, [r7, #20]
	uint32_t pclk1 = 8000000;
 80006be:	4b7a      	ldr	r3, [pc, #488]	; (80008a8 <MCAL_I2C_Init+0x1fc>)
 80006c0:	613b      	str	r3, [r7, #16]
	uint16_t result = 0 ;
 80006c2:	2300      	movs	r3, #0
 80006c4:	81fb      	strh	r3, [r7, #14]

	//Enable RCC Clock
	if (I2Cx == I2C1)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4a78      	ldr	r2, [pc, #480]	; (80008ac <MCAL_I2C_Init+0x200>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d110      	bne.n	80006f0 <MCAL_I2C_Init+0x44>
	{
		Global_I2C_Config[I2C1_INDEX] = *I2C_InitStruct ;
 80006ce:	4a78      	ldr	r2, [pc, #480]	; (80008b0 <MCAL_I2C_Init+0x204>)
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	4614      	mov	r4, r2
 80006d4:	461d      	mov	r5, r3
 80006d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006de:	682b      	ldr	r3, [r5, #0]
 80006e0:	6023      	str	r3, [r4, #0]
		RCC_I2C1_CLK_EN();
 80006e2:	4b74      	ldr	r3, [pc, #464]	; (80008b4 <MCAL_I2C_Init+0x208>)
 80006e4:	69db      	ldr	r3, [r3, #28]
 80006e6:	4a73      	ldr	r2, [pc, #460]	; (80008b4 <MCAL_I2C_Init+0x208>)
 80006e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006ec:	61d3      	str	r3, [r2, #28]
 80006ee:	e010      	b.n	8000712 <MCAL_I2C_Init+0x66>
	}else
	{
		Global_I2C_Config[I2C2_INDEX] = *I2C_InitStruct ;
 80006f0:	4b6f      	ldr	r3, [pc, #444]	; (80008b0 <MCAL_I2C_Init+0x204>)
 80006f2:	683a      	ldr	r2, [r7, #0]
 80006f4:	f103 0424 	add.w	r4, r3, #36	; 0x24
 80006f8:	4615      	mov	r5, r2
 80006fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000700:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000702:	682b      	ldr	r3, [r5, #0]
 8000704:	6023      	str	r3, [r4, #0]
		RCC_I2C2_CLK_EN();
 8000706:	4b6b      	ldr	r3, [pc, #428]	; (80008b4 <MCAL_I2C_Init+0x208>)
 8000708:	69db      	ldr	r3, [r3, #28]
 800070a:	4a6a      	ldr	r2, [pc, #424]	; (80008b4 <MCAL_I2C_Init+0x208>)
 800070c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000710:	61d3      	str	r3, [r2, #28]
	}
	if (I2C_InitStruct->I2C_Mode == I2C_mode_I2C)
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	689b      	ldr	r3, [r3, #8]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d17e      	bne.n	8000818 <MCAL_I2C_Init+0x16c>
	{
		/*---------------------------- INIT Timing  ------------------------*/
		//---I2C_CR2.FREQ[5:0]: Peripheral clock frequency
		/* Get the I2Cx CR2 value */
		tmpreg = I2Cx->CR2;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	685b      	ldr	r3, [r3, #4]
 800071e:	82fb      	strh	r3, [r7, #22]
		/* Clear frequency FREQ[5:0] bits */
		tmpreg &= ~(I2C_CR2_FREQ_Msk);
 8000720:	8afb      	ldrh	r3, [r7, #22]
 8000722:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000726:	82fb      	strh	r3, [r7, #22]
		/* Get pclk1 frequency value */
		pclk1 = MCAL_RCC_GetPCLK1Freq();
 8000728:	f000 fc08 	bl	8000f3c <MCAL_RCC_GetPCLK1Freq>
 800072c:	6138      	str	r0, [r7, #16]
		/* Set frequency bits depending on pclk1 value */
		freqrange = (uint16_t) (pclk1 / 1000000) ; //pclk1---->MHZ
 800072e:	693b      	ldr	r3, [r7, #16]
 8000730:	4a61      	ldr	r2, [pc, #388]	; (80008b8 <MCAL_I2C_Init+0x20c>)
 8000732:	fba2 2303 	umull	r2, r3, r2, r3
 8000736:	0c9b      	lsrs	r3, r3, #18
 8000738:	82bb      	strh	r3, [r7, #20]

		tmpreg |= freqrange ;
 800073a:	8afa      	ldrh	r2, [r7, #22]
 800073c:	8abb      	ldrh	r3, [r7, #20]
 800073e:	4313      	orrs	r3, r2
 8000740:	82fb      	strh	r3, [r7, #22]
		/* Write to I2Cx CR2 */
		I2Cx->CR2 = tmpreg;
 8000742:	8afa      	ldrh	r2, [r7, #22]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	605a      	str	r2, [r3, #4]

		//• Configure the clock control registers (I2C_CCR)
		/* Disable the selected I2C peripheral to configure Time */

		I2Cx->CR1 &= ~(I2C_CR1_PE) ;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f023 0201 	bic.w	r2, r3, #1
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	601a      	str	r2, [r3, #0]

		tmpreg = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	82fb      	strh	r3, [r7, #22]

		/* Configure speed in standard mode */
		if ((I2C_InitStruct->I2C_ClockSpeed == I2C_SCLK_SM_50K)||(I2C_InitStruct->I2C_ClockSpeed == I2C_SCLK_SM_100K) )
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000760:	d004      	beq.n	800076c <MCAL_I2C_Init+0xc0>
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a55      	ldr	r2, [pc, #340]	; (80008bc <MCAL_I2C_Init+0x210>)
 8000768:	4293      	cmp	r3, r2
 800076a:	d112      	bne.n	8000792 <MCAL_I2C_Init+0xe6>

			//			Tclk/2 = CRR * Tpclk1
			//			CRR = Tclk /(2 * Tpclk1)
			//			CRR = Fpclk1 / (2 * I2C_ClockFrequency)

			result = (uint16_t)(pclk1 / ( I2C_InitStruct->I2C_ClockSpeed << 1   )   );		//<<1 == *2
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	005b      	lsls	r3, r3, #1
 8000772:	693a      	ldr	r2, [r7, #16]
 8000774:	fbb2 f3f3 	udiv	r3, r2, r3
 8000778:	81fb      	strh	r3, [r7, #14]

			tmpreg |=result ;
 800077a:	8afa      	ldrh	r2, [r7, #22]
 800077c:	89fb      	ldrh	r3, [r7, #14]
 800077e:	4313      	orrs	r3, r2
 8000780:	82fb      	strh	r3, [r7, #22]

			/* Write to I2Cx CCR */
			I2Cx->CCR = tmpreg;
 8000782:	8afa      	ldrh	r2, [r7, #22]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	61da      	str	r2, [r3, #28]
			/*---------------------------- I2C_TRISE Configuration ------------------------*/
			//			For instance: in Sm mode, the maximum allowed SCL rise time is 1000 ns.
			//			If, in the I2C_CR2 register, the value of FREQ[5:0] bits is equal to 0x08 and TPCLK1 = 125 ns
			//			therefore the TRISE[5:0] bits must be programmed with 09h.

			I2Cx->TRISE = freqrange + 1;
 8000788:	8abb      	ldrh	r3, [r7, #20]
 800078a:	3301      	adds	r3, #1
 800078c:	461a      	mov	r2, r3
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	621a      	str	r2, [r3, #32]
		}

		/*---------------------------- I2Cx CR1 Configuration ------------------------*/

		/* Get the I2Cx CR1 value */
		tmpreg = I2Cx->CR1;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	82fb      	strh	r3, [r7, #22]


		tmpreg |= (uint16_t)(I2C_InitStruct->I2C_ACK_Control | I2C_InitStruct->General_Call_Address_Detection | I2C_InitStruct->I2C_Mode |  I2C_InitStruct->StretchMode );
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	b29a      	uxth	r2, r3
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	69db      	ldr	r3, [r3, #28]
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	4313      	orrs	r3, r2
 80007a6:	b29a      	uxth	r2, r3
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	689b      	ldr	r3, [r3, #8]
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	4313      	orrs	r3, r2
 80007b0:	b29a      	uxth	r2, r3
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	4313      	orrs	r3, r2
 80007ba:	b29a      	uxth	r2, r3
 80007bc:	8afb      	ldrh	r3, [r7, #22]
 80007be:	4313      	orrs	r3, r2
 80007c0:	82fb      	strh	r3, [r7, #22]

		/* Write to I2Cx CR1 */
		I2Cx->CR1 = tmpreg;
 80007c2:	8afa      	ldrh	r2, [r7, #22]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	601a      	str	r2, [r3, #0]

		/*---------------------------- I2Cx OAR1 & I2Cx OAR2 Configuration -----------------------*/
		tmpreg = 0 ;
 80007c8:	2300      	movs	r3, #0
 80007ca:	82fb      	strh	r3, [r7, #22]
		if (I2C_InitStruct->I2C_Slave_Address.Enable_Dual_ADD == 1)
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	899b      	ldrh	r3, [r3, #12]
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d10d      	bne.n	80007f0 <MCAL_I2C_Init+0x144>
		{
			tmpreg   = I2C_OAR2_ENDUAL ;
 80007d4:	2301      	movs	r3, #1
 80007d6:	82fb      	strh	r3, [r7, #22]
			tmpreg  |= I2C_InitStruct->I2C_Slave_Address.Secondary_slave_address << I2C_OAR2_ADD2_Pos ;
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	8a1b      	ldrh	r3, [r3, #16]
 80007dc:	005b      	lsls	r3, r3, #1
 80007de:	b21a      	sxth	r2, r3
 80007e0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80007e4:	4313      	orrs	r3, r2
 80007e6:	b21b      	sxth	r3, r3
 80007e8:	82fb      	strh	r3, [r7, #22]
			I2Cx->OAR2 = tmpreg;
 80007ea:	8afa      	ldrh	r2, [r7, #22]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	60da      	str	r2, [r3, #12]
		}

		tmpreg = 0 ;
 80007f0:	2300      	movs	r3, #0
 80007f2:	82fb      	strh	r3, [r7, #22]
		tmpreg  |= I2C_InitStruct->I2C_Slave_Address.Primary_slave_address << 1 ;
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	89db      	ldrh	r3, [r3, #14]
 80007f8:	005b      	lsls	r3, r3, #1
 80007fa:	b21a      	sxth	r2, r3
 80007fc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000800:	4313      	orrs	r3, r2
 8000802:	b21b      	sxth	r3, r3
 8000804:	82fb      	strh	r3, [r7, #22]
		tmpreg  |= I2C_InitStruct->I2C_Slave_Address.I2C_Addressing_Slave_mode ;
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	695b      	ldr	r3, [r3, #20]
 800080a:	b29a      	uxth	r2, r3
 800080c:	8afb      	ldrh	r3, [r7, #22]
 800080e:	4313      	orrs	r3, r2
 8000810:	82fb      	strh	r3, [r7, #22]
		I2Cx->OAR1 = tmpreg;
 8000812:	8afa      	ldrh	r2, [r7, #22]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	609a      	str	r2, [r3, #8]
		//SMBUS Not Supported
	}


	//Interrupt Mode (Slave Mode) //Check callback pointer != NULL
	if (I2C_InitStruct->P_Slave_Event_CallBack != NULL) // that Enable SLAVE IRQ States Mode
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	6a1b      	ldr	r3, [r3, #32]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d038      	beq.n	8000892 <MCAL_I2C_Init+0x1e6>
	{
		//Enable IRQ
		I2Cx->CR2 |= ( I2C_CR2_ITERREN);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	605a      	str	r2, [r3, #4]
		I2Cx->CR2 |= ( I2C_CR2_ITEVTEN) ;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	605a      	str	r2, [r3, #4]
		I2Cx->CR2 |= ( I2C_CR2_ITBUFEN) ;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	605a      	str	r2, [r3, #4]
		if (I2Cx == I2C1)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	4a19      	ldr	r2, [pc, #100]	; (80008ac <MCAL_I2C_Init+0x200>)
 8000848:	4293      	cmp	r3, r2
 800084a:	d10c      	bne.n	8000866 <MCAL_I2C_Init+0x1ba>
		{
			NVIC_IRQ31_I2C1_EV_Enable ;
 800084c:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <MCAL_I2C_Init+0x214>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a1b      	ldr	r2, [pc, #108]	; (80008c0 <MCAL_I2C_Init+0x214>)
 8000852:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000856:	6013      	str	r3, [r2, #0]
			NVIC_IRQ32_I2C1_ER_Enable ;
 8000858:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <MCAL_I2C_Init+0x218>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a19      	ldr	r2, [pc, #100]	; (80008c4 <MCAL_I2C_Init+0x218>)
 800085e:	f043 0301 	orr.w	r3, r3, #1
 8000862:	6013      	str	r3, [r2, #0]
 8000864:	e00f      	b.n	8000886 <MCAL_I2C_Init+0x1da>

		}else if (I2Cx == I2C2)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4a17      	ldr	r2, [pc, #92]	; (80008c8 <MCAL_I2C_Init+0x21c>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d10b      	bne.n	8000886 <MCAL_I2C_Init+0x1da>
		{
			NVIC_IRQ33_I2C2_EV_Enable ;
 800086e:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <MCAL_I2C_Init+0x218>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a14      	ldr	r2, [pc, #80]	; (80008c4 <MCAL_I2C_Init+0x218>)
 8000874:	f043 0302 	orr.w	r3, r3, #2
 8000878:	6013      	str	r3, [r2, #0]
			NVIC_IRQ34_I2C2_ER_Enable ;
 800087a:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <MCAL_I2C_Init+0x218>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a11      	ldr	r2, [pc, #68]	; (80008c4 <MCAL_I2C_Init+0x218>)
 8000880:	f043 0304 	orr.w	r3, r3, #4
 8000884:	6013      	str	r3, [r2, #0]
		}

		I2Cx->SR1 = 0 ;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2200      	movs	r2, #0
 800088a:	615a      	str	r2, [r3, #20]
		I2Cx->SR2 = 0 ;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2200      	movs	r2, #0
 8000890:	619a      	str	r2, [r3, #24]
	}

	/* Enable the selected I2C peripheral */
	I2Cx->CR1 |=  I2C_CR1_PE;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f043 0201 	orr.w	r2, r3, #1
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	601a      	str	r2, [r3, #0]

}
 800089e:	bf00      	nop
 80008a0:	3718      	adds	r7, #24
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bdb0      	pop	{r4, r5, r7, pc}
 80008a6:	bf00      	nop
 80008a8:	007a1200 	.word	0x007a1200
 80008ac:	40005400 	.word	0x40005400
 80008b0:	2000001c 	.word	0x2000001c
 80008b4:	40021000 	.word	0x40021000
 80008b8:	431bde83 	.word	0x431bde83
 80008bc:	000186a0 	.word	0x000186a0
 80008c0:	e000e100 	.word	0xe000e100
 80008c4:	e000e104 	.word	0xe000e104
 80008c8:	40005800 	.word	0x40005800

080008cc <MCAL_I2C_GPIO_Set_Pins>:

}


void MCAL_I2C_GPIO_Set_Pins (I2C_TypeDef* I2Cx)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
	GPIO_PINConfig_t PinCfg ;

	if (I2Cx == I2C1)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4a1f      	ldr	r2, [pc, #124]	; (8000954 <MCAL_I2C_GPIO_Set_Pins+0x88>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d118      	bne.n	800090e <MCAL_I2C_GPIO_Set_Pins+0x42>
	{
		//		PB6 : I2C1_SCL
		//		PB7 : I2C1_SDA

		PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 80008dc:	2340      	movs	r3, #64	; 0x40
 80008de:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 80008e0:	2307      	movs	r3, #7
 80008e2:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80008e4:	2301      	movs	r3, #1
 80008e6:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 80008e8:	f107 030c 	add.w	r3, r7, #12
 80008ec:	4619      	mov	r1, r3
 80008ee:	481a      	ldr	r0, [pc, #104]	; (8000958 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 80008f0:	f7ff fe4f 	bl	8000592 <MCAL_GPIO_Init>

		PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 80008f4:	2380      	movs	r3, #128	; 0x80
 80008f6:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 80008f8:	2307      	movs	r3, #7
 80008fa:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80008fc:	2301      	movs	r3, #1
 80008fe:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	4619      	mov	r1, r3
 8000906:	4814      	ldr	r0, [pc, #80]	; (8000958 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 8000908:	f7ff fe43 	bl	8000592 <MCAL_GPIO_Init>


	}


}
 800090c:	e01d      	b.n	800094a <MCAL_I2C_GPIO_Set_Pins+0x7e>
	}else if (I2Cx == I2C2)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4a12      	ldr	r2, [pc, #72]	; (800095c <MCAL_I2C_GPIO_Set_Pins+0x90>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d119      	bne.n	800094a <MCAL_I2C_GPIO_Set_Pins+0x7e>
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8000916:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800091a:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 800091c:	2307      	movs	r3, #7
 800091e:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000920:	2301      	movs	r3, #1
 8000922:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000924:	f107 030c 	add.w	r3, r7, #12
 8000928:	4619      	mov	r1, r3
 800092a:	480b      	ldr	r0, [pc, #44]	; (8000958 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 800092c:	f7ff fe31 	bl	8000592 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 8000930:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000934:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 8000936:	2307      	movs	r3, #7
 8000938:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800093a:	2301      	movs	r3, #1
 800093c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 800093e:	f107 030c 	add.w	r3, r7, #12
 8000942:	4619      	mov	r1, r3
 8000944:	4804      	ldr	r0, [pc, #16]	; (8000958 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 8000946:	f7ff fe24 	bl	8000592 <MCAL_GPIO_Init>
}
 800094a:	bf00      	nop
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40005400 	.word	0x40005400
 8000958:	40010c00 	.word	0x40010c00
 800095c:	40005800 	.word	0x40005800

08000960 <MCAL_I2C_Master_RX>:


void MCAL_I2C_Master_RX (I2C_TypeDef* I2Cx ,uint16_t devAddr, uint8_t* dataOut, uint32_t dataLen, Stop_Condition Stop , Repeated_Start start)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	607a      	str	r2, [r7, #4]
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	460b      	mov	r3, r1
 800096e:	817b      	strh	r3, [r7, #10]

	uint8_t index =    I2Cx == I2C1 ? I2C1_INDEX: I2C2_INDEX ;
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	4a33      	ldr	r2, [pc, #204]	; (8000a40 <MCAL_I2C_Master_RX+0xe0>)
 8000974:	4293      	cmp	r3, r2
 8000976:	bf14      	ite	ne
 8000978:	2301      	movne	r3, #1
 800097a:	2300      	moveq	r3, #0
 800097c:	b2db      	uxtb	r3, r3
 800097e:	74fb      	strb	r3, [r7, #19]


	int i = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]

	//	1.Set the START bit in the I2C_CR1 register to generate a Start condition
	I2C_GenerateSTART(I2Cx,ENABLE, start);
 8000984:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000988:	461a      	mov	r2, r3
 800098a:	2101      	movs	r1, #1
 800098c:	68f8      	ldr	r0, [r7, #12]
 800098e:	f000 f8b1 	bl	8000af4 <I2C_GenerateSTART>

	// 2. wait for EV5
	//	EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	while(!I2C_GetFlagStatus(I2Cx, EV5));
 8000992:	bf00      	nop
 8000994:	2101      	movs	r1, #1
 8000996:	68f8      	ldr	r0, [r7, #12]
 8000998:	f000 f90e 	bl	8000bb8 <I2C_GetFlagStatus>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d0f8      	beq.n	8000994 <MCAL_I2C_Master_RX+0x34>


	//3-Send Address
	I2C_SendAddress(I2Cx, devAddr , I2C_Direction_Recieve); // address
 80009a2:	897b      	ldrh	r3, [r7, #10]
 80009a4:	2201      	movs	r2, #1
 80009a6:	4619      	mov	r1, r3
 80009a8:	68f8      	ldr	r0, [r7, #12]
 80009aa:	f000 f8ca 	bl	8000b42 <I2C_SendAddress>

	//3. wait EV6
	//	EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	while(!I2C_GetFlagStatus(I2Cx, EV6));
 80009ae:	bf00      	nop
 80009b0:	2102      	movs	r1, #2
 80009b2:	68f8      	ldr	r0, [r7, #12]
 80009b4:	f000 f900 	bl	8000bb8 <I2C_GetFlagStatus>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d0f8      	beq.n	80009b0 <MCAL_I2C_Master_RX+0x50>

	I2C_AcknowledgeConfig(I2Cx,ENABLE);
 80009be:	2101      	movs	r1, #1
 80009c0:	68f8      	ldr	r0, [r7, #12]
 80009c2:	f000 fa6d 	bl	8000ea0 <I2C_AcknowledgeConfig>


	if(dataLen )
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d01c      	beq.n	8000a06 <MCAL_I2C_Master_RX+0xa6>
	{
		//read the data until Len becomes zero
			for (  i = dataLen ; i > 1 ; i--)
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	e012      	b.n	80009f8 <MCAL_I2C_Master_RX+0x98>
			{
				//wait until  RXNE becomes 1
				while(!I2C_GetFlagStatus(I2Cx, EV7));
 80009d2:	bf00      	nop
 80009d4:	2105      	movs	r1, #5
 80009d6:	68f8      	ldr	r0, [r7, #12]
 80009d8:	f000 f8ee 	bl	8000bb8 <I2C_GetFlagStatus>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d0f8      	beq.n	80009d4 <MCAL_I2C_Master_RX+0x74>
				//read the data from data register in to buffer
				*dataOut = I2Cx->DR;
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	691b      	ldr	r3, [r3, #16]
 80009e6:	b2da      	uxtb	r2, r3
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	701a      	strb	r2, [r3, #0]
				//increment the buffer address
				dataOut++;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	3301      	adds	r3, #1
 80009f0:	607b      	str	r3, [r7, #4]
			for (  i = dataLen ; i > 1 ; i--)
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	3b01      	subs	r3, #1
 80009f6:	617b      	str	r3, [r7, #20]
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	dce9      	bgt.n	80009d2 <MCAL_I2C_Master_RX+0x72>
			}

			I2C_AcknowledgeConfig(I2Cx,DISABLE);
 80009fe:	2100      	movs	r1, #0
 8000a00:	68f8      	ldr	r0, [r7, #12]
 8000a02:	f000 fa4d 	bl	8000ea0 <I2C_AcknowledgeConfig>

	}

	if (Stop == With_Stop){
 8000a06:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d103      	bne.n	8000a16 <MCAL_I2C_Master_RX+0xb6>
		//	7. Send Stop Condition
		I2C_GenerateSTOP(I2Cx, ENABLE);
 8000a0e:	2101      	movs	r1, #1
 8000a10:	68f8      	ldr	r0, [r7, #12]
 8000a12:	f000 f8b5 	bl	8000b80 <I2C_GenerateSTOP>
	}

	//re-enable ACKing
	if(Global_I2C_Config[index].I2C_ACK_Control == I2C_Ack_Enable)
 8000a16:	7cfa      	ldrb	r2, [r7, #19]
 8000a18:	490a      	ldr	r1, [pc, #40]	; (8000a44 <MCAL_I2C_Master_RX+0xe4>)
 8000a1a:	4613      	mov	r3, r2
 8000a1c:	00db      	lsls	r3, r3, #3
 8000a1e:	4413      	add	r3, r2
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	440b      	add	r3, r1
 8000a24:	3318      	adds	r3, #24
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a2c:	d103      	bne.n	8000a36 <MCAL_I2C_Master_RX+0xd6>
	{
		I2C_AcknowledgeConfig(I2Cx,ENABLE);
 8000a2e:	2101      	movs	r1, #1
 8000a30:	68f8      	ldr	r0, [r7, #12]
 8000a32:	f000 fa35 	bl	8000ea0 <I2C_AcknowledgeConfig>
	}


}
 8000a36:	bf00      	nop
 8000a38:	3718      	adds	r7, #24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40005400 	.word	0x40005400
 8000a44:	2000001c 	.word	0x2000001c

08000a48 <MCAL_I2C_Master_TX>:
void MCAL_I2C_Master_TX (I2C_TypeDef* I2Cx, uint16_t devAddr, uint8_t* dataOut, uint32_t dataLen , Stop_Condition stop , Repeated_Start start)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	607a      	str	r2, [r7, #4]
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	460b      	mov	r3, r1
 8000a56:	817b      	strh	r3, [r7, #10]
	int i = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	617b      	str	r3, [r7, #20]
	//support timeout (configure timer working for specific duration rise interrupt
	//timer_interrupt(){ flag=1 }
	//so any code exist in while (check flag || Any polling conditions )

	//	1.Set the START bit in the I2C_CR1 register to generate a Start condition
	I2C_GenerateSTART(I2Cx,ENABLE, start);
 8000a5c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000a60:	461a      	mov	r2, r3
 8000a62:	2101      	movs	r1, #1
 8000a64:	68f8      	ldr	r0, [r7, #12]
 8000a66:	f000 f845 	bl	8000af4 <I2C_GenerateSTART>

	// 2. wait for EV5
	//	EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	while(!I2C_GetFlagStatus(I2Cx, EV5));
 8000a6a:	bf00      	nop
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	68f8      	ldr	r0, [r7, #12]
 8000a70:	f000 f8a2 	bl	8000bb8 <I2C_GetFlagStatus>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d0f8      	beq.n	8000a6c <MCAL_I2C_Master_TX+0x24>


	//3-Send Address
	I2C_SendAddress(I2Cx, devAddr , I2C_Direction_Transmitter); // address
 8000a7a:	897b      	ldrh	r3, [r7, #10]
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	4619      	mov	r1, r3
 8000a80:	68f8      	ldr	r0, [r7, #12]
 8000a82:	f000 f85e 	bl	8000b42 <I2C_SendAddress>

	//3. wait EV6
	//	EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	while(!I2C_GetFlagStatus(I2Cx, EV6));
 8000a86:	bf00      	nop
 8000a88:	2102      	movs	r1, #2
 8000a8a:	68f8      	ldr	r0, [r7, #12]
 8000a8c:	f000 f894 	bl	8000bb8 <I2C_GetFlagStatus>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d0f8      	beq.n	8000a88 <MCAL_I2C_Master_TX+0x40>

	//4. /* TRA, BUSY, MSL, TXE flags */
	while(!I2C_GetFlagStatus(I2Cx, MASTER_BYTE_TRANSMITTING));
 8000a96:	bf00      	nop
 8000a98:	4915      	ldr	r1, [pc, #84]	; (8000af0 <MCAL_I2C_Master_TX+0xa8>)
 8000a9a:	68f8      	ldr	r0, [r7, #12]
 8000a9c:	f000 f88c 	bl	8000bb8 <I2C_GetFlagStatus>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d0f8      	beq.n	8000a98 <MCAL_I2C_Master_TX+0x50>

	for( i = 0; i < dataLen ; i++)
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]
 8000aaa:	e011      	b.n	8000ad0 <MCAL_I2C_Master_TX+0x88>
	{
		/* Write in the DR register the data to be sent */
		I2Cx->DR = dataOut[i];
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	611a      	str	r2, [r3, #16]
		//5. wait EV8
		//EV8: TxE=1, shift register not empty, d . ata register empty, cleared by writing DR register
		while(!I2C_GetFlagStatus(I2Cx, EV8));
 8000aba:	bf00      	nop
 8000abc:	2103      	movs	r1, #3
 8000abe:	68f8      	ldr	r0, [r7, #12]
 8000ac0:	f000 f87a 	bl	8000bb8 <I2C_GetFlagStatus>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d0f8      	beq.n	8000abc <MCAL_I2C_Master_TX+0x74>
	for( i = 0; i < dataLen ; i++)
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	3301      	adds	r3, #1
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	683a      	ldr	r2, [r7, #0]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d8e9      	bhi.n	8000aac <MCAL_I2C_Master_TX+0x64>

	//6. wait EV8_2
	//EV8_2: TxE=1, BTF = 1, Program Stop request. TxE and BTF are cleared by hardware by the Stop condition
	//	while(!I2C_GetFlagStatus(I2Cx, EV8_2));

	if (stop == With_Stop){
 8000ad8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d103      	bne.n	8000ae8 <MCAL_I2C_Master_TX+0xa0>
		//	7. Send Stop Condition
		I2C_GenerateSTOP(I2Cx, ENABLE);
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	68f8      	ldr	r0, [r7, #12]
 8000ae4:	f000 f84c 	bl	8000b80 <I2C_GenerateSTOP>
	}

}
 8000ae8:	bf00      	nop
 8000aea:	3718      	adds	r7, #24
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	00070080 	.word	0x00070080

08000af4 <I2C_GenerateSTART>:

void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState,Repeated_Start start)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	460b      	mov	r3, r1
 8000afe:	70fb      	strb	r3, [r7, #3]
 8000b00:	4613      	mov	r3, r2
 8000b02:	70bb      	strb	r3, [r7, #2]

	if (start != repeated_start){
 8000b04:	78bb      	ldrb	r3, [r7, #2]
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d007      	beq.n	8000b1a <I2C_GenerateSTART+0x26>
		//Check if the BUS is idle
		while(I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY));
 8000b0a:	bf00      	nop
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f000 f852 	bl	8000bb8 <I2C_GetFlagStatus>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d1f8      	bne.n	8000b0c <I2C_GenerateSTART+0x18>
	//	1: Repeated start generation
	//	In Slave mode:
	//	0: No Start generation
	//	1: Start generation when the bus is free

	if (NewState != DISABLE)
 8000b1a:	78fb      	ldrb	r3, [r7, #3]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d006      	beq.n	8000b2e <I2C_GenerateSTART+0x3a>
	{
		/* Generate a START condition */
		I2Cx->CR1 |= I2C_CR1_START;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	601a      	str	r2, [r3, #0]
	{
		/* Disable the START condition generation */
		I2Cx->CR1 &= ~(I2C_CR1_START) ;
	}

}
 8000b2c:	e005      	b.n	8000b3a <I2C_GenerateSTART+0x46>
		I2Cx->CR1 &= ~(I2C_CR1_START) ;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	601a      	str	r2, [r3, #0]
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <I2C_SendAddress>:

//Supported only 7 bit mode
void I2C_SendAddress(I2C_TypeDef* I2Cx, uint16_t Address , I2C_Direction Direction )
{
 8000b42:	b480      	push	{r7}
 8000b44:	b083      	sub	sp, #12
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
 8000b4a:	460b      	mov	r3, r1
 8000b4c:	807b      	strh	r3, [r7, #2]
 8000b4e:	4613      	mov	r3, r2
 8000b50:	707b      	strb	r3, [r7, #1]

	Address = (Address << 1 ) ;
 8000b52:	887b      	ldrh	r3, [r7, #2]
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	807b      	strh	r3, [r7, #2]

	if (Direction != I2C_Direction_Transmitter)
 8000b58:	787b      	ldrb	r3, [r7, #1]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d004      	beq.n	8000b68 <I2C_SendAddress+0x26>
	{
		/* Set the address bit0 for read */
		Address |= 1<<0;
 8000b5e:	887b      	ldrh	r3, [r7, #2]
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	807b      	strh	r3, [r7, #2]
 8000b66:	e003      	b.n	8000b70 <I2C_SendAddress+0x2e>
	}
	else
	{
		/* Reset the address bit0 for write */
		Address &= ~(1<<0);
 8000b68:	887b      	ldrh	r3, [r7, #2]
 8000b6a:	f023 0301 	bic.w	r3, r3, #1
 8000b6e:	807b      	strh	r3, [r7, #2]
	}

	/* Send the address */
	I2Cx->DR = Address;
 8000b70:	887a      	ldrh	r2, [r7, #2]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	611a      	str	r2, [r3, #16]
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr

08000b80 <I2C_GenerateSTOP>:

void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	460b      	mov	r3, r1
 8000b8a:	70fb      	strb	r3, [r7, #3]
	if (NewState != DISABLE)
 8000b8c:	78fb      	ldrb	r3, [r7, #3]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d006      	beq.n	8000ba0 <I2C_GenerateSTOP+0x20>
	{
		/* Generate a STOP condition */
		I2Cx->CR1 |= I2C_CR1_STOP;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	601a      	str	r2, [r3, #0]
	{
		/* Disable the STOP condition generation */
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
	}

}
 8000b9e:	e005      	b.n	8000bac <I2C_GenerateSTOP+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	601a      	str	r2, [r3, #0]
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bc80      	pop	{r7}
 8000bb4:	4770      	bx	lr
	...

08000bb8 <I2C_GetFlagStatus>:
FlagStatus  I2C_GetFlagStatus(I2C_TypeDef* I2Cx, Status flag)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b089      	sub	sp, #36	; 0x24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]
	volatile uint32_t dummyRead ;
	FlagStatus bitstatus = RESET;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	77fb      	strb	r3, [r7, #31]
	uint32_t flag1 = 0, flag2 = 0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61bb      	str	r3, [r7, #24]
 8000bca:	2300      	movs	r3, #0
 8000bcc:	617b      	str	r3, [r7, #20]
	uint32_t lastevent = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]


	switch (flag)
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	2b04      	cmp	r3, #4
 8000bd6:	d806      	bhi.n	8000be6 <I2C_GetFlagStatus+0x2e>
 8000bd8:	2b03      	cmp	r3, #3
 8000bda:	d248      	bcs.n	8000c6e <I2C_GetFlagStatus+0xb6>
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d014      	beq.n	8000c0a <I2C_GetFlagStatus+0x52>
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d81e      	bhi.n	8000c22 <I2C_GetFlagStatus+0x6a>
 8000be4:	e005      	b.n	8000bf2 <I2C_GetFlagStatus+0x3a>
 8000be6:	2b05      	cmp	r3, #5
 8000be8:	d04d      	beq.n	8000c86 <I2C_GetFlagStatus+0xce>
 8000bea:	4a30      	ldr	r2, [pc, #192]	; (8000cac <I2C_GetFlagStatus+0xf4>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d024      	beq.n	8000c3a <I2C_GetFlagStatus+0x82>
 8000bf0:	e055      	b.n	8000c9e <I2C_GetFlagStatus+0xe6>
		//		– Set by hardware on detection of SDA or SCL low
		//		– cleared by hardware on detection of a Stop condition.
		//		It indicates a communication in progress on the bus. This information is still updated when
		//		the interface is disabled (PE=0).

		if((I2Cx->SR2 ) & (I2C_SR2_BUSY) )
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	699b      	ldr	r3, [r3, #24]
 8000bf6:	f003 0302 	and.w	r3, r3, #2
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d002      	beq.n	8000c04 <I2C_GetFlagStatus+0x4c>
			bitstatus = SET ;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	77fb      	strb	r3, [r7, #31]
		else
			bitstatus = RESET ;
		break ;
 8000c02:	e04c      	b.n	8000c9e <I2C_GetFlagStatus+0xe6>
			bitstatus = RESET ;
 8000c04:	2300      	movs	r3, #0
 8000c06:	77fb      	strb	r3, [r7, #31]
		break ;
 8000c08:	e049      	b.n	8000c9e <I2C_GetFlagStatus+0xe6>
		//		0: No Start condition
		//		1: Start condition generated.
		//		– Set when a Start condition generated.
		//		– Cleared by software by reading the SR1 register followed by writing the DR register, or by
		//		hardware when PE=0
		if((I2Cx->SR1 ) & (I2C_SR1_SB) )
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	695b      	ldr	r3, [r3, #20]
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d002      	beq.n	8000c1c <I2C_GetFlagStatus+0x64>
			bitstatus = SET ;
 8000c16:	2301      	movs	r3, #1
 8000c18:	77fb      	strb	r3, [r7, #31]
		else
			bitstatus = RESET ;
		break ;
 8000c1a:	e040      	b.n	8000c9e <I2C_GetFlagStatus+0xe6>
			bitstatus = RESET ;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	77fb      	strb	r3, [r7, #31]
		break ;
 8000c20:	e03d      	b.n	8000c9e <I2C_GetFlagStatus+0xe6>
	}
	case EV6:
	{
		//		EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
		//Bit 1 ADDR: Address sent (master mode)/matched (slave mode)
		if(((I2Cx->SR1 ) & (I2C_SR1_ADDR) ) )
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	695b      	ldr	r3, [r3, #20]
 8000c26:	f003 0302 	and.w	r3, r3, #2
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d002      	beq.n	8000c34 <I2C_GetFlagStatus+0x7c>
			bitstatus = SET ;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	77fb      	strb	r3, [r7, #31]
		else
			bitstatus = RESET ;

		break ;
 8000c32:	e034      	b.n	8000c9e <I2C_GetFlagStatus+0xe6>
			bitstatus = RESET ;
 8000c34:	2300      	movs	r3, #0
 8000c36:	77fb      	strb	r3, [r7, #31]
		break ;
 8000c38:	e031      	b.n	8000c9e <I2C_GetFlagStatus+0xe6>
	}
	case MASTER_BYTE_TRANSMITTING:
	{
		/* Read the I2Cx status register */
		flag1 = I2Cx->SR1;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	695b      	ldr	r3, [r3, #20]
 8000c3e:	61bb      	str	r3, [r7, #24]
		flag2 = I2Cx->SR2;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	617b      	str	r3, [r7, #20]
		flag2 = flag2 << 16;
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	041b      	lsls	r3, r3, #16
 8000c4a:	617b      	str	r3, [r7, #20]
		/* Get the last event value from I2C status register */
		lastevent = (flag1 | flag2) & ((uint32_t)0x00FFFFFF);
 8000c4c:	69ba      	ldr	r2, [r7, #24]
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000c56:	613b      	str	r3, [r7, #16]
		/* Check whether the last event contains the I2C_EVENT */
		if ((lastevent & flag) == flag)
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	683a      	ldr	r2, [r7, #0]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d102      	bne.n	8000c6a <I2C_GetFlagStatus+0xb2>
		{
			/* SUCCESS: last event is equal to I2C_EVENT */
			bitstatus = SET ;
 8000c64:	2301      	movs	r3, #1
 8000c66:	77fb      	strb	r3, [r7, #31]
 8000c68:	e001      	b.n	8000c6e <I2C_GetFlagStatus+0xb6>
		}
		else
		{
			/* ERROR: last event is different from I2C_EVENT */
			bitstatus = RESET ;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	77fb      	strb	r3, [r7, #31]
	case EV8: //EV8: TxE=1, shift register not empty, d . ata register empty, cleared by writing DR register
	{
		//		Bit 7 TxE: Data register empty (transmitters)
		//		0: Data register not empty
		//		1: Data register empty
		if(((I2Cx->SR1 ) & (I2C_SR1_TXE) ) )
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	695b      	ldr	r3, [r3, #20]
 8000c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d002      	beq.n	8000c80 <I2C_GetFlagStatus+0xc8>
			bitstatus = SET ;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	77fb      	strb	r3, [r7, #31]
		else
			bitstatus = RESET ;
		break ;
 8000c7e:	e00e      	b.n	8000c9e <I2C_GetFlagStatus+0xe6>
			bitstatus = RESET ;
 8000c80:	2300      	movs	r3, #0
 8000c82:	77fb      	strb	r3, [r7, #31]
		break ;
 8000c84:	e00b      	b.n	8000c9e <I2C_GetFlagStatus+0xe6>
		//		0: Data register empty
		//		1: Data register not empty
		//		– Set when data register is not empty in receiver mode. RxNE is not set during address phase.
		//		– Cleared by software reading or writing the DR register or by hardware when PE=0.
		//		RxNE is not set in case of ARLO event.
		if(((I2Cx->SR1 ) & (I2C_SR1_RXNE) ) )
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	695b      	ldr	r3, [r3, #20]
 8000c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d002      	beq.n	8000c98 <I2C_GetFlagStatus+0xe0>
			bitstatus = SET ;
 8000c92:	2301      	movs	r3, #1
 8000c94:	77fb      	strb	r3, [r7, #31]
		else
			bitstatus = RESET ;
		break ;
 8000c96:	e001      	b.n	8000c9c <I2C_GetFlagStatus+0xe4>
			bitstatus = RESET ;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	77fb      	strb	r3, [r7, #31]
		break ;
 8000c9c:	bf00      	nop
	}

	}


	return bitstatus ;
 8000c9e:	7ffb      	ldrb	r3, [r7, #31]

}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3724      	adds	r7, #36	; 0x24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc80      	pop	{r7}
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	00070080 	.word	0x00070080

08000cb0 <I2C1_ER_IRQHandler>:
	return (uint8_t) I2Cx->DR;
}


void I2C1_ER_IRQHandler (void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0

}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr

08000cbc <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler (void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af00      	add	r7, sp, #0
	volatile uint32_t dummy_read = 0 ;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	607b      	str	r3, [r7, #4]
	I2C_TypeDef* I2Cx = I2C1 ;
 8000cc6:	4b37      	ldr	r3, [pc, #220]	; (8000da4 <I2C1_EV_IRQHandler+0xe8>)
 8000cc8:	617b      	str	r3, [r7, #20]
	//Interrupt handling for both master and slave mode of a device
	uint32_t temp1, temp2, temp3;

	temp1   = I2Cx->CR2 & (  I2C_CR2_ITEVTEN) ;
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cd2:	613b      	str	r3, [r7, #16]
	temp2   = I2Cx->CR2 & ( I2C_CR2_ITBUFEN) ;
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cdc:	60fb      	str	r3, [r7, #12]
	temp3  = I2Cx->SR1 & ( I2C_SR1_STOPF);
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	695b      	ldr	r3, [r3, #20]
 8000ce2:	f003 0310 	and.w	r3, r3, #16
 8000ce6:	60bb      	str	r3, [r7, #8]


	// Handle For interrupt generated by STOPF event
		// Note : Stop detection flag is applicable only slave mode
		if(temp1 && temp3)
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d00a      	beq.n	8000d04 <I2C1_EV_IRQHandler+0x48>
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d007      	beq.n	8000d04 <I2C1_EV_IRQHandler+0x48>
		{
			//STOF flag is set
			//Clear the STOPF ( i.e 1) read SR1 2) Write to CR1 )
			I2Cx->CR1 |= 0x0000;
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	601a      	str	r2, [r3, #0]
			Slave_States(I2Cx,I2C_EV_STOP);
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	6978      	ldr	r0, [r7, #20]
 8000d00:	f000 f852 	bl	8000da8 <Slave_States>


		}
		//----------------------------------------------------------
		temp3  = I2Cx->SR1 & (I2C_SR1_ADDR);
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	695b      	ldr	r3, [r3, #20]
 8000d08:	f003 0302 	and.w	r3, r3, #2
 8000d0c:	60bb      	str	r3, [r7, #8]
		// Handle For interrupt generated by ADDR event
		//Note : When master mode : Address is sent
		//		 When Slave mode   : Address matched with own address
		if(temp1 && temp3)
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d012      	beq.n	8000d3a <I2C1_EV_IRQHandler+0x7e>
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d00f      	beq.n	8000d3a <I2C1_EV_IRQHandler+0x7e>
		{
			// interrupt is generated because of ADDR event
			//check for device mode
			if(I2Cx->SR2 & ( I2C_SR2_MSL))
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	699b      	ldr	r3, [r3, #24]
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d109      	bne.n	8000d3a <I2C1_EV_IRQHandler+0x7e>

			}else
			{
				//slave mode
				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = I2Cx->SR1;
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	695b      	ldr	r3, [r3, #20]
 8000d2a:	607b      	str	r3, [r7, #4]
				dummy_read = I2Cx->SR2;
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	607b      	str	r3, [r7, #4]
				Slave_States(I2Cx,I2C_EV_ADDR_Matched);
 8000d32:	2102      	movs	r1, #2
 8000d34:	6978      	ldr	r0, [r7, #20]
 8000d36:	f000 f837 	bl	8000da8 <Slave_States>

			}
		}
		//----------------------------------------------------------

		temp3  = I2Cx->SR1 & ( I2C_SR1_TXE);
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	695b      	ldr	r3, [r3, #20]
 8000d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d42:	60bb      	str	r3, [r7, #8]
		// Handle For interrupt generated by TXE event
		if(temp1 && temp2 && temp3)
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d00f      	beq.n	8000d6a <I2C1_EV_IRQHandler+0xae>
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d00c      	beq.n	8000d6a <I2C1_EV_IRQHandler+0xae>
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d009      	beq.n	8000d6a <I2C1_EV_IRQHandler+0xae>
		{
			//Check for device mode
			if(I2Cx->SR2 & (I2C_SR2_MSL))
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	699b      	ldr	r3, [r3, #24]
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d103      	bne.n	8000d6a <I2C1_EV_IRQHandler+0xae>
			{

			}else
			{
				//slave
				Slave_States(I2Cx,I2C_EV_DATA_REQ);
 8000d62:	2103      	movs	r1, #3
 8000d64:	6978      	ldr	r0, [r7, #20]
 8000d66:	f000 f81f 	bl	8000da8 <Slave_States>
			}
		}

		//----------------------------------------------------------

		temp3  = I2Cx->SR1 & ( I2C_SR1_RXNE);
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	695b      	ldr	r3, [r3, #20]
 8000d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d72:	60bb      	str	r3, [r7, #8]
		// Handle For interrupt generated by 	SB=1, cleared by reading SR1 register followed by writing DR register with Address.
		if(temp1 && temp2 && temp3)
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d00f      	beq.n	8000d9a <I2C1_EV_IRQHandler+0xde>
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d00c      	beq.n	8000d9a <I2C1_EV_IRQHandler+0xde>
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d009      	beq.n	8000d9a <I2C1_EV_IRQHandler+0xde>
		{
			//check device mode .
			if(I2Cx->SR2 & ( I2C_SR2_MSL))
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d103      	bne.n	8000d9a <I2C1_EV_IRQHandler+0xde>
				//The device is master

			}else
			{
				//slave
				Slave_States(I2Cx,I2C_EV_DATA_RCV);
 8000d92:	2104      	movs	r1, #4
 8000d94:	6978      	ldr	r0, [r7, #20]
 8000d96:	f000 f807 	bl	8000da8 <Slave_States>
			}
		}



}
 8000d9a:	bf00      	nop
 8000d9c:	3718      	adds	r7, #24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40005400 	.word	0x40005400

08000da8 <Slave_States>:


void Slave_States (I2C_TypeDef* I2Cx  ,Slave_State state)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	460b      	mov	r3, r1
 8000db2:	70fb      	strb	r3, [r7, #3]
	uint8_t index =    I2Cx == I2C1 ? I2C1_INDEX: I2C2_INDEX ;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4a32      	ldr	r2, [pc, #200]	; (8000e80 <Slave_States+0xd8>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	bf14      	ite	ne
 8000dbc:	2301      	movne	r3, #1
 8000dbe:	2300      	moveq	r3, #0
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	73fb      	strb	r3, [r7, #15]

	switch (state)
 8000dc4:	78fb      	ldrb	r3, [r7, #3]
 8000dc6:	2b04      	cmp	r3, #4
 8000dc8:	d856      	bhi.n	8000e78 <Slave_States+0xd0>
 8000dca:	a201      	add	r2, pc, #4	; (adr r2, 8000dd0 <Slave_States+0x28>)
 8000dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dd0:	08000deb 	.word	0x08000deb
 8000dd4:	08000de5 	.word	0x08000de5
 8000dd8:	08000e0f 	.word	0x08000e0f
 8000ddc:	08000e27 	.word	0x08000e27
 8000de0:	08000e4b 	.word	0x08000e4b
	{

	case I2C_ERROR_AF:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	699b      	ldr	r3, [r3, #24]
		{
			//Slave Shouldn't Send anything else

		}

		break ;
 8000de8:	e046      	b.n	8000e78 <Slave_States+0xd0>
	}

	case I2C_EV_STOP:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	699b      	ldr	r3, [r3, #24]
 8000dee:	f003 0304 	and.w	r3, r3, #4
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d03b      	beq.n	8000e6e <Slave_States+0xc6>
		{
			//Notify APP that the Stop Condition is sent by the master
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_STOP) ;
 8000df6:	7bfa      	ldrb	r2, [r7, #15]
 8000df8:	4922      	ldr	r1, [pc, #136]	; (8000e84 <Slave_States+0xdc>)
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	00db      	lsls	r3, r3, #3
 8000dfe:	4413      	add	r3, r2
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	440b      	add	r3, r1
 8000e04:	3320      	adds	r3, #32
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2000      	movs	r0, #0
 8000e0a:	4798      	blx	r3
		}

		break ;
 8000e0c:	e02f      	b.n	8000e6e <Slave_States+0xc6>
	}

	case I2C_EV_ADDR_Matched:
	{
		//Notify APP that the Stop Condition is sent by the master
		Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_ADDR_Matched) ;
 8000e0e:	7bfa      	ldrb	r2, [r7, #15]
 8000e10:	491c      	ldr	r1, [pc, #112]	; (8000e84 <Slave_States+0xdc>)
 8000e12:	4613      	mov	r3, r2
 8000e14:	00db      	lsls	r3, r3, #3
 8000e16:	4413      	add	r3, r2
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	440b      	add	r3, r1
 8000e1c:	3320      	adds	r3, #32
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2002      	movs	r0, #2
 8000e22:	4798      	blx	r3

		break ;
 8000e24:	e028      	b.n	8000e78 <Slave_States+0xd0>
	}

	case I2C_EV_DATA_REQ:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	699b      	ldr	r3, [r3, #24]
 8000e2a:	f003 0304 	and.w	r3, r3, #4
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d01f      	beq.n	8000e72 <Slave_States+0xca>
		{
			//the APP layer should send the data (MCAL_I2C_SlaveSendData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_REQ) ;
 8000e32:	7bfa      	ldrb	r2, [r7, #15]
 8000e34:	4913      	ldr	r1, [pc, #76]	; (8000e84 <Slave_States+0xdc>)
 8000e36:	4613      	mov	r3, r2
 8000e38:	00db      	lsls	r3, r3, #3
 8000e3a:	4413      	add	r3, r2
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	440b      	add	r3, r1
 8000e40:	3320      	adds	r3, #32
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2003      	movs	r0, #3
 8000e46:	4798      	blx	r3
		}

		break ;
 8000e48:	e013      	b.n	8000e72 <Slave_States+0xca>
	}
	case I2C_EV_DATA_RCV:
	{
		//make sure that the slave is really in receiver mode
		if(!(I2Cx->SR2 & ( I2C_SR2_TRA)))
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	f003 0304 	and.w	r3, r3, #4
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d10f      	bne.n	8000e76 <Slave_States+0xce>
		{
			//the APP layer should read the data (MCAL_I2C_SlaveReceiveData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_RCV) ;
 8000e56:	7bfa      	ldrb	r2, [r7, #15]
 8000e58:	490a      	ldr	r1, [pc, #40]	; (8000e84 <Slave_States+0xdc>)
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	4413      	add	r3, r2
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	440b      	add	r3, r1
 8000e64:	3320      	adds	r3, #32
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2004      	movs	r0, #4
 8000e6a:	4798      	blx	r3
		}

		break ;
 8000e6c:	e003      	b.n	8000e76 <Slave_States+0xce>
		break ;
 8000e6e:	bf00      	nop
 8000e70:	e002      	b.n	8000e78 <Slave_States+0xd0>
		break ;
 8000e72:	bf00      	nop
 8000e74:	e000      	b.n	8000e78 <Slave_States+0xd0>
		break ;
 8000e76:	bf00      	nop
	}
	}

}
 8000e78:	bf00      	nop
 8000e7a:	3710      	adds	r7, #16
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40005400 	.word	0x40005400
 8000e84:	2000001c 	.word	0x2000001c

08000e88 <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler (void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0

}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr

08000e94 <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler (void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0

}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bc80      	pop	{r7}
 8000e9e:	4770      	bx	lr

08000ea0 <I2C_AcknowledgeConfig>:


void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	70fb      	strb	r3, [r7, #3]

	if (NewState != DISABLE)
 8000eac:	78fb      	ldrb	r3, [r7, #3]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d006      	beq.n	8000ec0 <I2C_AcknowledgeConfig+0x20>
	{
		/* Enable the acknowledgement */
		I2Cx->CR1 |= I2C_CR1_ACK;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	601a      	str	r2, [r3, #0]
	else
	{
		/* Disable the acknowledgement */
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
	}
}
 8000ebe:	e005      	b.n	8000ecc <I2C_AcknowledgeConfig+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	601a      	str	r2, [r3, #0]
}
 8000ecc:	bf00      	nop
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bc80      	pop	{r7}
 8000ed4:	4770      	bx	lr
	...

08000ed8 <MCAL_RCC_GetSYS_CLCKFreq>:
 * 							Generic Functions
 * =======================================================================================
 */

uint32_t MCAL_RCC_GetSYS_CLCKFreq(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
	//	Set and cleared by hardware to indicate which clock source is used as system clock.
	//	00: HSI oscillator used as system clock
	//	01: HSE oscillator used as system clock
	//	10: PLL used as system clock
	//	11: Not applicable
	switch  ( (RCC->RCC_CFGR  >> 2  ) & 0b11 )
 8000edc:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <MCAL_RCC_GetSYS_CLCKFreq+0x30>)
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	089b      	lsrs	r3, r3, #2
 8000ee2:	f003 0303 	and.w	r3, r3, #3
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d006      	beq.n	8000ef8 <MCAL_RCC_GetSYS_CLCKFreq+0x20>
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d302      	bcc.n	8000ef4 <MCAL_RCC_GetSYS_CLCKFreq+0x1c>
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d004      	beq.n	8000efc <MCAL_RCC_GetSYS_CLCKFreq+0x24>
 8000ef2:	e005      	b.n	8000f00 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
	{
	case 0:
		return HSI_RC_Clk ;
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <MCAL_RCC_GetSYS_CLCKFreq+0x34>)
 8000ef6:	e003      	b.n	8000f00 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break ;

	case 1:
		//todo need to calculate  it //HSE User Should Specify it
		return HSE_Clock ;
 8000ef8:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 8000efa:	e001      	b.n	8000f00 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break ;

	case 2:
		//todo need to calculate  it PLLCLK and PLLMUL & PLL Source MUX
		return 16000000 ;
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 8000efe:	e7ff      	b.n	8000f00 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break ;
	}
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	007a1200 	.word	0x007a1200
 8000f10:	00f42400 	.word	0x00f42400

08000f14 <MCAL_RCC_GetHCLKFreq>:


uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (MCAL_RCC_GetSYS_CLCKFreq() >> AHBPrescTable[ ( (RCC->RCC_CFGR >> 4 ) & 0xF) ]  ); //the first shift is multiplication}
 8000f18:	f7ff ffde 	bl	8000ed8 <MCAL_RCC_GetSYS_CLCKFreq>
 8000f1c:	4601      	mov	r1, r0
 8000f1e:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <MCAL_RCC_GetHCLKFreq+0x20>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	091b      	lsrs	r3, r3, #4
 8000f24:	f003 030f 	and.w	r3, r3, #15
 8000f28:	4a03      	ldr	r2, [pc, #12]	; (8000f38 <MCAL_RCC_GetHCLKFreq+0x24>)
 8000f2a:	5cd3      	ldrb	r3, [r2, r3]
 8000f2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40021000 	.word	0x40021000
 8000f38:	080011cc 	.word	0x080011cc

08000f3c <MCAL_RCC_GetPCLK1Freq>:

//APB Low speed clock (PCLK1).
//Bits 10:8 PPRE1[2:0]: APB Low-speed prescaler (APB1)
uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[ ( (RCC->RCC_CFGR >> 8 ) & 0b111) ]  ); //the first shift is multiplication
 8000f40:	f7ff ffe8 	bl	8000f14 <MCAL_RCC_GetHCLKFreq>
 8000f44:	4601      	mov	r1, r0
 8000f46:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <MCAL_RCC_GetPCLK1Freq+0x20>)
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	0a1b      	lsrs	r3, r3, #8
 8000f4c:	f003 0307 	and.w	r3, r3, #7
 8000f50:	4a03      	ldr	r2, [pc, #12]	; (8000f60 <MCAL_RCC_GetPCLK1Freq+0x24>)
 8000f52:	5cd3      	ldrb	r3, [r2, r3]
 8000f54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	080011c4 	.word	0x080011c4

08000f64 <SPI1_IRQHandler>:
 * 											IRQ
 * =======================================================================================
 */
//ISR
void SPI1_IRQHandler (void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src ;

	irq_src.TXE = ( ( SPI1->SPI_SR &  (1<<1)) >> 1 );
 8000f6a:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <SPI1_IRQHandler+0x54>)
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	085b      	lsrs	r3, r3, #1
 8000f70:	f003 0301 	and.w	r3, r3, #1
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	793b      	ldrb	r3, [r7, #4]
 8000f78:	f362 0300 	bfi	r3, r2, #0, #1
 8000f7c:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( ( SPI1->SPI_SR &  (1<<0)) >> 0 );
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <SPI1_IRQHandler+0x54>)
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	b2da      	uxtb	r2, r3
 8000f88:	793b      	ldrb	r3, [r7, #4]
 8000f8a:	f362 0341 	bfi	r3, r2, #1, #1
 8000f8e:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( ( SPI1->SPI_SR &  (1<<4)) >> 4 );
 8000f90:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <SPI1_IRQHandler+0x54>)
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	091b      	lsrs	r3, r3, #4
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	793b      	ldrb	r3, [r7, #4]
 8000f9e:	f362 0382 	bfi	r3, r2, #2, #1
 8000fa2:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI1_INDEX]->P_IRQ_CallBack (irq_src) ;
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <SPI1_IRQHandler+0x58>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	7938      	ldrb	r0, [r7, #4]
 8000fac:	4798      	blx	r3

}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40013000 	.word	0x40013000
 8000fbc:	20000064 	.word	0x20000064

08000fc0 <SPI2_IRQHandler>:
void SPI2_IRQHandler (void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src ;
	irq_src.TXE = ( ( SPI2->SPI_SR &  (1<<1)) >> 1 );			//(1<<1)) >> 1   as TXE ,RXNE,ERRI are bitfields that hold 1 or 0 only
 8000fc6:	4b13      	ldr	r3, [pc, #76]	; (8001014 <SPI2_IRQHandler+0x54>)
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	085b      	lsrs	r3, r3, #1
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	793b      	ldrb	r3, [r7, #4]
 8000fd4:	f362 0300 	bfi	r3, r2, #0, #1
 8000fd8:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( ( SPI2->SPI_SR &  (1<<0)) >> 0 );
 8000fda:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <SPI2_IRQHandler+0x54>)
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	793b      	ldrb	r3, [r7, #4]
 8000fe6:	f362 0341 	bfi	r3, r2, #1, #1
 8000fea:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( ( SPI2->SPI_SR &  (1<<4)) >> 4 );
 8000fec:	4b09      	ldr	r3, [pc, #36]	; (8001014 <SPI2_IRQHandler+0x54>)
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	091b      	lsrs	r3, r3, #4
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	793b      	ldrb	r3, [r7, #4]
 8000ffa:	f362 0382 	bfi	r3, r2, #2, #1
 8000ffe:	713b      	strb	r3, [r7, #4]
	Global_SPI_Config[SPI2_INDEX]->P_IRQ_CallBack (irq_src) ;
 8001000:	4b05      	ldr	r3, [pc, #20]	; (8001018 <SPI2_IRQHandler+0x58>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	7938      	ldrb	r0, [r7, #4]
 8001008:	4798      	blx	r3
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40003800 	.word	0x40003800
 8001018:	20000064 	.word	0x20000064

0800101c <USART1_IRQHandler>:
}


//ISR
void USART1_IRQHandler (void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0

	Global_UART_Config[0]->P_IRQ_CallBack () ;
 8001020:	4b02      	ldr	r3, [pc, #8]	; (800102c <USART1_IRQHandler+0x10>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	691b      	ldr	r3, [r3, #16]
 8001026:	4798      	blx	r3

}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}
 800102c:	2000006c 	.word	0x2000006c

08001030 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	Global_UART_Config[1]->P_IRQ_CallBack () ;
 8001034:	4b02      	ldr	r3, [pc, #8]	; (8001040 <USART2_IRQHandler+0x10>)
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	691b      	ldr	r3, [r3, #16]
 800103a:	4798      	blx	r3

}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}
 8001040:	2000006c 	.word	0x2000006c

08001044 <USART3_IRQHandler>:
void USART3_IRQHandler (void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
	Global_UART_Config[2]->P_IRQ_CallBack () ;
 8001048:	4b02      	ldr	r3, [pc, #8]	; (8001054 <USART3_IRQHandler+0x10>)
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	691b      	ldr	r3, [r3, #16]
 800104e:	4798      	blx	r3


}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}
 8001054:	2000006c 	.word	0x2000006c

08001058 <clock_init>:
#include "lcd.h"
#include "keypad.h"
#include "seven_seg.h"


void clock_init(){
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0

	RCC_GPIOA_CLK_EN();
 800105c:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <clock_init+0x30>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	4a09      	ldr	r2, [pc, #36]	; (8001088 <clock_init+0x30>)
 8001062:	f043 0304 	orr.w	r3, r3, #4
 8001066:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8001068:	4b07      	ldr	r3, [pc, #28]	; (8001088 <clock_init+0x30>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	4a06      	ldr	r2, [pc, #24]	; (8001088 <clock_init+0x30>)
 800106e:	f043 0308 	orr.w	r3, r3, #8
 8001072:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 8001074:	4b04      	ldr	r3, [pc, #16]	; (8001088 <clock_init+0x30>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	4a03      	ldr	r2, [pc, #12]	; (8001088 <clock_init+0x30>)
 800107a:	f043 0301 	orr.w	r3, r3, #1
 800107e:	6193      	str	r3, [r2, #24]
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr
 8001088:	40021000 	.word	0x40021000

0800108c <main>:




int main()
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
	clock_init();
 8001092:	f7ff ffe1 	bl	8001058 <clock_init>
	eeprom_init();
 8001096:	f7ff f86b 	bl	8000170 <eeprom_init>



	//test case :1
	uint8_t ch1[]={0x1,0x2,0x3,0x4,0x5,0x6,0x7};
 800109a:	4a1a      	ldr	r2, [pc, #104]	; (8001104 <main+0x78>)
 800109c:	f107 0308 	add.w	r3, r7, #8
 80010a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010a4:	6018      	str	r0, [r3, #0]
 80010a6:	3304      	adds	r3, #4
 80010a8:	8019      	strh	r1, [r3, #0]
 80010aa:	3302      	adds	r3, #2
 80010ac:	0c0a      	lsrs	r2, r1, #16
 80010ae:	701a      	strb	r2, [r3, #0]
	uint8_t ch2[7]={0};
 80010b0:	463b      	mov	r3, r7
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	f8c3 2003 	str.w	r2, [r3, #3]
	eeprom_write_Nbytes(0xAF, ch1, 7);
 80010ba:	f107 0308 	add.w	r3, r7, #8
 80010be:	2207      	movs	r2, #7
 80010c0:	4619      	mov	r1, r3
 80010c2:	20af      	movs	r0, #175	; 0xaf
 80010c4:	f7ff f874 	bl	80001b0 <eeprom_write_Nbytes>
	eeprom_read_byte(0xAF, ch2, 7);
 80010c8:	463b      	mov	r3, r7
 80010ca:	2207      	movs	r2, #7
 80010cc:	4619      	mov	r1, r3
 80010ce:	20af      	movs	r0, #175	; 0xaf
 80010d0:	f7ff f8c0 	bl	8000254 <eeprom_read_byte>

	//test case :2
	ch1[0]=0xA;
 80010d4:	230a      	movs	r3, #10
 80010d6:	723b      	strb	r3, [r7, #8]
	ch1[1]=0xB;
 80010d8:	230b      	movs	r3, #11
 80010da:	727b      	strb	r3, [r7, #9]
	ch1[2]=0xC;
 80010dc:	230c      	movs	r3, #12
 80010de:	72bb      	strb	r3, [r7, #10]
	ch1[3]=0xD;
 80010e0:	230d      	movs	r3, #13
 80010e2:	72fb      	strb	r3, [r7, #11]

	eeprom_write_Nbytes(0xFFF, ch1, 4);
 80010e4:	f107 0308 	add.w	r3, r7, #8
 80010e8:	2204      	movs	r2, #4
 80010ea:	4619      	mov	r1, r3
 80010ec:	f640 70ff 	movw	r0, #4095	; 0xfff
 80010f0:	f7ff f85e 	bl	80001b0 <eeprom_write_Nbytes>
	eeprom_read_byte(0xFFF, ch2, 4);
 80010f4:	463b      	mov	r3, r7
 80010f6:	2204      	movs	r2, #4
 80010f8:	4619      	mov	r1, r3
 80010fa:	f640 70ff 	movw	r0, #4095	; 0xfff
 80010fe:	f7ff f8a9 	bl	8000254 <eeprom_read_byte>

	while(1){
 8001102:	e7fe      	b.n	8001102 <main+0x76>
 8001104:	080011bc 	.word	0x080011bc

08001108 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001108:	480d      	ldr	r0, [pc, #52]	; (8001140 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800110a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800110c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001110:	480c      	ldr	r0, [pc, #48]	; (8001144 <LoopForever+0x6>)
  ldr r1, =_edata
 8001112:	490d      	ldr	r1, [pc, #52]	; (8001148 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001114:	4a0d      	ldr	r2, [pc, #52]	; (800114c <LoopForever+0xe>)
  movs r3, #0
 8001116:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001118:	e002      	b.n	8001120 <LoopCopyDataInit>

0800111a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800111c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800111e:	3304      	adds	r3, #4

08001120 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001120:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001122:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001124:	d3f9      	bcc.n	800111a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001126:	4a0a      	ldr	r2, [pc, #40]	; (8001150 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001128:	4c0a      	ldr	r4, [pc, #40]	; (8001154 <LoopForever+0x16>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800112c:	e001      	b.n	8001132 <LoopFillZerobss>

0800112e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800112e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001130:	3204      	adds	r2, #4

08001132 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001132:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001134:	d3fb      	bcc.n	800112e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001136:	f000 f811 	bl	800115c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800113a:	f7ff ffa7 	bl	800108c <main>

0800113e <LoopForever>:

LoopForever:
  b LoopForever
 800113e:	e7fe      	b.n	800113e <LoopForever>
  ldr   r0, =_estack
 8001140:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8001144:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001148:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800114c:	080011e4 	.word	0x080011e4
  ldr r2, =_sbss
 8001150:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8001154:	200000b4 	.word	0x200000b4

08001158 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001158:	e7fe      	b.n	8001158 <ADC1_2_IRQHandler>
	...

0800115c <__libc_init_array>:
 800115c:	b570      	push	{r4, r5, r6, lr}
 800115e:	2500      	movs	r5, #0
 8001160:	4e0c      	ldr	r6, [pc, #48]	; (8001194 <__libc_init_array+0x38>)
 8001162:	4c0d      	ldr	r4, [pc, #52]	; (8001198 <__libc_init_array+0x3c>)
 8001164:	1ba4      	subs	r4, r4, r6
 8001166:	10a4      	asrs	r4, r4, #2
 8001168:	42a5      	cmp	r5, r4
 800116a:	d109      	bne.n	8001180 <__libc_init_array+0x24>
 800116c:	f000 f81a 	bl	80011a4 <_init>
 8001170:	2500      	movs	r5, #0
 8001172:	4e0a      	ldr	r6, [pc, #40]	; (800119c <__libc_init_array+0x40>)
 8001174:	4c0a      	ldr	r4, [pc, #40]	; (80011a0 <__libc_init_array+0x44>)
 8001176:	1ba4      	subs	r4, r4, r6
 8001178:	10a4      	asrs	r4, r4, #2
 800117a:	42a5      	cmp	r5, r4
 800117c:	d105      	bne.n	800118a <__libc_init_array+0x2e>
 800117e:	bd70      	pop	{r4, r5, r6, pc}
 8001180:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001184:	4798      	blx	r3
 8001186:	3501      	adds	r5, #1
 8001188:	e7ee      	b.n	8001168 <__libc_init_array+0xc>
 800118a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800118e:	4798      	blx	r3
 8001190:	3501      	adds	r5, #1
 8001192:	e7f2      	b.n	800117a <__libc_init_array+0x1e>
 8001194:	080011dc 	.word	0x080011dc
 8001198:	080011dc 	.word	0x080011dc
 800119c:	080011dc 	.word	0x080011dc
 80011a0:	080011e0 	.word	0x080011e0

080011a4 <_init>:
 80011a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011a6:	bf00      	nop
 80011a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011aa:	bc08      	pop	{r3}
 80011ac:	469e      	mov	lr, r3
 80011ae:	4770      	bx	lr

080011b0 <_fini>:
 80011b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011b2:	bf00      	nop
 80011b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011b6:	bc08      	pop	{r3}
 80011b8:	469e      	mov	lr, r3
 80011ba:	4770      	bx	lr
