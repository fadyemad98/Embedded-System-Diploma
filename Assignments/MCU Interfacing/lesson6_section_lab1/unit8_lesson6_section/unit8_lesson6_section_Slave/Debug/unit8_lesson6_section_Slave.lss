
unit8_lesson6_section_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000bc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000110  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000722  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ff  00000000  00000000  00000906  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000362  00000000  00000000  00000f05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  00001268  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036a  00000000  00000000  00001300  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a4  00000000  00000000  0000166a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000170e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <I2C_Set_address>:
	 
}

void I2C_Set_address(u8 address){
	
	TWAR = address;
  6c:	82 b9       	out	0x02, r24	; 2
  6e:	08 95       	ret

00000070 <I2C_Read>:


u8 I2C_Read(unsigned char ACK){
	
	u8 x= 0;
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);	    /* Enable TWI , clear interrupt flag and enable ack*/  
  70:	94 ec       	ldi	r25, 0xC4	; 196
  72:	96 bf       	out	0x36, r25	; 54
	while(!(TWCR & (1<<TWINT)));				/* Wait until TWI finish its current job */
  74:	06 b6       	in	r0, 0x36	; 54
  76:	07 fe       	sbrs	r0, 7
  78:	fd cf       	rjmp	.-6      	; 0x74 <I2C_Read+0x4>
  7a:	01 c0       	rjmp	.+2      	; 0x7e <I2C_Read+0xe>
	while(TWSR !=0x60) {
		x=TWSR;                 /*own SLA + W(0) has been transmitted and ACK has been returned */
  7c:	91 b1       	in	r25, 0x01	; 1
u8 I2C_Read(unsigned char ACK){
	
	u8 x= 0;
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);	    /* Enable TWI , clear interrupt flag and enable ack*/  
	while(!(TWCR & (1<<TWINT)));				/* Wait until TWI finish its current job */
	while(TWSR !=0x60) {
  7e:	91 b1       	in	r25, 0x01	; 1
  80:	90 36       	cpi	r25, 0x60	; 96
  82:	e1 f7       	brne	.-8      	; 0x7c <I2C_Read+0xc>
		x=TWSR;                 /*own SLA + W(0) has been transmitted and ACK has been returned */
	} 
	
	TWCR=(1<<TWEN)|(1<<TWINT)|(ACK<<TWEA);  
  84:	20 e4       	ldi	r18, 0x40	; 64
  86:	82 9f       	mul	r24, r18
  88:	c0 01       	movw	r24, r0
  8a:	11 24       	eor	r1, r1
  8c:	84 68       	ori	r24, 0x84	; 132
  8e:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));
  90:	06 b6       	in	r0, 0x36	; 54
  92:	07 fe       	sbrs	r0, 7
  94:	fd cf       	rjmp	.-6      	; 0x90 <I2C_Read+0x20>
  96:	01 c0       	rjmp	.+2      	; 0x9a <I2C_Read+0x2a>
	while((TWSR)!=0x80){
		x=TWSR;				/*data has been transmitted and ACK has been returned */
  98:	81 b1       	in	r24, 0x01	; 1
		x=TWSR;                 /*own SLA + W(0) has been transmitted and ACK has been returned */
	} 
	
	TWCR=(1<<TWEN)|(1<<TWINT)|(ACK<<TWEA);  
	while(!(TWCR & (1<<TWINT)));
	while((TWSR)!=0x80){
  9a:	81 b1       	in	r24, 0x01	; 1
  9c:	80 38       	cpi	r24, 0x80	; 128
  9e:	e1 f7       	brne	.-8      	; 0x98 <I2C_Read+0x28>
		x=TWSR;				/*data has been transmitted and ACK has been returned */
		}  
	return TWDR;
  a0:	83 b1       	in	r24, 0x03	; 3
  a2:	08 95       	ret

000000a4 <main>:
#include <avr/io.h>
#define F_CPU 8000000UL
#include "i2c.h"

int main(void){	
	DDRA =0xFF; //PORTA is output
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	8a bb       	out	0x1a, r24	; 26
    I2C_Set_address(0b11010000); //enable and set slave address and do not accept general call
  a8:	80 ed       	ldi	r24, 0xD0	; 208
  aa:	0e 94 36 00 	call	0x6c	; 0x6c <I2C_Set_address>
    while (1) 
    {	
		PORTA = I2C_Read(1);// receive byte and sent ack
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	0e 94 38 00 	call	0x70	; 0x70 <I2C_Read>
  b4:	8b bb       	out	0x1b, r24	; 27
  b6:	fb cf       	rjmp	.-10     	; 0xae <main+0xa>

000000b8 <_exit>:
  b8:	f8 94       	cli

000000ba <__stop_program>:
  ba:	ff cf       	rjmp	.-2      	; 0xba <__stop_program>
