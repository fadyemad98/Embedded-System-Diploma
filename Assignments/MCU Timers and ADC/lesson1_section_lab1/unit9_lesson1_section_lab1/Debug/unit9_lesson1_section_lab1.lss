
unit9_lesson1_section_lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000118  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006f7  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ec  00000000  00000000  000008c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000322  00000000  00000000  00000eaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  000011d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000345  00000000  00000000  0000122c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  00001571  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000015b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define LED_PIN			1


int main(void)
{	// set led pin as o/p
	LED_DDR	|= (1<<LED_PIN);
  6c:	84 b3       	in	r24, 0x14	; 20
  6e:	82 60       	ori	r24, 0x02	; 2
  70:	84 bb       	out	0x14, r24	; 20
	//turn on led 
	LED_PORT |= (1<<LED_PIN);
  72:	85 b3       	in	r24, 0x15	; 21
  74:	82 60       	ori	r24, 0x02	; 2
  76:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  78:	2f ef       	ldi	r18, 0xFF	; 255
  7a:	84 e3       	ldi	r24, 0x34	; 52
  7c:	9c e0       	ldi	r25, 0x0C	; 12
  7e:	21 50       	subi	r18, 0x01	; 1
  80:	80 40       	sbci	r24, 0x00	; 0
  82:	90 40       	sbci	r25, 0x00	; 0
  84:	e1 f7       	brne	.-8      	; 0x7e <main+0x12>
  86:	00 c0       	rjmp	.+0      	; 0x88 <main+0x1c>
  88:	00 00       	nop
	_delay_ms(500);
	
    while (1) 
    {
		//enable wdt
		WDT_ON();
  8a:	0e 94 5c 00 	call	0xb8	; 0xb8 <WDT_ON>
		LED_PORT ^= (1<<LED_PIN);
  8e:	95 b3       	in	r25, 0x15	; 21
  90:	82 e0       	ldi	r24, 0x02	; 2
  92:	89 27       	eor	r24, r25
  94:	85 bb       	out	0x15, r24	; 21
  96:	2f ef       	ldi	r18, 0xFF	; 255
  98:	80 e7       	ldi	r24, 0x70	; 112
  9a:	92 e0       	ldi	r25, 0x02	; 2
  9c:	21 50       	subi	r18, 0x01	; 1
  9e:	80 40       	sbci	r24, 0x00	; 0
  a0:	90 40       	sbci	r25, 0x00	; 0
  a2:	e1 f7       	brne	.-8      	; 0x9c <main+0x30>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0x3a>
  a6:	00 00       	nop
		_delay_ms(100);
		WDT_OFF();
  a8:	0e 94 57 00 	call	0xae	; 0xae <WDT_OFF>
  ac:	ee cf       	rjmp	.-36     	; 0x8a <main+0x1e>

000000ae <WDT_OFF>:
//By controlling the Watchdog Timer prescaler, the Watchdog Reset interval can be adjusted.
//The Watchdog Timer is also reset when it is disabled and when a Chip Reset occurs.

void WDT_OFF(void){
	// write logic level one to WDE and WDTOE
	WDTCR |= (1<<WDE) | (1<<WDTOE);
  ae:	81 b5       	in	r24, 0x21	; 33
  b0:	88 61       	ori	r24, 0x18	; 24
  b2:	81 bd       	out	0x21, r24	; 33
	// disable WDT
	WDTCR = 0x00 ;
  b4:	11 bc       	out	0x21, r1	; 33
  b6:	08 95       	ret

000000b8 <WDT_ON>:

void WDT_ON(void){
	
	//set prescaler to 1 sec and enable WDT
	//WDTCR &= ~(1<<WDP0);
	WDTCR |= (1<<WDP2)|(1<<WDP1)|(1<<WDE);
  b8:	81 b5       	in	r24, 0x21	; 33
  ba:	8e 60       	ori	r24, 0x0E	; 14
  bc:	81 bd       	out	0x21, r24	; 33
  be:	08 95       	ret

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>
