
unit9_lesson2_section_lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cfa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00000cfa  00000d8e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800080  00800080  00000dae  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000dae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010af  00000000  00000000  00000ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000089c  00000000  00000000  00001f97  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007c3  00000000  00000000  00002833  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  00002ff8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000590  00000000  00000000  00003128  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000073f  00000000  00000000  000036b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00003df7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ef       	ldi	r30, 0xFA	; 250
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e8       	ldi	r26, 0x80	; 128
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 38       	cpi	r26, 0x81	; 129
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 64 01 	call	0x2c8	; 0x2c8 <main>
  8a:	0c 94 7b 06 	jmp	0xcf6	; 0xcf6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_init>:


void ADC_init(ADC_Vref_t VREF,ADC_PRESCALER_t PRESCALER){
	//1. select reference or max voltage
	
	switch (VREF)
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	59 f0       	breq	.+22     	; 0xac <ADC_init+0x1a>
  96:	18 f0       	brcs	.+6      	; 0x9e <ADC_init+0xc>
  98:	82 30       	cpi	r24, 0x02	; 2
  9a:	79 f0       	breq	.+30     	; 0xba <ADC_init+0x28>
  9c:	14 c0       	rjmp	.+40     	; 0xc6 <ADC_init+0x34>
	{
		case VREF_AREF:
		CLR_BIT(ADMUX,REFS0);
  9e:	87 b1       	in	r24, 0x07	; 7
  a0:	8f 7b       	andi	r24, 0xBF	; 191
  a2:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX,REFS1);
  a4:	87 b1       	in	r24, 0x07	; 7
  a6:	8f 77       	andi	r24, 0x7F	; 127
  a8:	87 b9       	out	0x07, r24	; 7
		break;
  aa:	0d c0       	rjmp	.+26     	; 0xc6 <ADC_init+0x34>
		case VREF_AVCC:
		//select  Vref = AVCC
		SET_BIT(ADMUX,REFS0);
  ac:	87 b1       	in	r24, 0x07	; 7
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX,REFS1);
  b2:	87 b1       	in	r24, 0x07	; 7
  b4:	8f 77       	andi	r24, 0x7F	; 127
  b6:	87 b9       	out	0x07, r24	; 7
		break;
  b8:	06 c0       	rjmp	.+12     	; 0xc6 <ADC_init+0x34>
		case VREF_256:
		SET_BIT(ADMUX,REFS0);
  ba:	87 b1       	in	r24, 0x07	; 7
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	87 b9       	out	0x07, r24	; 7
		SET_BIT(ADMUX,REFS1);
  c0:	87 b1       	in	r24, 0x07	; 7
  c2:	80 68       	ori	r24, 0x80	; 128
  c4:	87 b9       	out	0x07, r24	; 7
	}
		
	//2.Select left adjustment or right adjustment
	//this affect result present in ADC data register
	// Right adjustment
	CLR_BIT(ADMUX,ADLAR);
  c6:	87 b1       	in	r24, 0x07	; 7
  c8:	8f 7d       	andi	r24, 0xDF	; 223
  ca:	87 b9       	out	0x07, r24	; 7
	
	//3. Disable auto trigger enable
	//single conversion mode --> each conversion has to start ADC conversion by itself 
	CLR_BIT(ADCSRA,ADATE);
  cc:	86 b1       	in	r24, 0x06	; 6
  ce:	8f 7d       	andi	r24, 0xDF	; 223
  d0:	86 b9       	out	0x06, r24	; 6
	
	//4.Adjust Prescaler
	ADCSRA &= 0xF8; //keep MSB 5 bit value
  d2:	86 b1       	in	r24, 0x06	; 6
  d4:	88 7f       	andi	r24, 0xF8	; 248
  d6:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= PRESCALER;
  d8:	86 b1       	in	r24, 0x06	; 6
  da:	68 2b       	or	r22, r24
  dc:	66 b9       	out	0x06, r22	; 6
	//select Prescaler 128 for 16MHZ = 125 KHZ
	
	
	//5.ADC Enable
	SET_BIT(ADCSRA,ADEN);
  de:	86 b1       	in	r24, 0x06	; 6
  e0:	80 68       	ori	r24, 0x80	; 128
  e2:	86 b9       	out	0x06, r24	; 6
  e4:	08 95       	ret

000000e6 <ADC_GetDigitalVal>:
	
}
u16 ADC_GetDigitalVal(ADC_Channel_t ChannelNumber){
	//1. SELECT CHANNEL NUMBER
	//Clear ADMUX channel bits
	ADMUX &= 0b11100000;  //(0xE0)
  e6:	97 b1       	in	r25, 0x07	; 7
  e8:	90 7e       	andi	r25, 0xE0	; 224
  ea:	97 b9       	out	0x07, r25	; 7
	//select channel
	ADMUX |= ChannelNumber;
  ec:	97 b1       	in	r25, 0x07	; 7
  ee:	89 2b       	or	r24, r25
  f0:	87 b9       	out	0x07, r24	; 7
	
	//2. ADC START CONVERSION
	SET_BIT(ADCSRA, ADSC);
  f2:	86 b1       	in	r24, 0x06	; 6
  f4:	80 64       	ori	r24, 0x40	; 64
  f6:	86 b9       	out	0x06, r24	; 6
	
	//3. WAIT FOR FLAG OF ADC (POLLING)
	while(0 == GET_BIT(ADCSRA,ADIF));
  f8:	34 9b       	sbis	0x06, 4	; 6
  fa:	fe cf       	rjmp	.-4      	; 0xf8 <ADC_GetDigitalVal+0x12>
	
	//4.Clear ADIF flag by setting if using polling (automatic clear in case of interrupt)
	SET_BIT(ADCSRA,ADIF);
  fc:	86 b1       	in	r24, 0x06	; 6
  fe:	80 61       	ori	r24, 0x10	; 16
 100:	86 b9       	out	0x06, r24	; 6

	//5. READ DIGITAL VALUE
	return ADC_u16;
 102:	84 b1       	in	r24, 0x04	; 4
 104:	95 b1       	in	r25, 0x05	; 5
	
}
 106:	08 95       	ret

00000108 <LCD_Command>:
	LCD_Command_Port &= ~(1<<EN);
	_delay_ms(3);
#endif
	
#ifdef FOUR_MODE
	LCD_Data_Port = (LCD_Data_Port & 0x0F) | (cmnd & 0xF0);	/* Sending upper nibble */
 108:	92 b3       	in	r25, 0x12	; 18
 10a:	9f 70       	andi	r25, 0x0F	; 15
 10c:	28 2f       	mov	r18, r24
 10e:	20 7f       	andi	r18, 0xF0	; 240
 110:	92 2b       	or	r25, r18
 112:	92 bb       	out	0x12, r25	; 18
	LCD_Command_Port &= ~ (1<<RS);							/* RS=0, command reg. */
 114:	92 b3       	in	r25, 0x12	; 18
 116:	9e 7f       	andi	r25, 0xFE	; 254
 118:	92 bb       	out	0x12, r25	; 18
	LCD_Command_Port |= (1<<EN);							/* Enable pulse */
 11a:	92 b3       	in	r25, 0x12	; 18
 11c:	94 60       	ori	r25, 0x04	; 4
 11e:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 120:	00 00       	nop
	_delay_us(1);
	LCD_Command_Port &= ~ (1<<EN);
 122:	92 b3       	in	r25, 0x12	; 18
 124:	9b 7f       	andi	r25, 0xFB	; 251
 126:	92 bb       	out	0x12, r25	; 18
 128:	32 e4       	ldi	r19, 0x42	; 66
 12a:	3a 95       	dec	r19
 12c:	f1 f7       	brne	.-4      	; 0x12a <LCD_Command+0x22>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <LCD_Command+0x28>
	_delay_us(200);
	LCD_Data_Port = (LCD_Data_Port & 0x0F) | (cmnd << 4);	/* Sending lower nibble */
 130:	22 b3       	in	r18, 0x12	; 18
 132:	30 e1       	ldi	r19, 0x10	; 16
 134:	83 9f       	mul	r24, r19
 136:	c0 01       	movw	r24, r0
 138:	11 24       	eor	r1, r1
 13a:	92 2f       	mov	r25, r18
 13c:	9f 70       	andi	r25, 0x0F	; 15
 13e:	89 2b       	or	r24, r25
 140:	82 bb       	out	0x12, r24	; 18
	LCD_Command_Port |= (1<<EN);
 142:	82 b3       	in	r24, 0x12	; 18
 144:	84 60       	ori	r24, 0x04	; 4
 146:	82 bb       	out	0x12, r24	; 18
 148:	00 00       	nop
	_delay_us(1);
	LCD_Command_Port &= ~ (1<<EN);
 14a:	82 b3       	in	r24, 0x12	; 18
 14c:	8b 7f       	andi	r24, 0xFB	; 251
 14e:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 150:	83 ef       	ldi	r24, 0xF3	; 243
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <LCD_Command+0x4c>
 158:	00 c0       	rjmp	.+0      	; 0x15a <LCD_Command+0x52>
 15a:	00 00       	nop
 15c:	08 95       	ret

0000015e <LCD_Init>:
	count++;
}

void LCD_Init (void)					/* LCD Initialize function */
{
	LCD_Command_Dir = 0xFF;				/* Make LCD command port direction as o/p */
 15e:	8f ef       	ldi	r24, 0xFF	; 255
 160:	81 bb       	out	0x11, r24	; 17
	LCD_Data_Dir = 0xFF;				/* Make LCD data port direction as o/p */
 162:	81 bb       	out	0x11, r24	; 17
 164:	87 e8       	ldi	r24, 0x87	; 135
 166:	93 e1       	ldi	r25, 0x13	; 19
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <LCD_Init+0xa>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <LCD_Init+0x10>
 16e:	00 00       	nop
#ifdef EIGHT_MODE 
	LCD_Command (eight_bit_mode);							/* Initialization of 16X2 LCD in 8bit mode */
#endif

#ifdef FOUR_MODE
	LCD_Command (four_bit_mode);							/* Initialization of 16X2 LCD in 4bit mode */
 170:	82 e0       	ldi	r24, 0x02	; 2
 172:	0e 94 84 00 	call	0x108	; 0x108 <LCD_Command>
	LCD_Command (four_bit_font);							/* 2 line, 5*7 matrix in 4-bit mode font */
 176:	88 e2       	ldi	r24, 0x28	; 40
 178:	0e 94 84 00 	call	0x108	; 0x108 <LCD_Command>
#endif
	LCD_Command (Display_ON_Cursor_OFF);					/* Display ON Cursor OFF */
 17c:	8c e0       	ldi	r24, 0x0C	; 12
 17e:	0e 94 84 00 	call	0x108	; 0x108 <LCD_Command>
	LCD_Command (Auto_Increment_cursor);					/* Auto Increment cursor */
 182:	86 e0       	ldi	r24, 0x06	; 6
 184:	0e 94 84 00 	call	0x108	; 0x108 <LCD_Command>
	LCD_Command (clear_display);							/* clear display */
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	0e 94 84 00 	call	0x108	; 0x108 <LCD_Command>
	LCD_Command (cursor_at_home_position);					/* cursor at home position */
 18e:	80 e8       	ldi	r24, 0x80	; 128
 190:	0e 94 84 00 	call	0x108	; 0x108 <LCD_Command>
 194:	08 95       	ret

00000196 <LCD_xy>:
	count=pos;
	LCD_String(str);					/* Call LCD string function */
}

void LCD_xy (char row, char pos)	/* Send string to LCD with xy position */
{
 196:	cf 93       	push	r28
 198:	c6 2f       	mov	r28, r22
	if (row == 0 && pos<16)
 19a:	81 11       	cpse	r24, r1
 19c:	08 c0       	rjmp	.+16     	; 0x1ae <LCD_xy+0x18>
 19e:	60 31       	cpi	r22, 0x10	; 16
 1a0:	30 f4       	brcc	.+12     	; 0x1ae <LCD_xy+0x18>
	LCD_Command((pos & 0x0F)|cursor_at_home_position);		/* Command of first row and required position<16 */
 1a2:	86 2f       	mov	r24, r22
 1a4:	8f 70       	andi	r24, 0x0F	; 15
 1a6:	80 68       	ori	r24, 0x80	; 128
 1a8:	0e 94 84 00 	call	0x108	; 0x108 <LCD_Command>
 1ac:	09 c0       	rjmp	.+18     	; 0x1c0 <LCD_xy+0x2a>
	else if (row == 1 && pos<16)
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	39 f4       	brne	.+14     	; 0x1c0 <LCD_xy+0x2a>
 1b2:	c0 31       	cpi	r28, 0x10	; 16
 1b4:	28 f4       	brcc	.+10     	; 0x1c0 <LCD_xy+0x2a>
	LCD_Command((pos & 0x0F)|Go_to_2nd_line);		/* Command of first row and required position<16 */
 1b6:	8c 2f       	mov	r24, r28
 1b8:	8f 70       	andi	r24, 0x0F	; 15
 1ba:	80 6c       	ori	r24, 0xC0	; 192
 1bc:	0e 94 84 00 	call	0x108	; 0x108 <LCD_Command>
	count=pos;
 1c0:	c0 93 80 00 	sts	0x0080, r28	; 0x800080 <__data_end>
}
 1c4:	cf 91       	pop	r28
 1c6:	08 95       	ret

000001c8 <LCD_Char>:
#endif
	
}

void LCD_Char (unsigned char char_data)	/* LCD data write function */
{	if(count == 16){
 1c8:	cf 93       	push	r28
 1ca:	c8 2f       	mov	r28, r24
 1cc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__data_end>
 1d0:	80 31       	cpi	r24, 0x10	; 16
 1d2:	29 f4       	brne	.+10     	; 0x1de <LCD_Char+0x16>
	LCD_xy(1,0);		
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_xy>
 1dc:	04 c0       	rjmp	.+8      	; 0x1e6 <LCD_Char+0x1e>
	}else if(count == 32){
 1de:	80 32       	cpi	r24, 0x20	; 32
 1e0:	11 f4       	brne	.+4      	; 0x1e6 <LCD_Char+0x1e>
		//LCD_Clear();
		count = 0;
 1e2:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__data_end>
	}
	_delay_ms(50);
	#endif

	#ifdef FOUR_MODE
	LCD_Data_Port = (LCD_Data_Port & 0x0F) | (char_data & 0xF0);	/* sending upper nibble */
 1e6:	82 b3       	in	r24, 0x12	; 18
 1e8:	8f 70       	andi	r24, 0x0F	; 15
 1ea:	9c 2f       	mov	r25, r28
 1ec:	90 7f       	andi	r25, 0xF0	; 240
 1ee:	89 2b       	or	r24, r25
 1f0:	82 bb       	out	0x12, r24	; 18
	LCD_Command_Port |= (1<<RS);									/* RS=1 Data reg. */
 1f2:	82 b3       	in	r24, 0x12	; 18
 1f4:	81 60       	ori	r24, 0x01	; 1
 1f6:	82 bb       	out	0x12, r24	; 18
	LCD_Command_Port &= ~(1<<RW);									/* RW=0 write operation */
 1f8:	82 b3       	in	r24, 0x12	; 18
 1fa:	8d 7f       	andi	r24, 0xFD	; 253
 1fc:	82 bb       	out	0x12, r24	; 18
	LCD_Command_Port |= (1<<EN);									/* Enable Pulse */
 1fe:	82 b3       	in	r24, 0x12	; 18
 200:	84 60       	ori	r24, 0x04	; 4
 202:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 204:	00 00       	nop
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
 206:	82 b3       	in	r24, 0x12	; 18
 208:	8b 7f       	andi	r24, 0xFB	; 251
 20a:	82 bb       	out	0x12, r24	; 18
 20c:	32 e4       	ldi	r19, 0x42	; 66
 20e:	3a 95       	dec	r19
 210:	f1 f7       	brne	.-4      	; 0x20e <LCD_Char+0x46>
 212:	00 c0       	rjmp	.+0      	; 0x214 <LCD_Char+0x4c>
	_delay_us(200);
	LCD_Data_Port = (LCD_Data_Port & 0x0F) | (char_data << 4); /* sending lower nibble */
 214:	22 b3       	in	r18, 0x12	; 18
 216:	30 e1       	ldi	r19, 0x10	; 16
 218:	c3 9f       	mul	r28, r19
 21a:	c0 01       	movw	r24, r0
 21c:	11 24       	eor	r1, r1
 21e:	92 2f       	mov	r25, r18
 220:	9f 70       	andi	r25, 0x0F	; 15
 222:	89 2b       	or	r24, r25
 224:	82 bb       	out	0x12, r24	; 18
	LCD_Command_Port |= (1<<EN);		/* Enable Pulse */
 226:	82 b3       	in	r24, 0x12	; 18
 228:	84 60       	ori	r24, 0x04	; 4
 22a:	82 bb       	out	0x12, r24	; 18
 22c:	00 00       	nop
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
 22e:	82 b3       	in	r24, 0x12	; 18
 230:	8b 7f       	andi	r24, 0xFB	; 251
 232:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 234:	83 ef       	ldi	r24, 0xF3	; 243
 236:	91 e0       	ldi	r25, 0x01	; 1
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <LCD_Char+0x70>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <LCD_Char+0x76>
 23e:	00 00       	nop
	if(F_CPU == 8000000UL){
		_delay_ms(100);
	}
	#endif
	
	count++;
 240:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__data_end>
 244:	8f 5f       	subi	r24, 0xFF	; 255
 246:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__data_end>
}
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <LCD_String>:
	LCD_Command (clear_display);							/* clear display */
	LCD_Command (cursor_at_home_position);					/* cursor at home position */
}

void LCD_String (char *str)				/* Send string to LCD function */
{
 24e:	0f 93       	push	r16
 250:	1f 93       	push	r17
 252:	cf 93       	push	r28
 254:	df 93       	push	r29
 256:	8c 01       	movw	r16, r24
	int i;
	for(i=0;str[i]!=0;i++)				/* Send each char of string till the NULL */
 258:	c0 e0       	ldi	r28, 0x00	; 0
 25a:	d0 e0       	ldi	r29, 0x00	; 0
 25c:	09 c0       	rjmp	.+18     	; 0x270 <LCD_String+0x22>
	{
		LCD_Char (str[i]);
 25e:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCD_Char>
 262:	83 ec       	ldi	r24, 0xC3	; 195
 264:	99 e0       	ldi	r25, 0x09	; 9
 266:	01 97       	sbiw	r24, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <LCD_String+0x18>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <LCD_String+0x1e>
 26c:	00 00       	nop
}

void LCD_String (char *str)				/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)				/* Send each char of string till the NULL */
 26e:	21 96       	adiw	r28, 0x01	; 1
 270:	f8 01       	movw	r30, r16
 272:	ec 0f       	add	r30, r28
 274:	fd 1f       	adc	r31, r29
 276:	80 81       	ld	r24, Z
 278:	81 11       	cpse	r24, r1
 27a:	f1 cf       	rjmp	.-30     	; 0x25e <LCD_String+0x10>
	{
		LCD_Char (str[i]);
		_delay_ms(10);
	}
}
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	1f 91       	pop	r17
 282:	0f 91       	pop	r16
 284:	08 95       	ret

00000286 <LCD_String_xy>:

void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD with xy position */
{
 286:	0f 93       	push	r16
 288:	1f 93       	push	r17
 28a:	cf 93       	push	r28
 28c:	c6 2f       	mov	r28, r22
 28e:	8a 01       	movw	r16, r20
	if (row == 0 && pos<16)
 290:	81 11       	cpse	r24, r1
 292:	08 c0       	rjmp	.+16     	; 0x2a4 <LCD_String_xy+0x1e>
 294:	60 31       	cpi	r22, 0x10	; 16
 296:	30 f4       	brcc	.+12     	; 0x2a4 <LCD_String_xy+0x1e>
	LCD_Command((pos & 0x0F)|cursor_at_home_position);		/* Command of first row and required position<16 */
 298:	86 2f       	mov	r24, r22
 29a:	8f 70       	andi	r24, 0x0F	; 15
 29c:	80 68       	ori	r24, 0x80	; 128
 29e:	0e 94 84 00 	call	0x108	; 0x108 <LCD_Command>
 2a2:	09 c0       	rjmp	.+18     	; 0x2b6 <LCD_String_xy+0x30>
	else if (row == 1 && pos<16)
 2a4:	81 30       	cpi	r24, 0x01	; 1
 2a6:	39 f4       	brne	.+14     	; 0x2b6 <LCD_String_xy+0x30>
 2a8:	c0 31       	cpi	r28, 0x10	; 16
 2aa:	28 f4       	brcc	.+10     	; 0x2b6 <LCD_String_xy+0x30>
	LCD_Command((pos & 0x0F)|Go_to_2nd_line);		/* Command of first row and required position<16 */
 2ac:	8c 2f       	mov	r24, r28
 2ae:	8f 70       	andi	r24, 0x0F	; 15
 2b0:	80 6c       	ori	r24, 0xC0	; 192
 2b2:	0e 94 84 00 	call	0x108	; 0x108 <LCD_Command>
	
	count=pos;
 2b6:	c0 93 80 00 	sts	0x0080, r28	; 0x800080 <__data_end>
	LCD_String(str);					/* Call LCD string function */
 2ba:	c8 01       	movw	r24, r16
 2bc:	0e 94 27 01 	call	0x24e	; 0x24e <LCD_String>
}
 2c0:	cf 91       	pop	r28
 2c2:	1f 91       	pop	r17
 2c4:	0f 91       	pop	r16
 2c6:	08 95       	ret

000002c8 <main>:
#include <stdio.h>
#include "BIT_MATH.h"


int main(void)
{	
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29
 2cc:	cd b7       	in	r28, 0x3d	; 61
 2ce:	de b7       	in	r29, 0x3e	; 62
 2d0:	64 97       	sbiw	r28, 0x14	; 20
 2d2:	0f b6       	in	r0, 0x3f	; 63
 2d4:	f8 94       	cli
 2d6:	de bf       	out	0x3e, r29	; 62
 2d8:	0f be       	out	0x3f, r0	; 63
 2da:	cd bf       	out	0x3d, r28	; 61
	u16 Temp, volt ,String1[5],String2[5];
	float temp;
	//set PA1 as input for ADC
	CLR_BIT(DDRA,PA1);
 2dc:	8a b3       	in	r24, 0x1a	; 26
 2de:	8d 7f       	andi	r24, 0xFD	; 253
 2e0:	8a bb       	out	0x1a, r24	; 26
    LCD_Init();
 2e2:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_Init>
	ADC_init(VREF_AVCC,ADC_PRESCALER_128);
 2e6:	67 e0       	ldi	r22, 0x07	; 7
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	0e 94 49 00 	call	0x92	; 0x92 <ADC_init>
	LCD_String("temp =     C");
 2ee:	80 e6       	ldi	r24, 0x60	; 96
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	0e 94 27 01 	call	0x24e	; 0x24e <LCD_String>
	LCD_String_xy(1,0,"volt =       mV");
 2f6:	4d e6       	ldi	r20, 0x6D	; 109
 2f8:	50 e0       	ldi	r21, 0x00	; 0
 2fa:	60 e0       	ldi	r22, 0x00	; 0
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	0e 94 43 01 	call	0x286	; 0x286 <LCD_String_xy>
    while (1) 
    {	
		Temp = ADC_GetDigitalVal(ADC_Channel_1);
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	0e 94 73 00 	call	0xe6	; 0xe6 <ADC_GetDigitalVal>
 308:	8c 01       	movw	r16, r24
		
		temp = Temp*4.88;
 30a:	bc 01       	movw	r22, r24
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	0e 94 87 02 	call	0x50e	; 0x50e <__floatunsisf>
 314:	26 ef       	ldi	r18, 0xF6	; 246
 316:	38 e2       	ldi	r19, 0x28	; 40
 318:	4c e9       	ldi	r20, 0x9C	; 156
 31a:	50 e4       	ldi	r21, 0x40	; 64
 31c:	0e 94 15 03 	call	0x62a	; 0x62a <__mulsf3>
		if(Temp>=10){temp = temp/10.00;}
 320:	0a 30       	cpi	r16, 0x0A	; 10
 322:	11 05       	cpc	r17, r1
 324:	30 f0       	brcs	.+12     	; 0x332 <main+0x6a>
 326:	20 e0       	ldi	r18, 0x00	; 0
 328:	30 e0       	ldi	r19, 0x00	; 0
 32a:	40 e2       	ldi	r20, 0x20	; 32
 32c:	51 e4       	ldi	r21, 0x41	; 65
 32e:	0e 94 df 01 	call	0x3be	; 0x3be <__divsf3>
		
		Temp = (int)temp;
 332:	0e 94 51 02 	call	0x4a2	; 0x4a2 <__fixsfsi>
		sprintf(String1,"%d",Temp);
 336:	7f 93       	push	r23
 338:	6f 93       	push	r22
 33a:	0d e7       	ldi	r16, 0x7D	; 125
 33c:	10 e0       	ldi	r17, 0x00	; 0
 33e:	1f 93       	push	r17
 340:	0f 93       	push	r16
 342:	ce 01       	movw	r24, r28
 344:	01 96       	adiw	r24, 0x01	; 1
 346:	7c 01       	movw	r14, r24
 348:	9f 93       	push	r25
 34a:	8f 93       	push	r24
 34c:	0e 94 91 03 	call	0x722	; 0x722 <sprintf>
		LCD_String_xy(0,8,String1);
 350:	a7 01       	movw	r20, r14
 352:	68 e0       	ldi	r22, 0x08	; 8
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	0e 94 43 01 	call	0x286	; 0x286 <LCD_String_xy>
		volt = ((u32) ADC_GetDigitalVal(ADC_Channel_2)*5000)/1024;
 35a:	82 e0       	ldi	r24, 0x02	; 2
 35c:	0e 94 73 00 	call	0xe6	; 0xe6 <ADC_GetDigitalVal>
 360:	9c 01       	movw	r18, r24
 362:	a8 e8       	ldi	r26, 0x88	; 136
 364:	b3 e1       	ldi	r27, 0x13	; 19
 366:	0e 94 82 03 	call	0x704	; 0x704 <__umulhisi3>
 36a:	dc 01       	movw	r26, r24
 36c:	cb 01       	movw	r24, r22
 36e:	07 2e       	mov	r0, r23
 370:	7a e0       	ldi	r23, 0x0A	; 10
 372:	b6 95       	lsr	r27
 374:	a7 95       	ror	r26
 376:	97 95       	ror	r25
 378:	87 95       	ror	r24
 37a:	7a 95       	dec	r23
 37c:	d1 f7       	brne	.-12     	; 0x372 <main+0xaa>
 37e:	70 2d       	mov	r23, r0
		sprintf(String2,"%d",volt);
 380:	9f 93       	push	r25
 382:	8f 93       	push	r24
 384:	1f 93       	push	r17
 386:	0f 93       	push	r16
 388:	8e 01       	movw	r16, r28
 38a:	05 5f       	subi	r16, 0xF5	; 245
 38c:	1f 4f       	sbci	r17, 0xFF	; 255
 38e:	1f 93       	push	r17
 390:	0f 93       	push	r16
 392:	0e 94 91 03 	call	0x722	; 0x722 <sprintf>
		LCD_String_xy(1,8,String2);
 396:	a8 01       	movw	r20, r16
 398:	68 e0       	ldi	r22, 0x08	; 8
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	0e 94 43 01 	call	0x286	; 0x286 <LCD_String_xy>
 3a0:	9f e9       	ldi	r25, 0x9F	; 159
 3a2:	26 e8       	ldi	r18, 0x86	; 134
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	91 50       	subi	r25, 0x01	; 1
 3a8:	20 40       	sbci	r18, 0x00	; 0
 3aa:	80 40       	sbci	r24, 0x00	; 0
 3ac:	e1 f7       	brne	.-8      	; 0x3a6 <main+0xde>
 3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <main+0xe8>
 3b0:	00 00       	nop
 3b2:	0f b6       	in	r0, 0x3f	; 63
 3b4:	f8 94       	cli
 3b6:	de bf       	out	0x3e, r29	; 62
 3b8:	0f be       	out	0x3f, r0	; 63
 3ba:	cd bf       	out	0x3d, r28	; 61
 3bc:	a2 cf       	rjmp	.-188    	; 0x302 <main+0x3a>

000003be <__divsf3>:
 3be:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__divsf3x>
 3c2:	0c 94 db 02 	jmp	0x5b6	; 0x5b6 <__fp_round>
 3c6:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <__fp_pscB>
 3ca:	58 f0       	brcs	.+22     	; 0x3e2 <__divsf3+0x24>
 3cc:	0e 94 cd 02 	call	0x59a	; 0x59a <__fp_pscA>
 3d0:	40 f0       	brcs	.+16     	; 0x3e2 <__divsf3+0x24>
 3d2:	29 f4       	brne	.+10     	; 0x3de <__divsf3+0x20>
 3d4:	5f 3f       	cpi	r21, 0xFF	; 255
 3d6:	29 f0       	breq	.+10     	; 0x3e2 <__divsf3+0x24>
 3d8:	0c 94 c4 02 	jmp	0x588	; 0x588 <__fp_inf>
 3dc:	51 11       	cpse	r21, r1
 3de:	0c 94 0f 03 	jmp	0x61e	; 0x61e <__fp_szero>
 3e2:	0c 94 ca 02 	jmp	0x594	; 0x594 <__fp_nan>

000003e6 <__divsf3x>:
 3e6:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__fp_split3>
 3ea:	68 f3       	brcs	.-38     	; 0x3c6 <__divsf3+0x8>

000003ec <__divsf3_pse>:
 3ec:	99 23       	and	r25, r25
 3ee:	b1 f3       	breq	.-20     	; 0x3dc <__divsf3+0x1e>
 3f0:	55 23       	and	r21, r21
 3f2:	91 f3       	breq	.-28     	; 0x3d8 <__divsf3+0x1a>
 3f4:	95 1b       	sub	r25, r21
 3f6:	55 0b       	sbc	r21, r21
 3f8:	bb 27       	eor	r27, r27
 3fa:	aa 27       	eor	r26, r26
 3fc:	62 17       	cp	r22, r18
 3fe:	73 07       	cpc	r23, r19
 400:	84 07       	cpc	r24, r20
 402:	38 f0       	brcs	.+14     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 404:	9f 5f       	subi	r25, 0xFF	; 255
 406:	5f 4f       	sbci	r21, 0xFF	; 255
 408:	22 0f       	add	r18, r18
 40a:	33 1f       	adc	r19, r19
 40c:	44 1f       	adc	r20, r20
 40e:	aa 1f       	adc	r26, r26
 410:	a9 f3       	breq	.-22     	; 0x3fc <__divsf3_pse+0x10>
 412:	35 d0       	rcall	.+106    	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 414:	0e 2e       	mov	r0, r30
 416:	3a f0       	brmi	.+14     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 418:	e0 e8       	ldi	r30, 0x80	; 128
 41a:	32 d0       	rcall	.+100    	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 41c:	91 50       	subi	r25, 0x01	; 1
 41e:	50 40       	sbci	r21, 0x00	; 0
 420:	e6 95       	lsr	r30
 422:	00 1c       	adc	r0, r0
 424:	ca f7       	brpl	.-14     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 426:	2b d0       	rcall	.+86     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 428:	fe 2f       	mov	r31, r30
 42a:	29 d0       	rcall	.+82     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 42c:	66 0f       	add	r22, r22
 42e:	77 1f       	adc	r23, r23
 430:	88 1f       	adc	r24, r24
 432:	bb 1f       	adc	r27, r27
 434:	26 17       	cp	r18, r22
 436:	37 07       	cpc	r19, r23
 438:	48 07       	cpc	r20, r24
 43a:	ab 07       	cpc	r26, r27
 43c:	b0 e8       	ldi	r27, 0x80	; 128
 43e:	09 f0       	breq	.+2      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 440:	bb 0b       	sbc	r27, r27
 442:	80 2d       	mov	r24, r0
 444:	bf 01       	movw	r22, r30
 446:	ff 27       	eor	r31, r31
 448:	93 58       	subi	r25, 0x83	; 131
 44a:	5f 4f       	sbci	r21, 0xFF	; 255
 44c:	3a f0       	brmi	.+14     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 44e:	9e 3f       	cpi	r25, 0xFE	; 254
 450:	51 05       	cpc	r21, r1
 452:	78 f0       	brcs	.+30     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 454:	0c 94 c4 02 	jmp	0x588	; 0x588 <__fp_inf>
 458:	0c 94 0f 03 	jmp	0x61e	; 0x61e <__fp_szero>
 45c:	5f 3f       	cpi	r21, 0xFF	; 255
 45e:	e4 f3       	brlt	.-8      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 460:	98 3e       	cpi	r25, 0xE8	; 232
 462:	d4 f3       	brlt	.-12     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 464:	86 95       	lsr	r24
 466:	77 95       	ror	r23
 468:	67 95       	ror	r22
 46a:	b7 95       	ror	r27
 46c:	f7 95       	ror	r31
 46e:	9f 5f       	subi	r25, 0xFF	; 255
 470:	c9 f7       	brne	.-14     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 472:	88 0f       	add	r24, r24
 474:	91 1d       	adc	r25, r1
 476:	96 95       	lsr	r25
 478:	87 95       	ror	r24
 47a:	97 f9       	bld	r25, 7
 47c:	08 95       	ret
 47e:	e1 e0       	ldi	r30, 0x01	; 1
 480:	66 0f       	add	r22, r22
 482:	77 1f       	adc	r23, r23
 484:	88 1f       	adc	r24, r24
 486:	bb 1f       	adc	r27, r27
 488:	62 17       	cp	r22, r18
 48a:	73 07       	cpc	r23, r19
 48c:	84 07       	cpc	r24, r20
 48e:	ba 07       	cpc	r27, r26
 490:	20 f0       	brcs	.+8      	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 492:	62 1b       	sub	r22, r18
 494:	73 0b       	sbc	r23, r19
 496:	84 0b       	sbc	r24, r20
 498:	ba 0b       	sbc	r27, r26
 49a:	ee 1f       	adc	r30, r30
 49c:	88 f7       	brcc	.-30     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 49e:	e0 95       	com	r30
 4a0:	08 95       	ret

000004a2 <__fixsfsi>:
 4a2:	0e 94 58 02 	call	0x4b0	; 0x4b0 <__fixunssfsi>
 4a6:	68 94       	set
 4a8:	b1 11       	cpse	r27, r1
 4aa:	0c 94 0f 03 	jmp	0x61e	; 0x61e <__fp_szero>
 4ae:	08 95       	ret

000004b0 <__fixunssfsi>:
 4b0:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <__fp_splitA>
 4b4:	88 f0       	brcs	.+34     	; 0x4d8 <__fixunssfsi+0x28>
 4b6:	9f 57       	subi	r25, 0x7F	; 127
 4b8:	98 f0       	brcs	.+38     	; 0x4e0 <__fixunssfsi+0x30>
 4ba:	b9 2f       	mov	r27, r25
 4bc:	99 27       	eor	r25, r25
 4be:	b7 51       	subi	r27, 0x17	; 23
 4c0:	b0 f0       	brcs	.+44     	; 0x4ee <__fixunssfsi+0x3e>
 4c2:	e1 f0       	breq	.+56     	; 0x4fc <__fixunssfsi+0x4c>
 4c4:	66 0f       	add	r22, r22
 4c6:	77 1f       	adc	r23, r23
 4c8:	88 1f       	adc	r24, r24
 4ca:	99 1f       	adc	r25, r25
 4cc:	1a f0       	brmi	.+6      	; 0x4d4 <__fixunssfsi+0x24>
 4ce:	ba 95       	dec	r27
 4d0:	c9 f7       	brne	.-14     	; 0x4c4 <__fixunssfsi+0x14>
 4d2:	14 c0       	rjmp	.+40     	; 0x4fc <__fixunssfsi+0x4c>
 4d4:	b1 30       	cpi	r27, 0x01	; 1
 4d6:	91 f0       	breq	.+36     	; 0x4fc <__fixunssfsi+0x4c>
 4d8:	0e 94 0e 03 	call	0x61c	; 0x61c <__fp_zero>
 4dc:	b1 e0       	ldi	r27, 0x01	; 1
 4de:	08 95       	ret
 4e0:	0c 94 0e 03 	jmp	0x61c	; 0x61c <__fp_zero>
 4e4:	67 2f       	mov	r22, r23
 4e6:	78 2f       	mov	r23, r24
 4e8:	88 27       	eor	r24, r24
 4ea:	b8 5f       	subi	r27, 0xF8	; 248
 4ec:	39 f0       	breq	.+14     	; 0x4fc <__fixunssfsi+0x4c>
 4ee:	b9 3f       	cpi	r27, 0xF9	; 249
 4f0:	cc f3       	brlt	.-14     	; 0x4e4 <__fixunssfsi+0x34>
 4f2:	86 95       	lsr	r24
 4f4:	77 95       	ror	r23
 4f6:	67 95       	ror	r22
 4f8:	b3 95       	inc	r27
 4fa:	d9 f7       	brne	.-10     	; 0x4f2 <__fixunssfsi+0x42>
 4fc:	3e f4       	brtc	.+14     	; 0x50c <__fixunssfsi+0x5c>
 4fe:	90 95       	com	r25
 500:	80 95       	com	r24
 502:	70 95       	com	r23
 504:	61 95       	neg	r22
 506:	7f 4f       	sbci	r23, 0xFF	; 255
 508:	8f 4f       	sbci	r24, 0xFF	; 255
 50a:	9f 4f       	sbci	r25, 0xFF	; 255
 50c:	08 95       	ret

0000050e <__floatunsisf>:
 50e:	e8 94       	clt
 510:	09 c0       	rjmp	.+18     	; 0x524 <__floatsisf+0x12>

00000512 <__floatsisf>:
 512:	97 fb       	bst	r25, 7
 514:	3e f4       	brtc	.+14     	; 0x524 <__floatsisf+0x12>
 516:	90 95       	com	r25
 518:	80 95       	com	r24
 51a:	70 95       	com	r23
 51c:	61 95       	neg	r22
 51e:	7f 4f       	sbci	r23, 0xFF	; 255
 520:	8f 4f       	sbci	r24, 0xFF	; 255
 522:	9f 4f       	sbci	r25, 0xFF	; 255
 524:	99 23       	and	r25, r25
 526:	a9 f0       	breq	.+42     	; 0x552 <__floatsisf+0x40>
 528:	f9 2f       	mov	r31, r25
 52a:	96 e9       	ldi	r25, 0x96	; 150
 52c:	bb 27       	eor	r27, r27
 52e:	93 95       	inc	r25
 530:	f6 95       	lsr	r31
 532:	87 95       	ror	r24
 534:	77 95       	ror	r23
 536:	67 95       	ror	r22
 538:	b7 95       	ror	r27
 53a:	f1 11       	cpse	r31, r1
 53c:	f8 cf       	rjmp	.-16     	; 0x52e <__floatsisf+0x1c>
 53e:	fa f4       	brpl	.+62     	; 0x57e <__floatsisf+0x6c>
 540:	bb 0f       	add	r27, r27
 542:	11 f4       	brne	.+4      	; 0x548 <__floatsisf+0x36>
 544:	60 ff       	sbrs	r22, 0
 546:	1b c0       	rjmp	.+54     	; 0x57e <__floatsisf+0x6c>
 548:	6f 5f       	subi	r22, 0xFF	; 255
 54a:	7f 4f       	sbci	r23, 0xFF	; 255
 54c:	8f 4f       	sbci	r24, 0xFF	; 255
 54e:	9f 4f       	sbci	r25, 0xFF	; 255
 550:	16 c0       	rjmp	.+44     	; 0x57e <__floatsisf+0x6c>
 552:	88 23       	and	r24, r24
 554:	11 f0       	breq	.+4      	; 0x55a <__floatsisf+0x48>
 556:	96 e9       	ldi	r25, 0x96	; 150
 558:	11 c0       	rjmp	.+34     	; 0x57c <__floatsisf+0x6a>
 55a:	77 23       	and	r23, r23
 55c:	21 f0       	breq	.+8      	; 0x566 <__floatsisf+0x54>
 55e:	9e e8       	ldi	r25, 0x8E	; 142
 560:	87 2f       	mov	r24, r23
 562:	76 2f       	mov	r23, r22
 564:	05 c0       	rjmp	.+10     	; 0x570 <__floatsisf+0x5e>
 566:	66 23       	and	r22, r22
 568:	71 f0       	breq	.+28     	; 0x586 <__floatsisf+0x74>
 56a:	96 e8       	ldi	r25, 0x86	; 134
 56c:	86 2f       	mov	r24, r22
 56e:	70 e0       	ldi	r23, 0x00	; 0
 570:	60 e0       	ldi	r22, 0x00	; 0
 572:	2a f0       	brmi	.+10     	; 0x57e <__floatsisf+0x6c>
 574:	9a 95       	dec	r25
 576:	66 0f       	add	r22, r22
 578:	77 1f       	adc	r23, r23
 57a:	88 1f       	adc	r24, r24
 57c:	da f7       	brpl	.-10     	; 0x574 <__floatsisf+0x62>
 57e:	88 0f       	add	r24, r24
 580:	96 95       	lsr	r25
 582:	87 95       	ror	r24
 584:	97 f9       	bld	r25, 7
 586:	08 95       	ret

00000588 <__fp_inf>:
 588:	97 f9       	bld	r25, 7
 58a:	9f 67       	ori	r25, 0x7F	; 127
 58c:	80 e8       	ldi	r24, 0x80	; 128
 58e:	70 e0       	ldi	r23, 0x00	; 0
 590:	60 e0       	ldi	r22, 0x00	; 0
 592:	08 95       	ret

00000594 <__fp_nan>:
 594:	9f ef       	ldi	r25, 0xFF	; 255
 596:	80 ec       	ldi	r24, 0xC0	; 192
 598:	08 95       	ret

0000059a <__fp_pscA>:
 59a:	00 24       	eor	r0, r0
 59c:	0a 94       	dec	r0
 59e:	16 16       	cp	r1, r22
 5a0:	17 06       	cpc	r1, r23
 5a2:	18 06       	cpc	r1, r24
 5a4:	09 06       	cpc	r0, r25
 5a6:	08 95       	ret

000005a8 <__fp_pscB>:
 5a8:	00 24       	eor	r0, r0
 5aa:	0a 94       	dec	r0
 5ac:	12 16       	cp	r1, r18
 5ae:	13 06       	cpc	r1, r19
 5b0:	14 06       	cpc	r1, r20
 5b2:	05 06       	cpc	r0, r21
 5b4:	08 95       	ret

000005b6 <__fp_round>:
 5b6:	09 2e       	mov	r0, r25
 5b8:	03 94       	inc	r0
 5ba:	00 0c       	add	r0, r0
 5bc:	11 f4       	brne	.+4      	; 0x5c2 <__fp_round+0xc>
 5be:	88 23       	and	r24, r24
 5c0:	52 f0       	brmi	.+20     	; 0x5d6 <__fp_round+0x20>
 5c2:	bb 0f       	add	r27, r27
 5c4:	40 f4       	brcc	.+16     	; 0x5d6 <__fp_round+0x20>
 5c6:	bf 2b       	or	r27, r31
 5c8:	11 f4       	brne	.+4      	; 0x5ce <__fp_round+0x18>
 5ca:	60 ff       	sbrs	r22, 0
 5cc:	04 c0       	rjmp	.+8      	; 0x5d6 <__fp_round+0x20>
 5ce:	6f 5f       	subi	r22, 0xFF	; 255
 5d0:	7f 4f       	sbci	r23, 0xFF	; 255
 5d2:	8f 4f       	sbci	r24, 0xFF	; 255
 5d4:	9f 4f       	sbci	r25, 0xFF	; 255
 5d6:	08 95       	ret

000005d8 <__fp_split3>:
 5d8:	57 fd       	sbrc	r21, 7
 5da:	90 58       	subi	r25, 0x80	; 128
 5dc:	44 0f       	add	r20, r20
 5de:	55 1f       	adc	r21, r21
 5e0:	59 f0       	breq	.+22     	; 0x5f8 <__fp_splitA+0x10>
 5e2:	5f 3f       	cpi	r21, 0xFF	; 255
 5e4:	71 f0       	breq	.+28     	; 0x602 <__fp_splitA+0x1a>
 5e6:	47 95       	ror	r20

000005e8 <__fp_splitA>:
 5e8:	88 0f       	add	r24, r24
 5ea:	97 fb       	bst	r25, 7
 5ec:	99 1f       	adc	r25, r25
 5ee:	61 f0       	breq	.+24     	; 0x608 <__fp_splitA+0x20>
 5f0:	9f 3f       	cpi	r25, 0xFF	; 255
 5f2:	79 f0       	breq	.+30     	; 0x612 <__fp_splitA+0x2a>
 5f4:	87 95       	ror	r24
 5f6:	08 95       	ret
 5f8:	12 16       	cp	r1, r18
 5fa:	13 06       	cpc	r1, r19
 5fc:	14 06       	cpc	r1, r20
 5fe:	55 1f       	adc	r21, r21
 600:	f2 cf       	rjmp	.-28     	; 0x5e6 <__fp_split3+0xe>
 602:	46 95       	lsr	r20
 604:	f1 df       	rcall	.-30     	; 0x5e8 <__fp_splitA>
 606:	08 c0       	rjmp	.+16     	; 0x618 <__fp_splitA+0x30>
 608:	16 16       	cp	r1, r22
 60a:	17 06       	cpc	r1, r23
 60c:	18 06       	cpc	r1, r24
 60e:	99 1f       	adc	r25, r25
 610:	f1 cf       	rjmp	.-30     	; 0x5f4 <__fp_splitA+0xc>
 612:	86 95       	lsr	r24
 614:	71 05       	cpc	r23, r1
 616:	61 05       	cpc	r22, r1
 618:	08 94       	sec
 61a:	08 95       	ret

0000061c <__fp_zero>:
 61c:	e8 94       	clt

0000061e <__fp_szero>:
 61e:	bb 27       	eor	r27, r27
 620:	66 27       	eor	r22, r22
 622:	77 27       	eor	r23, r23
 624:	cb 01       	movw	r24, r22
 626:	97 f9       	bld	r25, 7
 628:	08 95       	ret

0000062a <__mulsf3>:
 62a:	0e 94 28 03 	call	0x650	; 0x650 <__mulsf3x>
 62e:	0c 94 db 02 	jmp	0x5b6	; 0x5b6 <__fp_round>
 632:	0e 94 cd 02 	call	0x59a	; 0x59a <__fp_pscA>
 636:	38 f0       	brcs	.+14     	; 0x646 <__mulsf3+0x1c>
 638:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <__fp_pscB>
 63c:	20 f0       	brcs	.+8      	; 0x646 <__mulsf3+0x1c>
 63e:	95 23       	and	r25, r21
 640:	11 f0       	breq	.+4      	; 0x646 <__mulsf3+0x1c>
 642:	0c 94 c4 02 	jmp	0x588	; 0x588 <__fp_inf>
 646:	0c 94 ca 02 	jmp	0x594	; 0x594 <__fp_nan>
 64a:	11 24       	eor	r1, r1
 64c:	0c 94 0f 03 	jmp	0x61e	; 0x61e <__fp_szero>

00000650 <__mulsf3x>:
 650:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__fp_split3>
 654:	70 f3       	brcs	.-36     	; 0x632 <__mulsf3+0x8>

00000656 <__mulsf3_pse>:
 656:	95 9f       	mul	r25, r21
 658:	c1 f3       	breq	.-16     	; 0x64a <__mulsf3+0x20>
 65a:	95 0f       	add	r25, r21
 65c:	50 e0       	ldi	r21, 0x00	; 0
 65e:	55 1f       	adc	r21, r21
 660:	62 9f       	mul	r22, r18
 662:	f0 01       	movw	r30, r0
 664:	72 9f       	mul	r23, r18
 666:	bb 27       	eor	r27, r27
 668:	f0 0d       	add	r31, r0
 66a:	b1 1d       	adc	r27, r1
 66c:	63 9f       	mul	r22, r19
 66e:	aa 27       	eor	r26, r26
 670:	f0 0d       	add	r31, r0
 672:	b1 1d       	adc	r27, r1
 674:	aa 1f       	adc	r26, r26
 676:	64 9f       	mul	r22, r20
 678:	66 27       	eor	r22, r22
 67a:	b0 0d       	add	r27, r0
 67c:	a1 1d       	adc	r26, r1
 67e:	66 1f       	adc	r22, r22
 680:	82 9f       	mul	r24, r18
 682:	22 27       	eor	r18, r18
 684:	b0 0d       	add	r27, r0
 686:	a1 1d       	adc	r26, r1
 688:	62 1f       	adc	r22, r18
 68a:	73 9f       	mul	r23, r19
 68c:	b0 0d       	add	r27, r0
 68e:	a1 1d       	adc	r26, r1
 690:	62 1f       	adc	r22, r18
 692:	83 9f       	mul	r24, r19
 694:	a0 0d       	add	r26, r0
 696:	61 1d       	adc	r22, r1
 698:	22 1f       	adc	r18, r18
 69a:	74 9f       	mul	r23, r20
 69c:	33 27       	eor	r19, r19
 69e:	a0 0d       	add	r26, r0
 6a0:	61 1d       	adc	r22, r1
 6a2:	23 1f       	adc	r18, r19
 6a4:	84 9f       	mul	r24, r20
 6a6:	60 0d       	add	r22, r0
 6a8:	21 1d       	adc	r18, r1
 6aa:	82 2f       	mov	r24, r18
 6ac:	76 2f       	mov	r23, r22
 6ae:	6a 2f       	mov	r22, r26
 6b0:	11 24       	eor	r1, r1
 6b2:	9f 57       	subi	r25, 0x7F	; 127
 6b4:	50 40       	sbci	r21, 0x00	; 0
 6b6:	9a f0       	brmi	.+38     	; 0x6de <__mulsf3_pse+0x88>
 6b8:	f1 f0       	breq	.+60     	; 0x6f6 <__mulsf3_pse+0xa0>
 6ba:	88 23       	and	r24, r24
 6bc:	4a f0       	brmi	.+18     	; 0x6d0 <__mulsf3_pse+0x7a>
 6be:	ee 0f       	add	r30, r30
 6c0:	ff 1f       	adc	r31, r31
 6c2:	bb 1f       	adc	r27, r27
 6c4:	66 1f       	adc	r22, r22
 6c6:	77 1f       	adc	r23, r23
 6c8:	88 1f       	adc	r24, r24
 6ca:	91 50       	subi	r25, 0x01	; 1
 6cc:	50 40       	sbci	r21, 0x00	; 0
 6ce:	a9 f7       	brne	.-22     	; 0x6ba <__mulsf3_pse+0x64>
 6d0:	9e 3f       	cpi	r25, 0xFE	; 254
 6d2:	51 05       	cpc	r21, r1
 6d4:	80 f0       	brcs	.+32     	; 0x6f6 <__mulsf3_pse+0xa0>
 6d6:	0c 94 c4 02 	jmp	0x588	; 0x588 <__fp_inf>
 6da:	0c 94 0f 03 	jmp	0x61e	; 0x61e <__fp_szero>
 6de:	5f 3f       	cpi	r21, 0xFF	; 255
 6e0:	e4 f3       	brlt	.-8      	; 0x6da <__mulsf3_pse+0x84>
 6e2:	98 3e       	cpi	r25, 0xE8	; 232
 6e4:	d4 f3       	brlt	.-12     	; 0x6da <__mulsf3_pse+0x84>
 6e6:	86 95       	lsr	r24
 6e8:	77 95       	ror	r23
 6ea:	67 95       	ror	r22
 6ec:	b7 95       	ror	r27
 6ee:	f7 95       	ror	r31
 6f0:	e7 95       	ror	r30
 6f2:	9f 5f       	subi	r25, 0xFF	; 255
 6f4:	c1 f7       	brne	.-16     	; 0x6e6 <__mulsf3_pse+0x90>
 6f6:	fe 2b       	or	r31, r30
 6f8:	88 0f       	add	r24, r24
 6fa:	91 1d       	adc	r25, r1
 6fc:	96 95       	lsr	r25
 6fe:	87 95       	ror	r24
 700:	97 f9       	bld	r25, 7
 702:	08 95       	ret

00000704 <__umulhisi3>:
 704:	a2 9f       	mul	r26, r18
 706:	b0 01       	movw	r22, r0
 708:	b3 9f       	mul	r27, r19
 70a:	c0 01       	movw	r24, r0
 70c:	a3 9f       	mul	r26, r19
 70e:	70 0d       	add	r23, r0
 710:	81 1d       	adc	r24, r1
 712:	11 24       	eor	r1, r1
 714:	91 1d       	adc	r25, r1
 716:	b2 9f       	mul	r27, r18
 718:	70 0d       	add	r23, r0
 71a:	81 1d       	adc	r24, r1
 71c:	11 24       	eor	r1, r1
 71e:	91 1d       	adc	r25, r1
 720:	08 95       	ret

00000722 <sprintf>:
 722:	ae e0       	ldi	r26, 0x0E	; 14
 724:	b0 e0       	ldi	r27, 0x00	; 0
 726:	e7 e9       	ldi	r30, 0x97	; 151
 728:	f3 e0       	ldi	r31, 0x03	; 3
 72a:	0c 94 52 06 	jmp	0xca4	; 0xca4 <__prologue_saves__+0x1c>
 72e:	0d 89       	ldd	r16, Y+21	; 0x15
 730:	1e 89       	ldd	r17, Y+22	; 0x16
 732:	86 e0       	ldi	r24, 0x06	; 6
 734:	8c 83       	std	Y+4, r24	; 0x04
 736:	1a 83       	std	Y+2, r17	; 0x02
 738:	09 83       	std	Y+1, r16	; 0x01
 73a:	8f ef       	ldi	r24, 0xFF	; 255
 73c:	9f e7       	ldi	r25, 0x7F	; 127
 73e:	9e 83       	std	Y+6, r25	; 0x06
 740:	8d 83       	std	Y+5, r24	; 0x05
 742:	ae 01       	movw	r20, r28
 744:	47 5e       	subi	r20, 0xE7	; 231
 746:	5f 4f       	sbci	r21, 0xFF	; 255
 748:	6f 89       	ldd	r22, Y+23	; 0x17
 74a:	78 8d       	ldd	r23, Y+24	; 0x18
 74c:	ce 01       	movw	r24, r28
 74e:	01 96       	adiw	r24, 0x01	; 1
 750:	0e 94 b3 03 	call	0x766	; 0x766 <vfprintf>
 754:	ef 81       	ldd	r30, Y+7	; 0x07
 756:	f8 85       	ldd	r31, Y+8	; 0x08
 758:	e0 0f       	add	r30, r16
 75a:	f1 1f       	adc	r31, r17
 75c:	10 82       	st	Z, r1
 75e:	2e 96       	adiw	r28, 0x0e	; 14
 760:	e4 e0       	ldi	r30, 0x04	; 4
 762:	0c 94 6e 06 	jmp	0xcdc	; 0xcdc <__epilogue_restores__+0x1c>

00000766 <vfprintf>:
 766:	ab e0       	ldi	r26, 0x0B	; 11
 768:	b0 e0       	ldi	r27, 0x00	; 0
 76a:	e9 eb       	ldi	r30, 0xB9	; 185
 76c:	f3 e0       	ldi	r31, 0x03	; 3
 76e:	0c 94 44 06 	jmp	0xc88	; 0xc88 <__prologue_saves__>
 772:	6c 01       	movw	r12, r24
 774:	7b 01       	movw	r14, r22
 776:	8a 01       	movw	r16, r20
 778:	fc 01       	movw	r30, r24
 77a:	17 82       	std	Z+7, r1	; 0x07
 77c:	16 82       	std	Z+6, r1	; 0x06
 77e:	83 81       	ldd	r24, Z+3	; 0x03
 780:	81 ff       	sbrs	r24, 1
 782:	cc c1       	rjmp	.+920    	; 0xb1c <__stack+0x2bd>
 784:	ce 01       	movw	r24, r28
 786:	01 96       	adiw	r24, 0x01	; 1
 788:	3c 01       	movw	r6, r24
 78a:	f6 01       	movw	r30, r12
 78c:	93 81       	ldd	r25, Z+3	; 0x03
 78e:	f7 01       	movw	r30, r14
 790:	93 fd       	sbrc	r25, 3
 792:	85 91       	lpm	r24, Z+
 794:	93 ff       	sbrs	r25, 3
 796:	81 91       	ld	r24, Z+
 798:	7f 01       	movw	r14, r30
 79a:	88 23       	and	r24, r24
 79c:	09 f4       	brne	.+2      	; 0x7a0 <vfprintf+0x3a>
 79e:	ba c1       	rjmp	.+884    	; 0xb14 <__stack+0x2b5>
 7a0:	85 32       	cpi	r24, 0x25	; 37
 7a2:	39 f4       	brne	.+14     	; 0x7b2 <vfprintf+0x4c>
 7a4:	93 fd       	sbrc	r25, 3
 7a6:	85 91       	lpm	r24, Z+
 7a8:	93 ff       	sbrs	r25, 3
 7aa:	81 91       	ld	r24, Z+
 7ac:	7f 01       	movw	r14, r30
 7ae:	85 32       	cpi	r24, 0x25	; 37
 7b0:	29 f4       	brne	.+10     	; 0x7bc <vfprintf+0x56>
 7b2:	b6 01       	movw	r22, r12
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	0e 94 aa 05 	call	0xb54	; 0xb54 <fputc>
 7ba:	e7 cf       	rjmp	.-50     	; 0x78a <vfprintf+0x24>
 7bc:	91 2c       	mov	r9, r1
 7be:	21 2c       	mov	r2, r1
 7c0:	31 2c       	mov	r3, r1
 7c2:	ff e1       	ldi	r31, 0x1F	; 31
 7c4:	f3 15       	cp	r31, r3
 7c6:	d8 f0       	brcs	.+54     	; 0x7fe <vfprintf+0x98>
 7c8:	8b 32       	cpi	r24, 0x2B	; 43
 7ca:	79 f0       	breq	.+30     	; 0x7ea <vfprintf+0x84>
 7cc:	38 f4       	brcc	.+14     	; 0x7dc <vfprintf+0x76>
 7ce:	80 32       	cpi	r24, 0x20	; 32
 7d0:	79 f0       	breq	.+30     	; 0x7f0 <vfprintf+0x8a>
 7d2:	83 32       	cpi	r24, 0x23	; 35
 7d4:	a1 f4       	brne	.+40     	; 0x7fe <vfprintf+0x98>
 7d6:	23 2d       	mov	r18, r3
 7d8:	20 61       	ori	r18, 0x10	; 16
 7da:	1d c0       	rjmp	.+58     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 7dc:	8d 32       	cpi	r24, 0x2D	; 45
 7de:	61 f0       	breq	.+24     	; 0x7f8 <vfprintf+0x92>
 7e0:	80 33       	cpi	r24, 0x30	; 48
 7e2:	69 f4       	brne	.+26     	; 0x7fe <vfprintf+0x98>
 7e4:	23 2d       	mov	r18, r3
 7e6:	21 60       	ori	r18, 0x01	; 1
 7e8:	16 c0       	rjmp	.+44     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 7ea:	83 2d       	mov	r24, r3
 7ec:	82 60       	ori	r24, 0x02	; 2
 7ee:	38 2e       	mov	r3, r24
 7f0:	e3 2d       	mov	r30, r3
 7f2:	e4 60       	ori	r30, 0x04	; 4
 7f4:	3e 2e       	mov	r3, r30
 7f6:	2a c0       	rjmp	.+84     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 7f8:	f3 2d       	mov	r31, r3
 7fa:	f8 60       	ori	r31, 0x08	; 8
 7fc:	1d c0       	rjmp	.+58     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 7fe:	37 fc       	sbrc	r3, 7
 800:	2d c0       	rjmp	.+90     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 802:	20 ed       	ldi	r18, 0xD0	; 208
 804:	28 0f       	add	r18, r24
 806:	2a 30       	cpi	r18, 0x0A	; 10
 808:	40 f0       	brcs	.+16     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 80a:	8e 32       	cpi	r24, 0x2E	; 46
 80c:	b9 f4       	brne	.+46     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 80e:	36 fc       	sbrc	r3, 6
 810:	81 c1       	rjmp	.+770    	; 0xb14 <__stack+0x2b5>
 812:	23 2d       	mov	r18, r3
 814:	20 64       	ori	r18, 0x40	; 64
 816:	32 2e       	mov	r3, r18
 818:	19 c0       	rjmp	.+50     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 81a:	36 fe       	sbrs	r3, 6
 81c:	06 c0       	rjmp	.+12     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 81e:	8a e0       	ldi	r24, 0x0A	; 10
 820:	98 9e       	mul	r9, r24
 822:	20 0d       	add	r18, r0
 824:	11 24       	eor	r1, r1
 826:	92 2e       	mov	r9, r18
 828:	11 c0       	rjmp	.+34     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 82a:	ea e0       	ldi	r30, 0x0A	; 10
 82c:	2e 9e       	mul	r2, r30
 82e:	20 0d       	add	r18, r0
 830:	11 24       	eor	r1, r1
 832:	22 2e       	mov	r2, r18
 834:	f3 2d       	mov	r31, r3
 836:	f0 62       	ori	r31, 0x20	; 32
 838:	3f 2e       	mov	r3, r31
 83a:	08 c0       	rjmp	.+16     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 83c:	8c 36       	cpi	r24, 0x6C	; 108
 83e:	21 f4       	brne	.+8      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 840:	83 2d       	mov	r24, r3
 842:	80 68       	ori	r24, 0x80	; 128
 844:	38 2e       	mov	r3, r24
 846:	02 c0       	rjmp	.+4      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 848:	88 36       	cpi	r24, 0x68	; 104
 84a:	41 f4       	brne	.+16     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 84c:	f7 01       	movw	r30, r14
 84e:	93 fd       	sbrc	r25, 3
 850:	85 91       	lpm	r24, Z+
 852:	93 ff       	sbrs	r25, 3
 854:	81 91       	ld	r24, Z+
 856:	7f 01       	movw	r14, r30
 858:	81 11       	cpse	r24, r1
 85a:	b3 cf       	rjmp	.-154    	; 0x7c2 <vfprintf+0x5c>
 85c:	98 2f       	mov	r25, r24
 85e:	9f 7d       	andi	r25, 0xDF	; 223
 860:	95 54       	subi	r25, 0x45	; 69
 862:	93 30       	cpi	r25, 0x03	; 3
 864:	28 f4       	brcc	.+10     	; 0x870 <__stack+0x11>
 866:	0c 5f       	subi	r16, 0xFC	; 252
 868:	1f 4f       	sbci	r17, 0xFF	; 255
 86a:	9f e3       	ldi	r25, 0x3F	; 63
 86c:	99 83       	std	Y+1, r25	; 0x01
 86e:	0d c0       	rjmp	.+26     	; 0x88a <__stack+0x2b>
 870:	83 36       	cpi	r24, 0x63	; 99
 872:	31 f0       	breq	.+12     	; 0x880 <__stack+0x21>
 874:	83 37       	cpi	r24, 0x73	; 115
 876:	71 f0       	breq	.+28     	; 0x894 <__stack+0x35>
 878:	83 35       	cpi	r24, 0x53	; 83
 87a:	09 f0       	breq	.+2      	; 0x87e <__stack+0x1f>
 87c:	59 c0       	rjmp	.+178    	; 0x930 <__stack+0xd1>
 87e:	21 c0       	rjmp	.+66     	; 0x8c2 <__stack+0x63>
 880:	f8 01       	movw	r30, r16
 882:	80 81       	ld	r24, Z
 884:	89 83       	std	Y+1, r24	; 0x01
 886:	0e 5f       	subi	r16, 0xFE	; 254
 888:	1f 4f       	sbci	r17, 0xFF	; 255
 88a:	88 24       	eor	r8, r8
 88c:	83 94       	inc	r8
 88e:	91 2c       	mov	r9, r1
 890:	53 01       	movw	r10, r6
 892:	13 c0       	rjmp	.+38     	; 0x8ba <__stack+0x5b>
 894:	28 01       	movw	r4, r16
 896:	f2 e0       	ldi	r31, 0x02	; 2
 898:	4f 0e       	add	r4, r31
 89a:	51 1c       	adc	r5, r1
 89c:	f8 01       	movw	r30, r16
 89e:	a0 80       	ld	r10, Z
 8a0:	b1 80       	ldd	r11, Z+1	; 0x01
 8a2:	36 fe       	sbrs	r3, 6
 8a4:	03 c0       	rjmp	.+6      	; 0x8ac <__stack+0x4d>
 8a6:	69 2d       	mov	r22, r9
 8a8:	70 e0       	ldi	r23, 0x00	; 0
 8aa:	02 c0       	rjmp	.+4      	; 0x8b0 <__stack+0x51>
 8ac:	6f ef       	ldi	r22, 0xFF	; 255
 8ae:	7f ef       	ldi	r23, 0xFF	; 255
 8b0:	c5 01       	movw	r24, r10
 8b2:	0e 94 9f 05 	call	0xb3e	; 0xb3e <strnlen>
 8b6:	4c 01       	movw	r8, r24
 8b8:	82 01       	movw	r16, r4
 8ba:	f3 2d       	mov	r31, r3
 8bc:	ff 77       	andi	r31, 0x7F	; 127
 8be:	3f 2e       	mov	r3, r31
 8c0:	16 c0       	rjmp	.+44     	; 0x8ee <__stack+0x8f>
 8c2:	28 01       	movw	r4, r16
 8c4:	22 e0       	ldi	r18, 0x02	; 2
 8c6:	42 0e       	add	r4, r18
 8c8:	51 1c       	adc	r5, r1
 8ca:	f8 01       	movw	r30, r16
 8cc:	a0 80       	ld	r10, Z
 8ce:	b1 80       	ldd	r11, Z+1	; 0x01
 8d0:	36 fe       	sbrs	r3, 6
 8d2:	03 c0       	rjmp	.+6      	; 0x8da <__stack+0x7b>
 8d4:	69 2d       	mov	r22, r9
 8d6:	70 e0       	ldi	r23, 0x00	; 0
 8d8:	02 c0       	rjmp	.+4      	; 0x8de <__stack+0x7f>
 8da:	6f ef       	ldi	r22, 0xFF	; 255
 8dc:	7f ef       	ldi	r23, 0xFF	; 255
 8de:	c5 01       	movw	r24, r10
 8e0:	0e 94 94 05 	call	0xb28	; 0xb28 <strnlen_P>
 8e4:	4c 01       	movw	r8, r24
 8e6:	f3 2d       	mov	r31, r3
 8e8:	f0 68       	ori	r31, 0x80	; 128
 8ea:	3f 2e       	mov	r3, r31
 8ec:	82 01       	movw	r16, r4
 8ee:	33 fc       	sbrc	r3, 3
 8f0:	1b c0       	rjmp	.+54     	; 0x928 <__stack+0xc9>
 8f2:	82 2d       	mov	r24, r2
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	88 16       	cp	r8, r24
 8f8:	99 06       	cpc	r9, r25
 8fa:	b0 f4       	brcc	.+44     	; 0x928 <__stack+0xc9>
 8fc:	b6 01       	movw	r22, r12
 8fe:	80 e2       	ldi	r24, 0x20	; 32
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	0e 94 aa 05 	call	0xb54	; 0xb54 <fputc>
 906:	2a 94       	dec	r2
 908:	f4 cf       	rjmp	.-24     	; 0x8f2 <__stack+0x93>
 90a:	f5 01       	movw	r30, r10
 90c:	37 fc       	sbrc	r3, 7
 90e:	85 91       	lpm	r24, Z+
 910:	37 fe       	sbrs	r3, 7
 912:	81 91       	ld	r24, Z+
 914:	5f 01       	movw	r10, r30
 916:	b6 01       	movw	r22, r12
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	0e 94 aa 05 	call	0xb54	; 0xb54 <fputc>
 91e:	21 10       	cpse	r2, r1
 920:	2a 94       	dec	r2
 922:	21 e0       	ldi	r18, 0x01	; 1
 924:	82 1a       	sub	r8, r18
 926:	91 08       	sbc	r9, r1
 928:	81 14       	cp	r8, r1
 92a:	91 04       	cpc	r9, r1
 92c:	71 f7       	brne	.-36     	; 0x90a <__stack+0xab>
 92e:	e8 c0       	rjmp	.+464    	; 0xb00 <__stack+0x2a1>
 930:	84 36       	cpi	r24, 0x64	; 100
 932:	11 f0       	breq	.+4      	; 0x938 <__stack+0xd9>
 934:	89 36       	cpi	r24, 0x69	; 105
 936:	41 f5       	brne	.+80     	; 0x988 <__stack+0x129>
 938:	f8 01       	movw	r30, r16
 93a:	37 fe       	sbrs	r3, 7
 93c:	07 c0       	rjmp	.+14     	; 0x94c <__stack+0xed>
 93e:	60 81       	ld	r22, Z
 940:	71 81       	ldd	r23, Z+1	; 0x01
 942:	82 81       	ldd	r24, Z+2	; 0x02
 944:	93 81       	ldd	r25, Z+3	; 0x03
 946:	0c 5f       	subi	r16, 0xFC	; 252
 948:	1f 4f       	sbci	r17, 0xFF	; 255
 94a:	08 c0       	rjmp	.+16     	; 0x95c <__stack+0xfd>
 94c:	60 81       	ld	r22, Z
 94e:	71 81       	ldd	r23, Z+1	; 0x01
 950:	07 2e       	mov	r0, r23
 952:	00 0c       	add	r0, r0
 954:	88 0b       	sbc	r24, r24
 956:	99 0b       	sbc	r25, r25
 958:	0e 5f       	subi	r16, 0xFE	; 254
 95a:	1f 4f       	sbci	r17, 0xFF	; 255
 95c:	f3 2d       	mov	r31, r3
 95e:	ff 76       	andi	r31, 0x6F	; 111
 960:	3f 2e       	mov	r3, r31
 962:	97 ff       	sbrs	r25, 7
 964:	09 c0       	rjmp	.+18     	; 0x978 <__stack+0x119>
 966:	90 95       	com	r25
 968:	80 95       	com	r24
 96a:	70 95       	com	r23
 96c:	61 95       	neg	r22
 96e:	7f 4f       	sbci	r23, 0xFF	; 255
 970:	8f 4f       	sbci	r24, 0xFF	; 255
 972:	9f 4f       	sbci	r25, 0xFF	; 255
 974:	f0 68       	ori	r31, 0x80	; 128
 976:	3f 2e       	mov	r3, r31
 978:	2a e0       	ldi	r18, 0x0A	; 10
 97a:	30 e0       	ldi	r19, 0x00	; 0
 97c:	a3 01       	movw	r20, r6
 97e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__ultoa_invert>
 982:	88 2e       	mov	r8, r24
 984:	86 18       	sub	r8, r6
 986:	45 c0       	rjmp	.+138    	; 0xa12 <__stack+0x1b3>
 988:	85 37       	cpi	r24, 0x75	; 117
 98a:	31 f4       	brne	.+12     	; 0x998 <__stack+0x139>
 98c:	23 2d       	mov	r18, r3
 98e:	2f 7e       	andi	r18, 0xEF	; 239
 990:	b2 2e       	mov	r11, r18
 992:	2a e0       	ldi	r18, 0x0A	; 10
 994:	30 e0       	ldi	r19, 0x00	; 0
 996:	25 c0       	rjmp	.+74     	; 0x9e2 <__stack+0x183>
 998:	93 2d       	mov	r25, r3
 99a:	99 7f       	andi	r25, 0xF9	; 249
 99c:	b9 2e       	mov	r11, r25
 99e:	8f 36       	cpi	r24, 0x6F	; 111
 9a0:	c1 f0       	breq	.+48     	; 0x9d2 <__stack+0x173>
 9a2:	18 f4       	brcc	.+6      	; 0x9aa <__stack+0x14b>
 9a4:	88 35       	cpi	r24, 0x58	; 88
 9a6:	79 f0       	breq	.+30     	; 0x9c6 <__stack+0x167>
 9a8:	b5 c0       	rjmp	.+362    	; 0xb14 <__stack+0x2b5>
 9aa:	80 37       	cpi	r24, 0x70	; 112
 9ac:	19 f0       	breq	.+6      	; 0x9b4 <__stack+0x155>
 9ae:	88 37       	cpi	r24, 0x78	; 120
 9b0:	21 f0       	breq	.+8      	; 0x9ba <__stack+0x15b>
 9b2:	b0 c0       	rjmp	.+352    	; 0xb14 <__stack+0x2b5>
 9b4:	e9 2f       	mov	r30, r25
 9b6:	e0 61       	ori	r30, 0x10	; 16
 9b8:	be 2e       	mov	r11, r30
 9ba:	b4 fe       	sbrs	r11, 4
 9bc:	0d c0       	rjmp	.+26     	; 0x9d8 <__stack+0x179>
 9be:	fb 2d       	mov	r31, r11
 9c0:	f4 60       	ori	r31, 0x04	; 4
 9c2:	bf 2e       	mov	r11, r31
 9c4:	09 c0       	rjmp	.+18     	; 0x9d8 <__stack+0x179>
 9c6:	34 fe       	sbrs	r3, 4
 9c8:	0a c0       	rjmp	.+20     	; 0x9de <__stack+0x17f>
 9ca:	29 2f       	mov	r18, r25
 9cc:	26 60       	ori	r18, 0x06	; 6
 9ce:	b2 2e       	mov	r11, r18
 9d0:	06 c0       	rjmp	.+12     	; 0x9de <__stack+0x17f>
 9d2:	28 e0       	ldi	r18, 0x08	; 8
 9d4:	30 e0       	ldi	r19, 0x00	; 0
 9d6:	05 c0       	rjmp	.+10     	; 0x9e2 <__stack+0x183>
 9d8:	20 e1       	ldi	r18, 0x10	; 16
 9da:	30 e0       	ldi	r19, 0x00	; 0
 9dc:	02 c0       	rjmp	.+4      	; 0x9e2 <__stack+0x183>
 9de:	20 e1       	ldi	r18, 0x10	; 16
 9e0:	32 e0       	ldi	r19, 0x02	; 2
 9e2:	f8 01       	movw	r30, r16
 9e4:	b7 fe       	sbrs	r11, 7
 9e6:	07 c0       	rjmp	.+14     	; 0x9f6 <__stack+0x197>
 9e8:	60 81       	ld	r22, Z
 9ea:	71 81       	ldd	r23, Z+1	; 0x01
 9ec:	82 81       	ldd	r24, Z+2	; 0x02
 9ee:	93 81       	ldd	r25, Z+3	; 0x03
 9f0:	0c 5f       	subi	r16, 0xFC	; 252
 9f2:	1f 4f       	sbci	r17, 0xFF	; 255
 9f4:	06 c0       	rjmp	.+12     	; 0xa02 <__stack+0x1a3>
 9f6:	60 81       	ld	r22, Z
 9f8:	71 81       	ldd	r23, Z+1	; 0x01
 9fa:	80 e0       	ldi	r24, 0x00	; 0
 9fc:	90 e0       	ldi	r25, 0x00	; 0
 9fe:	0e 5f       	subi	r16, 0xFE	; 254
 a00:	1f 4f       	sbci	r17, 0xFF	; 255
 a02:	a3 01       	movw	r20, r6
 a04:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__ultoa_invert>
 a08:	88 2e       	mov	r8, r24
 a0a:	86 18       	sub	r8, r6
 a0c:	fb 2d       	mov	r31, r11
 a0e:	ff 77       	andi	r31, 0x7F	; 127
 a10:	3f 2e       	mov	r3, r31
 a12:	36 fe       	sbrs	r3, 6
 a14:	0d c0       	rjmp	.+26     	; 0xa30 <__stack+0x1d1>
 a16:	23 2d       	mov	r18, r3
 a18:	2e 7f       	andi	r18, 0xFE	; 254
 a1a:	a2 2e       	mov	r10, r18
 a1c:	89 14       	cp	r8, r9
 a1e:	58 f4       	brcc	.+22     	; 0xa36 <__stack+0x1d7>
 a20:	34 fe       	sbrs	r3, 4
 a22:	0b c0       	rjmp	.+22     	; 0xa3a <__stack+0x1db>
 a24:	32 fc       	sbrc	r3, 2
 a26:	09 c0       	rjmp	.+18     	; 0xa3a <__stack+0x1db>
 a28:	83 2d       	mov	r24, r3
 a2a:	8e 7e       	andi	r24, 0xEE	; 238
 a2c:	a8 2e       	mov	r10, r24
 a2e:	05 c0       	rjmp	.+10     	; 0xa3a <__stack+0x1db>
 a30:	b8 2c       	mov	r11, r8
 a32:	a3 2c       	mov	r10, r3
 a34:	03 c0       	rjmp	.+6      	; 0xa3c <__stack+0x1dd>
 a36:	b8 2c       	mov	r11, r8
 a38:	01 c0       	rjmp	.+2      	; 0xa3c <__stack+0x1dd>
 a3a:	b9 2c       	mov	r11, r9
 a3c:	a4 fe       	sbrs	r10, 4
 a3e:	0f c0       	rjmp	.+30     	; 0xa5e <__stack+0x1ff>
 a40:	fe 01       	movw	r30, r28
 a42:	e8 0d       	add	r30, r8
 a44:	f1 1d       	adc	r31, r1
 a46:	80 81       	ld	r24, Z
 a48:	80 33       	cpi	r24, 0x30	; 48
 a4a:	21 f4       	brne	.+8      	; 0xa54 <__stack+0x1f5>
 a4c:	9a 2d       	mov	r25, r10
 a4e:	99 7e       	andi	r25, 0xE9	; 233
 a50:	a9 2e       	mov	r10, r25
 a52:	09 c0       	rjmp	.+18     	; 0xa66 <__stack+0x207>
 a54:	a2 fe       	sbrs	r10, 2
 a56:	06 c0       	rjmp	.+12     	; 0xa64 <__stack+0x205>
 a58:	b3 94       	inc	r11
 a5a:	b3 94       	inc	r11
 a5c:	04 c0       	rjmp	.+8      	; 0xa66 <__stack+0x207>
 a5e:	8a 2d       	mov	r24, r10
 a60:	86 78       	andi	r24, 0x86	; 134
 a62:	09 f0       	breq	.+2      	; 0xa66 <__stack+0x207>
 a64:	b3 94       	inc	r11
 a66:	a3 fc       	sbrc	r10, 3
 a68:	11 c0       	rjmp	.+34     	; 0xa8c <__stack+0x22d>
 a6a:	a0 fe       	sbrs	r10, 0
 a6c:	06 c0       	rjmp	.+12     	; 0xa7a <__stack+0x21b>
 a6e:	b2 14       	cp	r11, r2
 a70:	88 f4       	brcc	.+34     	; 0xa94 <__stack+0x235>
 a72:	28 0c       	add	r2, r8
 a74:	92 2c       	mov	r9, r2
 a76:	9b 18       	sub	r9, r11
 a78:	0e c0       	rjmp	.+28     	; 0xa96 <__stack+0x237>
 a7a:	b2 14       	cp	r11, r2
 a7c:	60 f4       	brcc	.+24     	; 0xa96 <__stack+0x237>
 a7e:	b6 01       	movw	r22, r12
 a80:	80 e2       	ldi	r24, 0x20	; 32
 a82:	90 e0       	ldi	r25, 0x00	; 0
 a84:	0e 94 aa 05 	call	0xb54	; 0xb54 <fputc>
 a88:	b3 94       	inc	r11
 a8a:	f7 cf       	rjmp	.-18     	; 0xa7a <__stack+0x21b>
 a8c:	b2 14       	cp	r11, r2
 a8e:	18 f4       	brcc	.+6      	; 0xa96 <__stack+0x237>
 a90:	2b 18       	sub	r2, r11
 a92:	02 c0       	rjmp	.+4      	; 0xa98 <__stack+0x239>
 a94:	98 2c       	mov	r9, r8
 a96:	21 2c       	mov	r2, r1
 a98:	a4 fe       	sbrs	r10, 4
 a9a:	10 c0       	rjmp	.+32     	; 0xabc <__stack+0x25d>
 a9c:	b6 01       	movw	r22, r12
 a9e:	80 e3       	ldi	r24, 0x30	; 48
 aa0:	90 e0       	ldi	r25, 0x00	; 0
 aa2:	0e 94 aa 05 	call	0xb54	; 0xb54 <fputc>
 aa6:	a2 fe       	sbrs	r10, 2
 aa8:	17 c0       	rjmp	.+46     	; 0xad8 <__stack+0x279>
 aaa:	a1 fc       	sbrc	r10, 1
 aac:	03 c0       	rjmp	.+6      	; 0xab4 <__stack+0x255>
 aae:	88 e7       	ldi	r24, 0x78	; 120
 ab0:	90 e0       	ldi	r25, 0x00	; 0
 ab2:	02 c0       	rjmp	.+4      	; 0xab8 <__stack+0x259>
 ab4:	88 e5       	ldi	r24, 0x58	; 88
 ab6:	90 e0       	ldi	r25, 0x00	; 0
 ab8:	b6 01       	movw	r22, r12
 aba:	0c c0       	rjmp	.+24     	; 0xad4 <__stack+0x275>
 abc:	8a 2d       	mov	r24, r10
 abe:	86 78       	andi	r24, 0x86	; 134
 ac0:	59 f0       	breq	.+22     	; 0xad8 <__stack+0x279>
 ac2:	a1 fe       	sbrs	r10, 1
 ac4:	02 c0       	rjmp	.+4      	; 0xaca <__stack+0x26b>
 ac6:	8b e2       	ldi	r24, 0x2B	; 43
 ac8:	01 c0       	rjmp	.+2      	; 0xacc <__stack+0x26d>
 aca:	80 e2       	ldi	r24, 0x20	; 32
 acc:	a7 fc       	sbrc	r10, 7
 ace:	8d e2       	ldi	r24, 0x2D	; 45
 ad0:	b6 01       	movw	r22, r12
 ad2:	90 e0       	ldi	r25, 0x00	; 0
 ad4:	0e 94 aa 05 	call	0xb54	; 0xb54 <fputc>
 ad8:	89 14       	cp	r8, r9
 ada:	38 f4       	brcc	.+14     	; 0xaea <__stack+0x28b>
 adc:	b6 01       	movw	r22, r12
 ade:	80 e3       	ldi	r24, 0x30	; 48
 ae0:	90 e0       	ldi	r25, 0x00	; 0
 ae2:	0e 94 aa 05 	call	0xb54	; 0xb54 <fputc>
 ae6:	9a 94       	dec	r9
 ae8:	f7 cf       	rjmp	.-18     	; 0xad8 <__stack+0x279>
 aea:	8a 94       	dec	r8
 aec:	f3 01       	movw	r30, r6
 aee:	e8 0d       	add	r30, r8
 af0:	f1 1d       	adc	r31, r1
 af2:	80 81       	ld	r24, Z
 af4:	b6 01       	movw	r22, r12
 af6:	90 e0       	ldi	r25, 0x00	; 0
 af8:	0e 94 aa 05 	call	0xb54	; 0xb54 <fputc>
 afc:	81 10       	cpse	r8, r1
 afe:	f5 cf       	rjmp	.-22     	; 0xaea <__stack+0x28b>
 b00:	22 20       	and	r2, r2
 b02:	09 f4       	brne	.+2      	; 0xb06 <__stack+0x2a7>
 b04:	42 ce       	rjmp	.-892    	; 0x78a <vfprintf+0x24>
 b06:	b6 01       	movw	r22, r12
 b08:	80 e2       	ldi	r24, 0x20	; 32
 b0a:	90 e0       	ldi	r25, 0x00	; 0
 b0c:	0e 94 aa 05 	call	0xb54	; 0xb54 <fputc>
 b10:	2a 94       	dec	r2
 b12:	f6 cf       	rjmp	.-20     	; 0xb00 <__stack+0x2a1>
 b14:	f6 01       	movw	r30, r12
 b16:	86 81       	ldd	r24, Z+6	; 0x06
 b18:	97 81       	ldd	r25, Z+7	; 0x07
 b1a:	02 c0       	rjmp	.+4      	; 0xb20 <__stack+0x2c1>
 b1c:	8f ef       	ldi	r24, 0xFF	; 255
 b1e:	9f ef       	ldi	r25, 0xFF	; 255
 b20:	2b 96       	adiw	r28, 0x0b	; 11
 b22:	e2 e1       	ldi	r30, 0x12	; 18
 b24:	0c 94 60 06 	jmp	0xcc0	; 0xcc0 <__epilogue_restores__>

00000b28 <strnlen_P>:
 b28:	fc 01       	movw	r30, r24
 b2a:	05 90       	lpm	r0, Z+
 b2c:	61 50       	subi	r22, 0x01	; 1
 b2e:	70 40       	sbci	r23, 0x00	; 0
 b30:	01 10       	cpse	r0, r1
 b32:	d8 f7       	brcc	.-10     	; 0xb2a <strnlen_P+0x2>
 b34:	80 95       	com	r24
 b36:	90 95       	com	r25
 b38:	8e 0f       	add	r24, r30
 b3a:	9f 1f       	adc	r25, r31
 b3c:	08 95       	ret

00000b3e <strnlen>:
 b3e:	fc 01       	movw	r30, r24
 b40:	61 50       	subi	r22, 0x01	; 1
 b42:	70 40       	sbci	r23, 0x00	; 0
 b44:	01 90       	ld	r0, Z+
 b46:	01 10       	cpse	r0, r1
 b48:	d8 f7       	brcc	.-10     	; 0xb40 <strnlen+0x2>
 b4a:	80 95       	com	r24
 b4c:	90 95       	com	r25
 b4e:	8e 0f       	add	r24, r30
 b50:	9f 1f       	adc	r25, r31
 b52:	08 95       	ret

00000b54 <fputc>:
 b54:	0f 93       	push	r16
 b56:	1f 93       	push	r17
 b58:	cf 93       	push	r28
 b5a:	df 93       	push	r29
 b5c:	fb 01       	movw	r30, r22
 b5e:	23 81       	ldd	r18, Z+3	; 0x03
 b60:	21 fd       	sbrc	r18, 1
 b62:	03 c0       	rjmp	.+6      	; 0xb6a <fputc+0x16>
 b64:	8f ef       	ldi	r24, 0xFF	; 255
 b66:	9f ef       	ldi	r25, 0xFF	; 255
 b68:	2c c0       	rjmp	.+88     	; 0xbc2 <fputc+0x6e>
 b6a:	22 ff       	sbrs	r18, 2
 b6c:	16 c0       	rjmp	.+44     	; 0xb9a <fputc+0x46>
 b6e:	46 81       	ldd	r20, Z+6	; 0x06
 b70:	57 81       	ldd	r21, Z+7	; 0x07
 b72:	24 81       	ldd	r18, Z+4	; 0x04
 b74:	35 81       	ldd	r19, Z+5	; 0x05
 b76:	42 17       	cp	r20, r18
 b78:	53 07       	cpc	r21, r19
 b7a:	44 f4       	brge	.+16     	; 0xb8c <fputc+0x38>
 b7c:	a0 81       	ld	r26, Z
 b7e:	b1 81       	ldd	r27, Z+1	; 0x01
 b80:	9d 01       	movw	r18, r26
 b82:	2f 5f       	subi	r18, 0xFF	; 255
 b84:	3f 4f       	sbci	r19, 0xFF	; 255
 b86:	31 83       	std	Z+1, r19	; 0x01
 b88:	20 83       	st	Z, r18
 b8a:	8c 93       	st	X, r24
 b8c:	26 81       	ldd	r18, Z+6	; 0x06
 b8e:	37 81       	ldd	r19, Z+7	; 0x07
 b90:	2f 5f       	subi	r18, 0xFF	; 255
 b92:	3f 4f       	sbci	r19, 0xFF	; 255
 b94:	37 83       	std	Z+7, r19	; 0x07
 b96:	26 83       	std	Z+6, r18	; 0x06
 b98:	14 c0       	rjmp	.+40     	; 0xbc2 <fputc+0x6e>
 b9a:	8b 01       	movw	r16, r22
 b9c:	ec 01       	movw	r28, r24
 b9e:	fb 01       	movw	r30, r22
 ba0:	00 84       	ldd	r0, Z+8	; 0x08
 ba2:	f1 85       	ldd	r31, Z+9	; 0x09
 ba4:	e0 2d       	mov	r30, r0
 ba6:	09 95       	icall
 ba8:	89 2b       	or	r24, r25
 baa:	e1 f6       	brne	.-72     	; 0xb64 <fputc+0x10>
 bac:	d8 01       	movw	r26, r16
 bae:	16 96       	adiw	r26, 0x06	; 6
 bb0:	8d 91       	ld	r24, X+
 bb2:	9c 91       	ld	r25, X
 bb4:	17 97       	sbiw	r26, 0x07	; 7
 bb6:	01 96       	adiw	r24, 0x01	; 1
 bb8:	17 96       	adiw	r26, 0x07	; 7
 bba:	9c 93       	st	X, r25
 bbc:	8e 93       	st	-X, r24
 bbe:	16 97       	sbiw	r26, 0x06	; 6
 bc0:	ce 01       	movw	r24, r28
 bc2:	df 91       	pop	r29
 bc4:	cf 91       	pop	r28
 bc6:	1f 91       	pop	r17
 bc8:	0f 91       	pop	r16
 bca:	08 95       	ret

00000bcc <__ultoa_invert>:
 bcc:	fa 01       	movw	r30, r20
 bce:	aa 27       	eor	r26, r26
 bd0:	28 30       	cpi	r18, 0x08	; 8
 bd2:	51 f1       	breq	.+84     	; 0xc28 <__ultoa_invert+0x5c>
 bd4:	20 31       	cpi	r18, 0x10	; 16
 bd6:	81 f1       	breq	.+96     	; 0xc38 <__ultoa_invert+0x6c>
 bd8:	e8 94       	clt
 bda:	6f 93       	push	r22
 bdc:	6e 7f       	andi	r22, 0xFE	; 254
 bde:	6e 5f       	subi	r22, 0xFE	; 254
 be0:	7f 4f       	sbci	r23, 0xFF	; 255
 be2:	8f 4f       	sbci	r24, 0xFF	; 255
 be4:	9f 4f       	sbci	r25, 0xFF	; 255
 be6:	af 4f       	sbci	r26, 0xFF	; 255
 be8:	b1 e0       	ldi	r27, 0x01	; 1
 bea:	3e d0       	rcall	.+124    	; 0xc68 <__ultoa_invert+0x9c>
 bec:	b4 e0       	ldi	r27, 0x04	; 4
 bee:	3c d0       	rcall	.+120    	; 0xc68 <__ultoa_invert+0x9c>
 bf0:	67 0f       	add	r22, r23
 bf2:	78 1f       	adc	r23, r24
 bf4:	89 1f       	adc	r24, r25
 bf6:	9a 1f       	adc	r25, r26
 bf8:	a1 1d       	adc	r26, r1
 bfa:	68 0f       	add	r22, r24
 bfc:	79 1f       	adc	r23, r25
 bfe:	8a 1f       	adc	r24, r26
 c00:	91 1d       	adc	r25, r1
 c02:	a1 1d       	adc	r26, r1
 c04:	6a 0f       	add	r22, r26
 c06:	71 1d       	adc	r23, r1
 c08:	81 1d       	adc	r24, r1
 c0a:	91 1d       	adc	r25, r1
 c0c:	a1 1d       	adc	r26, r1
 c0e:	20 d0       	rcall	.+64     	; 0xc50 <__ultoa_invert+0x84>
 c10:	09 f4       	brne	.+2      	; 0xc14 <__ultoa_invert+0x48>
 c12:	68 94       	set
 c14:	3f 91       	pop	r19
 c16:	2a e0       	ldi	r18, 0x0A	; 10
 c18:	26 9f       	mul	r18, r22
 c1a:	11 24       	eor	r1, r1
 c1c:	30 19       	sub	r19, r0
 c1e:	30 5d       	subi	r19, 0xD0	; 208
 c20:	31 93       	st	Z+, r19
 c22:	de f6       	brtc	.-74     	; 0xbda <__ultoa_invert+0xe>
 c24:	cf 01       	movw	r24, r30
 c26:	08 95       	ret
 c28:	46 2f       	mov	r20, r22
 c2a:	47 70       	andi	r20, 0x07	; 7
 c2c:	40 5d       	subi	r20, 0xD0	; 208
 c2e:	41 93       	st	Z+, r20
 c30:	b3 e0       	ldi	r27, 0x03	; 3
 c32:	0f d0       	rcall	.+30     	; 0xc52 <__ultoa_invert+0x86>
 c34:	c9 f7       	brne	.-14     	; 0xc28 <__ultoa_invert+0x5c>
 c36:	f6 cf       	rjmp	.-20     	; 0xc24 <__ultoa_invert+0x58>
 c38:	46 2f       	mov	r20, r22
 c3a:	4f 70       	andi	r20, 0x0F	; 15
 c3c:	40 5d       	subi	r20, 0xD0	; 208
 c3e:	4a 33       	cpi	r20, 0x3A	; 58
 c40:	18 f0       	brcs	.+6      	; 0xc48 <__ultoa_invert+0x7c>
 c42:	49 5d       	subi	r20, 0xD9	; 217
 c44:	31 fd       	sbrc	r19, 1
 c46:	40 52       	subi	r20, 0x20	; 32
 c48:	41 93       	st	Z+, r20
 c4a:	02 d0       	rcall	.+4      	; 0xc50 <__ultoa_invert+0x84>
 c4c:	a9 f7       	brne	.-22     	; 0xc38 <__ultoa_invert+0x6c>
 c4e:	ea cf       	rjmp	.-44     	; 0xc24 <__ultoa_invert+0x58>
 c50:	b4 e0       	ldi	r27, 0x04	; 4
 c52:	a6 95       	lsr	r26
 c54:	97 95       	ror	r25
 c56:	87 95       	ror	r24
 c58:	77 95       	ror	r23
 c5a:	67 95       	ror	r22
 c5c:	ba 95       	dec	r27
 c5e:	c9 f7       	brne	.-14     	; 0xc52 <__ultoa_invert+0x86>
 c60:	00 97       	sbiw	r24, 0x00	; 0
 c62:	61 05       	cpc	r22, r1
 c64:	71 05       	cpc	r23, r1
 c66:	08 95       	ret
 c68:	9b 01       	movw	r18, r22
 c6a:	ac 01       	movw	r20, r24
 c6c:	0a 2e       	mov	r0, r26
 c6e:	06 94       	lsr	r0
 c70:	57 95       	ror	r21
 c72:	47 95       	ror	r20
 c74:	37 95       	ror	r19
 c76:	27 95       	ror	r18
 c78:	ba 95       	dec	r27
 c7a:	c9 f7       	brne	.-14     	; 0xc6e <__ultoa_invert+0xa2>
 c7c:	62 0f       	add	r22, r18
 c7e:	73 1f       	adc	r23, r19
 c80:	84 1f       	adc	r24, r20
 c82:	95 1f       	adc	r25, r21
 c84:	a0 1d       	adc	r26, r0
 c86:	08 95       	ret

00000c88 <__prologue_saves__>:
 c88:	2f 92       	push	r2
 c8a:	3f 92       	push	r3
 c8c:	4f 92       	push	r4
 c8e:	5f 92       	push	r5
 c90:	6f 92       	push	r6
 c92:	7f 92       	push	r7
 c94:	8f 92       	push	r8
 c96:	9f 92       	push	r9
 c98:	af 92       	push	r10
 c9a:	bf 92       	push	r11
 c9c:	cf 92       	push	r12
 c9e:	df 92       	push	r13
 ca0:	ef 92       	push	r14
 ca2:	ff 92       	push	r15
 ca4:	0f 93       	push	r16
 ca6:	1f 93       	push	r17
 ca8:	cf 93       	push	r28
 caa:	df 93       	push	r29
 cac:	cd b7       	in	r28, 0x3d	; 61
 cae:	de b7       	in	r29, 0x3e	; 62
 cb0:	ca 1b       	sub	r28, r26
 cb2:	db 0b       	sbc	r29, r27
 cb4:	0f b6       	in	r0, 0x3f	; 63
 cb6:	f8 94       	cli
 cb8:	de bf       	out	0x3e, r29	; 62
 cba:	0f be       	out	0x3f, r0	; 63
 cbc:	cd bf       	out	0x3d, r28	; 61
 cbe:	09 94       	ijmp

00000cc0 <__epilogue_restores__>:
 cc0:	2a 88       	ldd	r2, Y+18	; 0x12
 cc2:	39 88       	ldd	r3, Y+17	; 0x11
 cc4:	48 88       	ldd	r4, Y+16	; 0x10
 cc6:	5f 84       	ldd	r5, Y+15	; 0x0f
 cc8:	6e 84       	ldd	r6, Y+14	; 0x0e
 cca:	7d 84       	ldd	r7, Y+13	; 0x0d
 ccc:	8c 84       	ldd	r8, Y+12	; 0x0c
 cce:	9b 84       	ldd	r9, Y+11	; 0x0b
 cd0:	aa 84       	ldd	r10, Y+10	; 0x0a
 cd2:	b9 84       	ldd	r11, Y+9	; 0x09
 cd4:	c8 84       	ldd	r12, Y+8	; 0x08
 cd6:	df 80       	ldd	r13, Y+7	; 0x07
 cd8:	ee 80       	ldd	r14, Y+6	; 0x06
 cda:	fd 80       	ldd	r15, Y+5	; 0x05
 cdc:	0c 81       	ldd	r16, Y+4	; 0x04
 cde:	1b 81       	ldd	r17, Y+3	; 0x03
 ce0:	aa 81       	ldd	r26, Y+2	; 0x02
 ce2:	b9 81       	ldd	r27, Y+1	; 0x01
 ce4:	ce 0f       	add	r28, r30
 ce6:	d1 1d       	adc	r29, r1
 ce8:	0f b6       	in	r0, 0x3f	; 63
 cea:	f8 94       	cli
 cec:	de bf       	out	0x3e, r29	; 62
 cee:	0f be       	out	0x3f, r0	; 63
 cf0:	cd bf       	out	0x3d, r28	; 61
 cf2:	ed 01       	movw	r28, r26
 cf4:	08 95       	ret

00000cf6 <_exit>:
 cf6:	f8 94       	cli

00000cf8 <__stop_program>:
 cf8:	ff cf       	rjmp	.-2      	; 0xcf8 <__stop_program>
