
unit9_lesson1_section_lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000045a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  0000045a  000004ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800076  00800076  00000504  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000534  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001443  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000934  00000000  00000000  00001ab3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008ee  00000000  00000000  000023e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000280  00000000  00000000  00002cd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000751  00000000  00000000  00002f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009e6  00000000  00000000  000036a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  0000408f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 b0 01 	jmp	0x360	; 0x360 <__vector_10>
  2c:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e5       	ldi	r30, 0x5A	; 90
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e7       	ldi	r26, 0x76	; 118
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 37       	cpi	r26, 0x7E	; 126
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 08 01 	call	0x210	; 0x210 <main>
  8a:	0c 94 2b 02 	jmp	0x456	; 0x456 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_Command>:
	LCD_Command_Port &= ~(1<<EN);
	_delay_ms(3);
#endif
	
#ifdef FOUR_MODE
	LCD_Data_Port = (LCD_Data_Port & 0x0F) | (cmnd & 0xF0);	/* Sending upper nibble */
  92:	9b b3       	in	r25, 0x1b	; 27
  94:	9f 70       	andi	r25, 0x0F	; 15
  96:	28 2f       	mov	r18, r24
  98:	20 7f       	andi	r18, 0xF0	; 240
  9a:	92 2b       	or	r25, r18
  9c:	9b bb       	out	0x1b, r25	; 27
	LCD_Command_Port &= ~ (1<<RS);							/* RS=0, command reg. */
  9e:	9b b3       	in	r25, 0x1b	; 27
  a0:	9e 7f       	andi	r25, 0xFE	; 254
  a2:	9b bb       	out	0x1b, r25	; 27
	LCD_Command_Port |= (1<<EN);							/* Enable pulse */
  a4:	9b b3       	in	r25, 0x1b	; 27
  a6:	94 60       	ori	r25, 0x04	; 4
  a8:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	00 00       	nop
	_delay_us(1);
	LCD_Command_Port &= ~ (1<<EN);
  ac:	9b b3       	in	r25, 0x1b	; 27
  ae:	9b 7f       	andi	r25, 0xFB	; 251
  b0:	9b bb       	out	0x1b, r25	; 27
  b2:	32 e4       	ldi	r19, 0x42	; 66
  b4:	3a 95       	dec	r19
  b6:	f1 f7       	brne	.-4      	; 0xb4 <LCD_Command+0x22>
  b8:	00 c0       	rjmp	.+0      	; 0xba <LCD_Command+0x28>
	_delay_us(200);
	LCD_Data_Port = (LCD_Data_Port & 0x0F) | (cmnd << 4);	/* Sending lower nibble */
  ba:	2b b3       	in	r18, 0x1b	; 27
  bc:	30 e1       	ldi	r19, 0x10	; 16
  be:	83 9f       	mul	r24, r19
  c0:	c0 01       	movw	r24, r0
  c2:	11 24       	eor	r1, r1
  c4:	92 2f       	mov	r25, r18
  c6:	9f 70       	andi	r25, 0x0F	; 15
  c8:	89 2b       	or	r24, r25
  ca:	8b bb       	out	0x1b, r24	; 27
	LCD_Command_Port |= (1<<EN);
  cc:	8b b3       	in	r24, 0x1b	; 27
  ce:	84 60       	ori	r24, 0x04	; 4
  d0:	8b bb       	out	0x1b, r24	; 27
  d2:	00 00       	nop
	_delay_us(1);
	LCD_Command_Port &= ~ (1<<EN);
  d4:	8b b3       	in	r24, 0x1b	; 27
  d6:	8b 7f       	andi	r24, 0xFB	; 251
  d8:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	83 ef       	ldi	r24, 0xF3	; 243
  dc:	91 e0       	ldi	r25, 0x01	; 1
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <LCD_Command+0x4c>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <LCD_Command+0x52>
  e4:	00 00       	nop
  e6:	08 95       	ret

000000e8 <LCD_Init>:
	count++;
}

void LCD_Init (void)					/* LCD Initialize function */
{
	LCD_Command_Dir = 0xFF;				/* Make LCD command port direction as o/p */
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	8a bb       	out	0x1a, r24	; 26
	LCD_Data_Dir = 0xFF;				/* Make LCD data port direction as o/p */
  ec:	8a bb       	out	0x1a, r24	; 26
  ee:	87 e8       	ldi	r24, 0x87	; 135
  f0:	93 e1       	ldi	r25, 0x13	; 19
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <LCD_Init+0xa>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <LCD_Init+0x10>
  f8:	00 00       	nop
#ifdef EIGHT_MODE 
	LCD_Command (eight_bit_mode);							/* Initialization of 16X2 LCD in 8bit mode */
#endif

#ifdef FOUR_MODE
	LCD_Command (four_bit_mode);							/* Initialization of 16X2 LCD in 4bit mode */
  fa:	82 e0       	ldi	r24, 0x02	; 2
  fc:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command (four_bit_font);							/* 2 line, 5*7 matrix in 4-bit mode font */
 100:	88 e2       	ldi	r24, 0x28	; 40
 102:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
#endif
	LCD_Command (Display_ON_Cursor_OFF);					/* Display ON Cursor OFF */
 106:	8c e0       	ldi	r24, 0x0C	; 12
 108:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command (Auto_Increment_cursor);					/* Auto Increment cursor */
 10c:	86 e0       	ldi	r24, 0x06	; 6
 10e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command (clear_display);							/* clear display */
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command (cursor_at_home_position);					/* cursor at home position */
 118:	80 e8       	ldi	r24, 0x80	; 128
 11a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 11e:	08 95       	ret

00000120 <LCD_xy>:
	count=pos;
	LCD_String(str);					/* Call LCD string function */
}

void LCD_xy (char row, char pos)	/* Send string to LCD with xy position */
{
 120:	cf 93       	push	r28
 122:	c6 2f       	mov	r28, r22
	if (row == 0 && pos<16)
 124:	81 11       	cpse	r24, r1
 126:	08 c0       	rjmp	.+16     	; 0x138 <LCD_xy+0x18>
 128:	60 31       	cpi	r22, 0x10	; 16
 12a:	30 f4       	brcc	.+12     	; 0x138 <LCD_xy+0x18>
	LCD_Command((pos & 0x0F)|cursor_at_home_position);		/* Command of first row and required position<16 */
 12c:	86 2f       	mov	r24, r22
 12e:	8f 70       	andi	r24, 0x0F	; 15
 130:	80 68       	ori	r24, 0x80	; 128
 132:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 136:	09 c0       	rjmp	.+18     	; 0x14a <LCD_xy+0x2a>
	else if (row == 1 && pos<16)
 138:	81 30       	cpi	r24, 0x01	; 1
 13a:	39 f4       	brne	.+14     	; 0x14a <LCD_xy+0x2a>
 13c:	c0 31       	cpi	r28, 0x10	; 16
 13e:	28 f4       	brcc	.+10     	; 0x14a <LCD_xy+0x2a>
	LCD_Command((pos & 0x0F)|Go_to_2nd_line);		/* Command of first row and required position<16 */
 140:	8c 2f       	mov	r24, r28
 142:	8f 70       	andi	r24, 0x0F	; 15
 144:	80 6c       	ori	r24, 0xC0	; 192
 146:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	count=pos;
 14a:	c0 93 76 00 	sts	0x0076, r28	; 0x800076 <__data_end>
}
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <LCD_Char>:
#endif
	
}

void LCD_Char (unsigned char char_data)	/* LCD data write function */
{	if(count == 16){
 152:	cf 93       	push	r28
 154:	c8 2f       	mov	r28, r24
 156:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
 15a:	80 31       	cpi	r24, 0x10	; 16
 15c:	29 f4       	brne	.+10     	; 0x168 <LCD_Char+0x16>
	LCD_xy(1,0);		
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	0e 94 90 00 	call	0x120	; 0x120 <LCD_xy>
 166:	04 c0       	rjmp	.+8      	; 0x170 <LCD_Char+0x1e>
	}else if(count == 32){
 168:	80 32       	cpi	r24, 0x20	; 32
 16a:	11 f4       	brne	.+4      	; 0x170 <LCD_Char+0x1e>
		//LCD_Clear();
		count = 0;
 16c:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <__data_end>
	}
	_delay_ms(50);
	#endif

	#ifdef FOUR_MODE
	LCD_Data_Port = (LCD_Data_Port & 0x0F) | (char_data & 0xF0);	/* sending upper nibble */
 170:	8b b3       	in	r24, 0x1b	; 27
 172:	8f 70       	andi	r24, 0x0F	; 15
 174:	9c 2f       	mov	r25, r28
 176:	90 7f       	andi	r25, 0xF0	; 240
 178:	89 2b       	or	r24, r25
 17a:	8b bb       	out	0x1b, r24	; 27
	LCD_Command_Port |= (1<<RS);									/* RS=1 Data reg. */
 17c:	8b b3       	in	r24, 0x1b	; 27
 17e:	81 60       	ori	r24, 0x01	; 1
 180:	8b bb       	out	0x1b, r24	; 27
	LCD_Command_Port &= ~(1<<RW);									/* RW=0 write operation */
 182:	8b b3       	in	r24, 0x1b	; 27
 184:	8d 7f       	andi	r24, 0xFD	; 253
 186:	8b bb       	out	0x1b, r24	; 27
	LCD_Command_Port |= (1<<EN);									/* Enable Pulse */
 188:	8b b3       	in	r24, 0x1b	; 27
 18a:	84 60       	ori	r24, 0x04	; 4
 18c:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18e:	00 00       	nop
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
 190:	8b b3       	in	r24, 0x1b	; 27
 192:	8b 7f       	andi	r24, 0xFB	; 251
 194:	8b bb       	out	0x1b, r24	; 27
 196:	32 e4       	ldi	r19, 0x42	; 66
 198:	3a 95       	dec	r19
 19a:	f1 f7       	brne	.-4      	; 0x198 <LCD_Char+0x46>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <LCD_Char+0x4c>
	_delay_us(200);
	LCD_Data_Port = (LCD_Data_Port & 0x0F) | (char_data << 4); /* sending lower nibble */
 19e:	2b b3       	in	r18, 0x1b	; 27
 1a0:	30 e1       	ldi	r19, 0x10	; 16
 1a2:	c3 9f       	mul	r28, r19
 1a4:	c0 01       	movw	r24, r0
 1a6:	11 24       	eor	r1, r1
 1a8:	92 2f       	mov	r25, r18
 1aa:	9f 70       	andi	r25, 0x0F	; 15
 1ac:	89 2b       	or	r24, r25
 1ae:	8b bb       	out	0x1b, r24	; 27
	LCD_Command_Port |= (1<<EN);		/* Enable Pulse */
 1b0:	8b b3       	in	r24, 0x1b	; 27
 1b2:	84 60       	ori	r24, 0x04	; 4
 1b4:	8b bb       	out	0x1b, r24	; 27
 1b6:	00 00       	nop
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
 1b8:	8b b3       	in	r24, 0x1b	; 27
 1ba:	8b 7f       	andi	r24, 0xFB	; 251
 1bc:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1be:	83 ef       	ldi	r24, 0xF3	; 243
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <LCD_Char+0x70>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <LCD_Char+0x76>
 1c8:	00 00       	nop
	if(F_CPU == 8000000UL){
		_delay_ms(100);
	}
	#endif
	
	count++;
 1ca:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
 1ce:	8f 5f       	subi	r24, 0xFF	; 255
 1d0:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
}
 1d4:	cf 91       	pop	r28
 1d6:	08 95       	ret

000001d8 <LCD_String>:
	LCD_Command (clear_display);							/* clear display */
	LCD_Command (cursor_at_home_position);					/* cursor at home position */
}

void LCD_String (char *str)				/* Send string to LCD function */
{
 1d8:	0f 93       	push	r16
 1da:	1f 93       	push	r17
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	8c 01       	movw	r16, r24
	int i;
	for(i=0;str[i]!=0;i++)				/* Send each char of string till the NULL */
 1e2:	c0 e0       	ldi	r28, 0x00	; 0
 1e4:	d0 e0       	ldi	r29, 0x00	; 0
 1e6:	09 c0       	rjmp	.+18     	; 0x1fa <LCD_String+0x22>
	{
		LCD_Char (str[i]);
 1e8:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_Char>
 1ec:	83 ec       	ldi	r24, 0xC3	; 195
 1ee:	99 e0       	ldi	r25, 0x09	; 9
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <LCD_String+0x18>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <LCD_String+0x1e>
 1f6:	00 00       	nop
}

void LCD_String (char *str)				/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)				/* Send each char of string till the NULL */
 1f8:	21 96       	adiw	r28, 0x01	; 1
 1fa:	f8 01       	movw	r30, r16
 1fc:	ec 0f       	add	r30, r28
 1fe:	fd 1f       	adc	r31, r29
 200:	80 81       	ld	r24, Z
 202:	81 11       	cpse	r24, r1
 204:	f1 cf       	rjmp	.-30     	; 0x1e8 <LCD_String+0x10>
	{
		LCD_Char (str[i]);
		_delay_ms(10);
	}
}
 206:	df 91       	pop	r29
 208:	cf 91       	pop	r28
 20a:	1f 91       	pop	r17
 20c:	0f 91       	pop	r16
 20e:	08 95       	ret

00000210 <main>:




int main(void)
{	volatile uint8_t dutyRead;
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	00 d0       	rcall	.+0      	; 0x216 <main+0x6>
 216:	00 d0       	rcall	.+0      	; 0x218 <main+0x8>
 218:	00 d0       	rcall	.+0      	; 0x21a <main+0xa>
 21a:	cd b7       	in	r28, 0x3d	; 61
 21c:	de b7       	in	r29, 0x3e	; 62
	ST_TIMER0Config_t TimCnfg = {PWM_PhaseCorrect, PRESCAING_CLK256,OCIE_DISABLE,TOVIE_DISABLE,ClrUP_SetDown_Phase_correct_PWM};
 21e:	85 e0       	ldi	r24, 0x05	; 5
 220:	e0 e6       	ldi	r30, 0x60	; 96
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	de 01       	movw	r26, r28
 226:	12 96       	adiw	r26, 0x02	; 2
 228:	01 90       	ld	r0, Z+
 22a:	0d 92       	st	X+, r0
 22c:	8a 95       	dec	r24
 22e:	e1 f7       	brne	.-8      	; 0x228 <main+0x18>
	TIMER0_Init(&TimCnfg);
 230:	ce 01       	movw	r24, r28
 232:	02 96       	adiw	r24, 0x02	; 2
 234:	0e 94 49 01 	call	0x292	; 0x292 <TIMER0_Init>
	LCD_Init();
 238:	0e 94 74 00 	call	0xe8	; 0xe8 <LCD_Init>
	LCD_String(" Duty cycle=   %");
 23c:	85 e6       	ldi	r24, 0x65	; 101
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LCD_String>
	while (1) 
    {	int i =50;
 244:	02 e3       	ldi	r16, 0x32	; 50
 246:	10 e0       	ldi	r17, 0x00	; 0
		while (i>0)
 248:	17 c0       	rjmp	.+46     	; 0x278 <main+0x68>
		{
			TIMER0_SetDutyValue(i);
 24a:	80 2f       	mov	r24, r16
 24c:	0e 94 a5 01 	call	0x34a	; 0x34a <TIMER0_SetDutyValue>
			i--;
 250:	01 50       	subi	r16, 0x01	; 1
 252:	11 09       	sbc	r17, r1
			LCD_xy(1,11);
 254:	6b e0       	ldi	r22, 0x0B	; 11
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	0e 94 90 00 	call	0x120	; 0x120 <LCD_xy>
			dutyRead = i;
 25c:	09 83       	std	Y+1, r16	; 0x01
			LCD_Char(dutyRead);
 25e:	89 81       	ldd	r24, Y+1	; 0x01
 260:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_Char>
 264:	2a e2       	ldi	r18, 0x2A	; 42
 266:	30 e5       	ldi	r19, 0x50	; 80
 268:	8e ef       	ldi	r24, 0xFE	; 254
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	21 50       	subi	r18, 0x01	; 1
 26e:	30 40       	sbci	r19, 0x00	; 0
 270:	80 40       	sbci	r24, 0x00	; 0
 272:	90 40       	sbci	r25, 0x00	; 0
 274:	d9 f7       	brne	.-10     	; 0x26c <main+0x5c>
 276:	00 00       	nop
	TIMER0_Init(&TimCnfg);
	LCD_Init();
	LCD_String(" Duty cycle=   %");
	while (1) 
    {	int i =50;
		while (i>0)
 278:	10 16       	cp	r1, r16
 27a:	11 06       	cpc	r1, r17
 27c:	34 f3       	brlt	.-52     	; 0x24a <main+0x3a>
 27e:	2f e3       	ldi	r18, 0x3F	; 63
 280:	3d e0       	ldi	r19, 0x0D	; 13
 282:	83 e0       	ldi	r24, 0x03	; 3
 284:	21 50       	subi	r18, 0x01	; 1
 286:	30 40       	sbci	r19, 0x00	; 0
 288:	80 40       	sbci	r24, 0x00	; 0
 28a:	e1 f7       	brne	.-8      	; 0x284 <main+0x74>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <main+0x7e>
 28e:	00 00       	nop
 290:	d9 cf       	rjmp	.-78     	; 0x244 <main+0x34>

00000292 <TIMER0_Init>:
	
}
void TIMER0_SetCallback_CompareInterrupt(ptr_VoidFunVoid_t callback){
	
	
	callback_CM = callback;
 292:	00 97       	sbiw	r24, 0x00	; 0
 294:	09 f4       	brne	.+2      	; 0x298 <TIMER0_Init+0x6>
 296:	55 c0       	rjmp	.+170    	; 0x342 <TIMER0_Init+0xb0>
 298:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <Timer0Configuration+0x1>
 29c:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <Timer0Configuration>
 2a0:	fc 01       	movw	r30, r24
 2a2:	80 81       	ld	r24, Z
 2a4:	88 23       	and	r24, r24
 2a6:	31 f0       	breq	.+12     	; 0x2b4 <TIMER0_Init+0x22>
 2a8:	88 30       	cpi	r24, 0x08	; 8
 2aa:	21 f0       	breq	.+8      	; 0x2b4 <TIMER0_Init+0x22>
 2ac:	80 34       	cpi	r24, 0x40	; 64
 2ae:	11 f0       	breq	.+4      	; 0x2b4 <TIMER0_Init+0x22>
 2b0:	88 34       	cpi	r24, 0x48	; 72
 2b2:	a9 f4       	brne	.+42     	; 0x2de <TIMER0_Init+0x4c>
 2b4:	93 b7       	in	r25, 0x33	; 51
 2b6:	89 2b       	or	r24, r25
 2b8:	83 bf       	out	0x33, r24	; 51
 2ba:	e0 91 77 00 	lds	r30, 0x0077	; 0x800077 <Timer0Configuration>
 2be:	f0 91 78 00 	lds	r31, 0x0078	; 0x800078 <Timer0Configuration+0x1>
 2c2:	80 81       	ld	r24, Z
 2c4:	80 34       	cpi	r24, 0x40	; 64
 2c6:	11 f0       	breq	.+4      	; 0x2cc <TIMER0_Init+0x3a>
 2c8:	88 34       	cpi	r24, 0x48	; 72
 2ca:	49 f4       	brne	.+18     	; 0x2de <TIMER0_Init+0x4c>
 2cc:	84 81       	ldd	r24, Z+4	; 0x04
 2ce:	88 23       	and	r24, r24
 2d0:	31 f0       	breq	.+12     	; 0x2de <TIMER0_Init+0x4c>
 2d2:	93 b7       	in	r25, 0x33	; 51
 2d4:	89 2b       	or	r24, r25
 2d6:	83 bf       	out	0x33, r24	; 51
 2d8:	87 b3       	in	r24, 0x17	; 23
 2da:	88 60       	ori	r24, 0x08	; 8
 2dc:	87 bb       	out	0x17, r24	; 23
 2de:	e0 91 77 00 	lds	r30, 0x0077	; 0x800077 <Timer0Configuration>
 2e2:	f0 91 78 00 	lds	r31, 0x0078	; 0x800078 <Timer0Configuration+0x1>
 2e6:	82 81       	ldd	r24, Z+2	; 0x02
 2e8:	82 30       	cpi	r24, 0x02	; 2
 2ea:	11 f0       	breq	.+4      	; 0x2f0 <TIMER0_Init+0x5e>
 2ec:	81 11       	cpse	r24, r1
 2ee:	0b c0       	rjmp	.+22     	; 0x306 <TIMER0_Init+0x74>
 2f0:	99 b7       	in	r25, 0x39	; 57
 2f2:	89 2b       	or	r24, r25
 2f4:	89 bf       	out	0x39, r24	; 57
 2f6:	e0 91 77 00 	lds	r30, 0x0077	; 0x800077 <Timer0Configuration>
 2fa:	f0 91 78 00 	lds	r31, 0x0078	; 0x800078 <Timer0Configuration+0x1>
 2fe:	82 81       	ldd	r24, Z+2	; 0x02
 300:	82 30       	cpi	r24, 0x02	; 2
 302:	09 f4       	brne	.+2      	; 0x306 <TIMER0_Init+0x74>
 304:	78 94       	sei
 306:	e0 91 77 00 	lds	r30, 0x0077	; 0x800077 <Timer0Configuration>
 30a:	f0 91 78 00 	lds	r31, 0x0078	; 0x800078 <Timer0Configuration+0x1>
 30e:	83 81       	ldd	r24, Z+3	; 0x03
 310:	82 30       	cpi	r24, 0x02	; 2
 312:	58 f4       	brcc	.+22     	; 0x32a <TIMER0_Init+0x98>
 314:	99 b7       	in	r25, 0x39	; 57
 316:	89 2b       	or	r24, r25
 318:	89 bf       	out	0x39, r24	; 57
 31a:	e0 91 77 00 	lds	r30, 0x0077	; 0x800077 <Timer0Configuration>
 31e:	f0 91 78 00 	lds	r31, 0x0078	; 0x800078 <Timer0Configuration+0x1>
 322:	83 81       	ldd	r24, Z+3	; 0x03
 324:	81 30       	cpi	r24, 0x01	; 1
 326:	09 f4       	brne	.+2      	; 0x32a <TIMER0_Init+0x98>
 328:	78 94       	sei
 32a:	e0 91 77 00 	lds	r30, 0x0077	; 0x800077 <Timer0Configuration>
 32e:	f0 91 78 00 	lds	r31, 0x0078	; 0x800078 <Timer0Configuration+0x1>
 332:	81 81       	ldd	r24, Z+1	; 0x01
 334:	88 30       	cpi	r24, 0x08	; 8
 336:	38 f4       	brcc	.+14     	; 0x346 <TIMER0_Init+0xb4>
 338:	93 b7       	in	r25, 0x33	; 51
 33a:	89 2b       	or	r24, r25
 33c:	83 bf       	out	0x33, r24	; 51
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	08 95       	ret
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	08 95       	ret
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	08 95       	ret

0000034a <TIMER0_SetDutyValue>:
 34a:	2f ef       	ldi	r18, 0xFF	; 255
 34c:	82 9f       	mul	r24, r18
 34e:	c0 01       	movw	r24, r0
 350:	11 24       	eor	r1, r1
 352:	64 e6       	ldi	r22, 0x64	; 100
 354:	70 e0       	ldi	r23, 0x00	; 0
 356:	0e 94 03 02 	call	0x406	; 0x406 <__divmodhi4>
 35a:	6c bf       	out	0x3c, r22	; 60
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	08 95       	ret

00000360 <__vector_10>:
	
	
}


ISR(TIMER0_COMP_vect){
 360:	1f 92       	push	r1
 362:	0f 92       	push	r0
 364:	0f b6       	in	r0, 0x3f	; 63
 366:	0f 92       	push	r0
 368:	11 24       	eor	r1, r1
 36a:	2f 93       	push	r18
 36c:	3f 93       	push	r19
 36e:	4f 93       	push	r20
 370:	5f 93       	push	r21
 372:	6f 93       	push	r22
 374:	7f 93       	push	r23
 376:	8f 93       	push	r24
 378:	9f 93       	push	r25
 37a:	af 93       	push	r26
 37c:	bf 93       	push	r27
 37e:	ef 93       	push	r30
 380:	ff 93       	push	r31
	
	callback_CM();
 382:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <callback_CM>
 386:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <callback_CM+0x1>
 38a:	09 95       	icall
	
}
 38c:	ff 91       	pop	r31
 38e:	ef 91       	pop	r30
 390:	bf 91       	pop	r27
 392:	af 91       	pop	r26
 394:	9f 91       	pop	r25
 396:	8f 91       	pop	r24
 398:	7f 91       	pop	r23
 39a:	6f 91       	pop	r22
 39c:	5f 91       	pop	r21
 39e:	4f 91       	pop	r20
 3a0:	3f 91       	pop	r19
 3a2:	2f 91       	pop	r18
 3a4:	0f 90       	pop	r0
 3a6:	0f be       	out	0x3f, r0	; 63
 3a8:	0f 90       	pop	r0
 3aa:	1f 90       	pop	r1
 3ac:	18 95       	reti

000003ae <__vector_11>:

ISR(TIMER0_OVF_vect){
 3ae:	1f 92       	push	r1
 3b0:	0f 92       	push	r0
 3b2:	0f b6       	in	r0, 0x3f	; 63
 3b4:	0f 92       	push	r0
 3b6:	11 24       	eor	r1, r1
 3b8:	2f 93       	push	r18
 3ba:	3f 93       	push	r19
 3bc:	4f 93       	push	r20
 3be:	5f 93       	push	r21
 3c0:	6f 93       	push	r22
 3c2:	7f 93       	push	r23
 3c4:	8f 93       	push	r24
 3c6:	9f 93       	push	r25
 3c8:	af 93       	push	r26
 3ca:	bf 93       	push	r27
 3cc:	ef 93       	push	r30
 3ce:	ff 93       	push	r31
	
	u8_TOVNumber++;
 3d0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <u8_TOVNumber>
 3d4:	8f 5f       	subi	r24, 0xFF	; 255
 3d6:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <u8_TOVNumber>
	callback_OVF();
 3da:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <callback_OVF>
 3de:	f0 91 7d 00 	lds	r31, 0x007D	; 0x80007d <callback_OVF+0x1>
 3e2:	09 95       	icall
	
 3e4:	ff 91       	pop	r31
 3e6:	ef 91       	pop	r30
 3e8:	bf 91       	pop	r27
 3ea:	af 91       	pop	r26
 3ec:	9f 91       	pop	r25
 3ee:	8f 91       	pop	r24
 3f0:	7f 91       	pop	r23
 3f2:	6f 91       	pop	r22
 3f4:	5f 91       	pop	r21
 3f6:	4f 91       	pop	r20
 3f8:	3f 91       	pop	r19
 3fa:	2f 91       	pop	r18
 3fc:	0f 90       	pop	r0
 3fe:	0f be       	out	0x3f, r0	; 63
 400:	0f 90       	pop	r0
 402:	1f 90       	pop	r1
 404:	18 95       	reti

00000406 <__divmodhi4>:
 406:	97 fb       	bst	r25, 7
 408:	07 2e       	mov	r0, r23
 40a:	16 f4       	brtc	.+4      	; 0x410 <__divmodhi4+0xa>
 40c:	00 94       	com	r0
 40e:	07 d0       	rcall	.+14     	; 0x41e <__divmodhi4_neg1>
 410:	77 fd       	sbrc	r23, 7
 412:	09 d0       	rcall	.+18     	; 0x426 <__divmodhi4_neg2>
 414:	0e 94 17 02 	call	0x42e	; 0x42e <__udivmodhi4>
 418:	07 fc       	sbrc	r0, 7
 41a:	05 d0       	rcall	.+10     	; 0x426 <__divmodhi4_neg2>
 41c:	3e f4       	brtc	.+14     	; 0x42c <__divmodhi4_exit>

0000041e <__divmodhi4_neg1>:
 41e:	90 95       	com	r25
 420:	81 95       	neg	r24
 422:	9f 4f       	sbci	r25, 0xFF	; 255
 424:	08 95       	ret

00000426 <__divmodhi4_neg2>:
 426:	70 95       	com	r23
 428:	61 95       	neg	r22
 42a:	7f 4f       	sbci	r23, 0xFF	; 255

0000042c <__divmodhi4_exit>:
 42c:	08 95       	ret

0000042e <__udivmodhi4>:
 42e:	aa 1b       	sub	r26, r26
 430:	bb 1b       	sub	r27, r27
 432:	51 e1       	ldi	r21, 0x11	; 17
 434:	07 c0       	rjmp	.+14     	; 0x444 <__udivmodhi4_ep>

00000436 <__udivmodhi4_loop>:
 436:	aa 1f       	adc	r26, r26
 438:	bb 1f       	adc	r27, r27
 43a:	a6 17       	cp	r26, r22
 43c:	b7 07       	cpc	r27, r23
 43e:	10 f0       	brcs	.+4      	; 0x444 <__udivmodhi4_ep>
 440:	a6 1b       	sub	r26, r22
 442:	b7 0b       	sbc	r27, r23

00000444 <__udivmodhi4_ep>:
 444:	88 1f       	adc	r24, r24
 446:	99 1f       	adc	r25, r25
 448:	5a 95       	dec	r21
 44a:	a9 f7       	brne	.-22     	; 0x436 <__udivmodhi4_loop>
 44c:	80 95       	com	r24
 44e:	90 95       	com	r25
 450:	bc 01       	movw	r22, r24
 452:	cd 01       	movw	r24, r26
 454:	08 95       	ret

00000456 <_exit>:
 456:	f8 94       	cli

00000458 <__stop_program>:
 458:	ff cf       	rjmp	.-2      	; 0x458 <__stop_program>
