
unit7_lesson3_section3_lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b80  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08000cb0  08000cb0  00010cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000cd4  08000cd4  00020040  2**0
                  CONTENTS
  4 .ARM          00000000  08000cd4  08000cd4  00020040  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000cd4  08000cd4  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cd4  08000cd4  00010cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000cd8  08000cd8  00010cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08000cdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000040  08000d1c  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000064  08000d1c  00020064  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020069  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001071  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000622  00000000  00000000  0002111d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0000074c  00000000  00000000  0002173f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000168  00000000  00000000  00021e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000110  00000000  00000000  00021ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000022da  00000000  00000000  00022108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000277e  00000000  00000000  000243e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00007ef2  00000000  00000000  00026b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000003f4  00000000  00000000  0002ea54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000040 	.word	0x20000040
 800014c:	00000000 	.word	0x00000000
 8000150:	08000c98 	.word	0x08000c98

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000044 	.word	0x20000044
 800016c:	08000c98 	.word	0x08000c98

08000170 <Get_CRLH_Position>:
 * =======================================================================================
 * 							Generic Functions
 * =======================================================================================
 */
uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 800017a:	88fb      	ldrh	r3, [r7, #6]
 800017c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000180:	f000 80a5 	beq.w	80002ce <Get_CRLH_Position+0x15e>
 8000184:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000188:	f300 80a3 	bgt.w	80002d2 <Get_CRLH_Position+0x162>
 800018c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000190:	f000 809b 	beq.w	80002ca <Get_CRLH_Position+0x15a>
 8000194:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000198:	f300 809b 	bgt.w	80002d2 <Get_CRLH_Position+0x162>
 800019c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001a0:	f000 8091 	beq.w	80002c6 <Get_CRLH_Position+0x156>
 80001a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001a8:	f300 8093 	bgt.w	80002d2 <Get_CRLH_Position+0x162>
 80001ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80001b0:	f000 8087 	beq.w	80002c2 <Get_CRLH_Position+0x152>
 80001b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80001b8:	f300 808b 	bgt.w	80002d2 <Get_CRLH_Position+0x162>
 80001bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001c0:	d07d      	beq.n	80002be <Get_CRLH_Position+0x14e>
 80001c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001c6:	f300 8084 	bgt.w	80002d2 <Get_CRLH_Position+0x162>
 80001ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80001ce:	d074      	beq.n	80002ba <Get_CRLH_Position+0x14a>
 80001d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80001d4:	dc7d      	bgt.n	80002d2 <Get_CRLH_Position+0x162>
 80001d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80001da:	d06c      	beq.n	80002b6 <Get_CRLH_Position+0x146>
 80001dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80001e0:	dc77      	bgt.n	80002d2 <Get_CRLH_Position+0x162>
 80001e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80001e6:	d064      	beq.n	80002b2 <Get_CRLH_Position+0x142>
 80001e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80001ec:	dc71      	bgt.n	80002d2 <Get_CRLH_Position+0x162>
 80001ee:	2b80      	cmp	r3, #128	; 0x80
 80001f0:	d05d      	beq.n	80002ae <Get_CRLH_Position+0x13e>
 80001f2:	2b80      	cmp	r3, #128	; 0x80
 80001f4:	dc6d      	bgt.n	80002d2 <Get_CRLH_Position+0x162>
 80001f6:	2b20      	cmp	r3, #32
 80001f8:	dc48      	bgt.n	800028c <Get_CRLH_Position+0x11c>
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	dd69      	ble.n	80002d2 <Get_CRLH_Position+0x162>
 80001fe:	3b01      	subs	r3, #1
 8000200:	2b1f      	cmp	r3, #31
 8000202:	d866      	bhi.n	80002d2 <Get_CRLH_Position+0x162>
 8000204:	a201      	add	r2, pc, #4	; (adr r2, 800020c <Get_CRLH_Position+0x9c>)
 8000206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800020a:	bf00      	nop
 800020c:	08000293 	.word	0x08000293
 8000210:	08000297 	.word	0x08000297
 8000214:	080002d3 	.word	0x080002d3
 8000218:	0800029b 	.word	0x0800029b
 800021c:	080002d3 	.word	0x080002d3
 8000220:	080002d3 	.word	0x080002d3
 8000224:	080002d3 	.word	0x080002d3
 8000228:	0800029f 	.word	0x0800029f
 800022c:	080002d3 	.word	0x080002d3
 8000230:	080002d3 	.word	0x080002d3
 8000234:	080002d3 	.word	0x080002d3
 8000238:	080002d3 	.word	0x080002d3
 800023c:	080002d3 	.word	0x080002d3
 8000240:	080002d3 	.word	0x080002d3
 8000244:	080002d3 	.word	0x080002d3
 8000248:	080002a3 	.word	0x080002a3
 800024c:	080002d3 	.word	0x080002d3
 8000250:	080002d3 	.word	0x080002d3
 8000254:	080002d3 	.word	0x080002d3
 8000258:	080002d3 	.word	0x080002d3
 800025c:	080002d3 	.word	0x080002d3
 8000260:	080002d3 	.word	0x080002d3
 8000264:	080002d3 	.word	0x080002d3
 8000268:	080002d3 	.word	0x080002d3
 800026c:	080002d3 	.word	0x080002d3
 8000270:	080002d3 	.word	0x080002d3
 8000274:	080002d3 	.word	0x080002d3
 8000278:	080002d3 	.word	0x080002d3
 800027c:	080002d3 	.word	0x080002d3
 8000280:	080002d3 	.word	0x080002d3
 8000284:	080002d3 	.word	0x080002d3
 8000288:	080002a7 	.word	0x080002a7
 800028c:	2b40      	cmp	r3, #64	; 0x40
 800028e:	d00c      	beq.n	80002aa <Get_CRLH_Position+0x13a>
 8000290:	e01f      	b.n	80002d2 <Get_CRLH_Position+0x162>
	{
	case GPIO_PIN_0:
		return 0 ;
 8000292:	2300      	movs	r3, #0
 8000294:	e01e      	b.n	80002d4 <Get_CRLH_Position+0x164>
		break ;
	case GPIO_PIN_1:
		return 4 ;
 8000296:	2304      	movs	r3, #4
 8000298:	e01c      	b.n	80002d4 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_2:
		return 8 ;
 800029a:	2308      	movs	r3, #8
 800029c:	e01a      	b.n	80002d4 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_3:
		return 12 ;
 800029e:	230c      	movs	r3, #12
 80002a0:	e018      	b.n	80002d4 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_4:
		return 16 ;
 80002a2:	2310      	movs	r3, #16
 80002a4:	e016      	b.n	80002d4 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_5:
		return 20 ;
 80002a6:	2314      	movs	r3, #20
 80002a8:	e014      	b.n	80002d4 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_6:
		return 24 ;
 80002aa:	2318      	movs	r3, #24
 80002ac:	e012      	b.n	80002d4 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_7:
		return 28 ;
 80002ae:	231c      	movs	r3, #28
 80002b0:	e010      	b.n	80002d4 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_8:
		return 0 ;
 80002b2:	2300      	movs	r3, #0
 80002b4:	e00e      	b.n	80002d4 <Get_CRLH_Position+0x164>
		break ;
	case GPIO_PIN_9:
		return 4 ;
 80002b6:	2304      	movs	r3, #4
 80002b8:	e00c      	b.n	80002d4 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_10:
		return 8 ;
 80002ba:	2308      	movs	r3, #8
 80002bc:	e00a      	b.n	80002d4 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_11:
		return 12 ;
 80002be:	230c      	movs	r3, #12
 80002c0:	e008      	b.n	80002d4 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_12:
		return 16 ;
 80002c2:	2310      	movs	r3, #16
 80002c4:	e006      	b.n	80002d4 <Get_CRLH_Position+0x164>
		break ;


	case GPIO_PIN_13:
		return 20 ;
 80002c6:	2314      	movs	r3, #20
 80002c8:	e004      	b.n	80002d4 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_14:
		return 24 ;
 80002ca:	2318      	movs	r3, #24
 80002cc:	e002      	b.n	80002d4 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_15:
		return 28 ;
 80002ce:	231c      	movs	r3, #28
 80002d0:	e000      	b.n	80002d4 <Get_CRLH_Position+0x164>
		break ;


	}
	return 0 ;
 80002d2:	2300      	movs	r3, #0

}
 80002d4:	4618      	mov	r0, r3
 80002d6:	370c      	adds	r7, #12
 80002d8:	46bd      	mov	sp, r7
 80002da:	bc80      	pop	{r7}
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <MCAL_GPIO_Init>:
 * @retval 			-none
 * Note				-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 					 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx , GPIO_PINConfig_t* PinConfig)
{
 80002e0:	b590      	push	{r4, r7, lr}
 80002e2:	b085      	sub	sp, #20
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
 80002e8:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 >> 7
	//Port configuration register High (GPIOx_CRH) Configure PINS from 8 >> 15
	volatile uint32_t* ConfigRegister = NULL;
 80002ea:	2300      	movs	r3, #0
 80002ec:	60bb      	str	r3, [r7, #8]

	uint8_t PIN_Config = 0;
 80002ee:	2300      	movs	r3, #0
 80002f0:	73fb      	strb	r3, [r7, #15]
	ConfigRegister = (PinConfig->GPIO_PinNumber<GPIO_PIN_8)?(&GPIOx->GPIOx_CRL):(&GPIOx->GPIOx_CRH);
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	881b      	ldrh	r3, [r3, #0]
 80002f6:	2bff      	cmp	r3, #255	; 0xff
 80002f8:	d801      	bhi.n	80002fe <MCAL_GPIO_Init+0x1e>
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	e001      	b.n	8000302 <MCAL_GPIO_Init+0x22>
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	3304      	adds	r3, #4
 8000302:	60bb      	str	r3, [r7, #8]
	(*ConfigRegister) &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	881b      	ldrh	r3, [r3, #0]
 8000308:	4618      	mov	r0, r3
 800030a:	f7ff ff31 	bl	8000170 <Get_CRLH_Position>
 800030e:	4603      	mov	r3, r0
 8000310:	461a      	mov	r2, r3
 8000312:	230f      	movs	r3, #15
 8000314:	4093      	lsls	r3, r2
 8000316:	43da      	mvns	r2, r3
 8000318:	68bb      	ldr	r3, [r7, #8]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	401a      	ands	r2, r3
 800031e:	68bb      	ldr	r3, [r7, #8]
 8000320:	601a      	str	r2, [r3, #0]

	//if pin is output
	if((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD)||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP)||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD)||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	789b      	ldrb	r3, [r3, #2]
 8000326:	2b07      	cmp	r3, #7
 8000328:	d00b      	beq.n	8000342 <MCAL_GPIO_Init+0x62>
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	789b      	ldrb	r3, [r3, #2]
 800032e:	2b06      	cmp	r3, #6
 8000330:	d007      	beq.n	8000342 <MCAL_GPIO_Init+0x62>
 8000332:	683b      	ldr	r3, [r7, #0]
 8000334:	789b      	ldrb	r3, [r3, #2]
 8000336:	2b05      	cmp	r3, #5
 8000338:	d003      	beq.n	8000342 <MCAL_GPIO_Init+0x62>
 800033a:	683b      	ldr	r3, [r7, #0]
 800033c:	789b      	ldrb	r3, [r3, #2]
 800033e:	2b04      	cmp	r3, #4
 8000340:	d11c      	bne.n	800037c <MCAL_GPIO_Init+0x9c>
	{
		//Set CNFy[1:0] and MODEx[1:0]
		PIN_Config = ( (((PinConfig->GPIO_MODE -4) << 2) | ((PinConfig->GPIO_Output_Speed) << 0)) & 0x0F );
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	789b      	ldrb	r3, [r3, #2]
 8000346:	3b04      	subs	r3, #4
 8000348:	009b      	lsls	r3, r3, #2
 800034a:	b25a      	sxtb	r2, r3
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	78db      	ldrb	r3, [r3, #3]
 8000350:	b25b      	sxtb	r3, r3
 8000352:	4313      	orrs	r3, r2
 8000354:	b25b      	sxtb	r3, r3
 8000356:	b2db      	uxtb	r3, r3
 8000358:	f003 030f 	and.w	r3, r3, #15
 800035c:	73fb      	strb	r3, [r7, #15]
		(*ConfigRegister) |= ( (PIN_Config) <<Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 800035e:	7bfc      	ldrb	r4, [r7, #15]
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	881b      	ldrh	r3, [r3, #0]
 8000364:	4618      	mov	r0, r3
 8000366:	f7ff ff03 	bl	8000170 <Get_CRLH_Position>
 800036a:	4603      	mov	r3, r0
 800036c:	fa04 f203 	lsl.w	r2, r4, r3
 8000370:	68bb      	ldr	r3, [r7, #8]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	431a      	orrs	r2, r3
 8000376:	68bb      	ldr	r3, [r7, #8]
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	e02c      	b.n	80003d6 <MCAL_GPIO_Init+0xf6>
	}
	//if pin is input
	else //MODE = 00 :Input mode (reset state)
	{
		if((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO)||(PinConfig->GPIO_MODE == GPIO_MODE_ANALOG) )
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	789b      	ldrb	r3, [r3, #2]
 8000380:	2b01      	cmp	r3, #1
 8000382:	d003      	beq.n	800038c <MCAL_GPIO_Init+0xac>
 8000384:	683b      	ldr	r3, [r7, #0]
 8000386:	789b      	ldrb	r3, [r3, #2]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d107      	bne.n	800039c <MCAL_GPIO_Init+0xbc>
		{
			//Set CNFy[1:0] and MODEx[1:0]
			PIN_Config = ( (((PinConfig->GPIO_MODE) << 2) | 0x0 ) & 0x0F );
 800038c:	683b      	ldr	r3, [r7, #0]
 800038e:	789b      	ldrb	r3, [r3, #2]
 8000390:	009b      	lsls	r3, r3, #2
 8000392:	b2db      	uxtb	r3, r3
 8000394:	f003 030f 	and.w	r3, r3, #15
 8000398:	73fb      	strb	r3, [r7, #15]
 800039a:	e01c      	b.n	80003d6 <MCAL_GPIO_Init+0xf6>
		}
		else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT) //consider it  as input  floating
 800039c:	683b      	ldr	r3, [r7, #0]
 800039e:	789b      	ldrb	r3, [r3, #2]
 80003a0:	2b08      	cmp	r3, #8
 80003a2:	d102      	bne.n	80003aa <MCAL_GPIO_Init+0xca>
		{
			//Set CNFy[1:0] and MODEx[1:0]
			PIN_Config = ( (((GPIO_MODE_INPUT_FLO) << 2) | 0x0 ) & 0x0F );
 80003a4:	2304      	movs	r3, #4
 80003a6:	73fb      	strb	r3, [r7, #15]
 80003a8:	e015      	b.n	80003d6 <MCAL_GPIO_Init+0xf6>
		}
		else //PU PD Input
		{
			PIN_Config = ( (((GPIO_MODE_INPUT_PU) << 2) | 0x0 ) & 0x0F );
 80003aa:	2308      	movs	r3, #8
 80003ac:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 80003ae:	683b      	ldr	r3, [r7, #0]
 80003b0:	789b      	ldrb	r3, [r3, #2]
 80003b2:	2b02      	cmp	r3, #2
 80003b4:	d107      	bne.n	80003c6 <MCAL_GPIO_Init+0xe6>
			{
				//PxODR = 1 Input pull-up :Table 20. Port bit configuration table
				GPIOx->GPIOx_ODR |= PinConfig->GPIO_PinNumber;
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	68db      	ldr	r3, [r3, #12]
 80003ba:	683a      	ldr	r2, [r7, #0]
 80003bc:	8812      	ldrh	r2, [r2, #0]
 80003be:	431a      	orrs	r2, r3
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	60da      	str	r2, [r3, #12]
 80003c4:	e007      	b.n	80003d6 <MCAL_GPIO_Init+0xf6>
			}else{
				//PxODR = 0 Input pull-down :Table 20. Port bit configuration table
				GPIOx->GPIOx_ODR &= ~(PinConfig->GPIO_PinNumber);
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	68db      	ldr	r3, [r3, #12]
 80003ca:	683a      	ldr	r2, [r7, #0]
 80003cc:	8812      	ldrh	r2, [r2, #0]
 80003ce:	43d2      	mvns	r2, r2
 80003d0:	401a      	ands	r2, r3
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	60da      	str	r2, [r3, #12]

		}

	}
	//write on CRL or CRH
	(*ConfigRegister) |= ( (PIN_Config) <<Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 80003d6:	7bfc      	ldrb	r4, [r7, #15]
 80003d8:	683b      	ldr	r3, [r7, #0]
 80003da:	881b      	ldrh	r3, [r3, #0]
 80003dc:	4618      	mov	r0, r3
 80003de:	f7ff fec7 	bl	8000170 <Get_CRLH_Position>
 80003e2:	4603      	mov	r3, r0
 80003e4:	fa04 f203 	lsl.w	r2, r4, r3
 80003e8:	68bb      	ldr	r3, [r7, #8]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	431a      	orrs	r2, r3
 80003ee:	68bb      	ldr	r3, [r7, #8]
 80003f0:	601a      	str	r2, [r3, #0]
}
 80003f2:	bf00      	nop
 80003f4:	3714      	adds	r7, #20
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd90      	pop	{r4, r7, pc}

080003fa <MCAL_GPIO_ReadPin>:
 * @param [in] 			-PinNumber: specifies the port bit to read. Set by @ref GPIO_PINS_define
 * @retval 				-The input port pin value.
 * Note					-none
 */
uint8_t  MCAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx , uint16_t PinNumber)
{	uint8_t bitstatus;
 80003fa:	b480      	push	{r7}
 80003fc:	b085      	sub	sp, #20
 80003fe:	af00      	add	r7, sp, #0
 8000400:	6078      	str	r0, [r7, #4]
 8000402:	460b      	mov	r3, r1
 8000404:	807b      	strh	r3, [r7, #2]
if(((GPIOx->GPIOx_IDR) & PinNumber) != (uint32_t)GPIO_PIN_RESET){	//pin is 1
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	689a      	ldr	r2, [r3, #8]
 800040a:	887b      	ldrh	r3, [r7, #2]
 800040c:	4013      	ands	r3, r2
 800040e:	2b00      	cmp	r3, #0
 8000410:	d002      	beq.n	8000418 <MCAL_GPIO_ReadPin+0x1e>
	bitstatus=GPIO_PIN_SET;
 8000412:	2301      	movs	r3, #1
 8000414:	73fb      	strb	r3, [r7, #15]
 8000416:	e001      	b.n	800041c <MCAL_GPIO_ReadPin+0x22>
}else{
	bitstatus=GPIO_PIN_RESET; //pin is 0
 8000418:	2300      	movs	r3, #0
 800041a:	73fb      	strb	r3, [r7, #15]
}
return bitstatus;
 800041c:	7bfb      	ldrb	r3, [r7, #15]
}
 800041e:	4618      	mov	r0, r3
 8000420:	3714      	adds	r7, #20
 8000422:	46bd      	mov	sp, r7
 8000424:	bc80      	pop	{r7}
 8000426:	4770      	bx	lr

08000428 <MCAL_GPIO_WritePort>:
 * @param [in] 			-GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
 * @retval 				-none
 * Note					-none
 */
void MCAL_GPIO_WritePort(GPIO_TypeDef *GPIOx , uint16_t Value)
{
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
 8000430:	460b      	mov	r3, r1
 8000432:	807b      	strh	r3, [r7, #2]
	GPIOx->GPIOx_ODR = (uint32_t)Value;
 8000434:	887a      	ldrh	r2, [r7, #2]
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	60da      	str	r2, [r3, #12]
}
 800043a:	bf00      	nop
 800043c:	370c      	adds	r7, #12
 800043e:	46bd      	mov	sp, r7
 8000440:	bc80      	pop	{r7}
 8000442:	4770      	bx	lr

08000444 <MCAL_GPIO_WritePin>:
 *@param [in] 			-Value: Pin Value
 * @retval 				-none
 * Note					-none
 */
void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx , uint16_t PinNumber, uint8_t Value)
{
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
 800044c:	460b      	mov	r3, r1
 800044e:	807b      	strh	r3, [r7, #2]
 8000450:	4613      	mov	r3, r2
 8000452:	707b      	strb	r3, [r7, #1]

	if(Value != GPIO_PIN_RESET)
 8000454:	787b      	ldrb	r3, [r7, #1]
 8000456:	2b00      	cmp	r3, #0
 8000458:	d003      	beq.n	8000462 <MCAL_GPIO_WritePin+0x1e>
	{
		//	Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
		//	These bits are write-only and can be accessed in Word mode only.
		//	0: No action on the corresponding ODRx bit
		//	1: Set the corresponding ODRx bit
		GPIOx->GPIOx_BSRR=(uint32_t)PinNumber;
 800045a:	887a      	ldrh	r2, [r7, #2]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	611a      	str	r2, [r3, #16]


		//	or
		//	GPIOx->GPIOx_ODR &= ~(PinNumber) ;
	}
}
 8000460:	e002      	b.n	8000468 <MCAL_GPIO_WritePin+0x24>
		GPIOx->GPIOx_BRR=(uint32_t)PinNumber;
 8000462:	887a      	ldrh	r2, [r7, #2]
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	615a      	str	r2, [r3, #20]
}
 8000468:	bf00      	nop
 800046a:	370c      	adds	r7, #12
 800046c:	46bd      	mov	sp, r7
 800046e:	bc80      	pop	{r7}
 8000470:	4770      	bx	lr
	...

08000474 <KEYPAD_INIT>:
int KEYPAD_ROW[] = {R0,R1,R2,R3};
int KEYPAD_COLOUMN[] = {C0,C1,C2,C3}; 



void KEYPAD_INIT(void){
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0

	//set first 4 pins as input ROW
	//Data_Dir_KEYPAD &= ~(0b0000<<R0);
	PinCnfg.GPIO_PinNumber = R0;
 8000478:	4b37      	ldr	r3, [pc, #220]	; (8000558 <KEYPAD_INIT+0xe4>)
 800047a:	2201      	movs	r2, #1
 800047c:	801a      	strh	r2, [r3, #0]
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800047e:	4b36      	ldr	r3, [pc, #216]	; (8000558 <KEYPAD_INIT+0xe4>)
 8000480:	2204      	movs	r2, #4
 8000482:	709a      	strb	r2, [r3, #2]
	PinCnfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000484:	4b34      	ldr	r3, [pc, #208]	; (8000558 <KEYPAD_INIT+0xe4>)
 8000486:	2201      	movs	r2, #1
 8000488:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOB,&PinCnfg);
 800048a:	4933      	ldr	r1, [pc, #204]	; (8000558 <KEYPAD_INIT+0xe4>)
 800048c:	4833      	ldr	r0, [pc, #204]	; (800055c <KEYPAD_INIT+0xe8>)
 800048e:	f7ff ff27 	bl	80002e0 <MCAL_GPIO_Init>

	PinCnfg.GPIO_PinNumber = R1;
 8000492:	4b31      	ldr	r3, [pc, #196]	; (8000558 <KEYPAD_INIT+0xe4>)
 8000494:	2202      	movs	r2, #2
 8000496:	801a      	strh	r2, [r3, #0]
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000498:	4b2f      	ldr	r3, [pc, #188]	; (8000558 <KEYPAD_INIT+0xe4>)
 800049a:	2204      	movs	r2, #4
 800049c:	709a      	strb	r2, [r3, #2]
	PinCnfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800049e:	4b2e      	ldr	r3, [pc, #184]	; (8000558 <KEYPAD_INIT+0xe4>)
 80004a0:	2201      	movs	r2, #1
 80004a2:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOB, &PinCnfg);
 80004a4:	492c      	ldr	r1, [pc, #176]	; (8000558 <KEYPAD_INIT+0xe4>)
 80004a6:	482d      	ldr	r0, [pc, #180]	; (800055c <KEYPAD_INIT+0xe8>)
 80004a8:	f7ff ff1a 	bl	80002e0 <MCAL_GPIO_Init>

	PinCnfg.GPIO_PinNumber = R2;
 80004ac:	4b2a      	ldr	r3, [pc, #168]	; (8000558 <KEYPAD_INIT+0xe4>)
 80004ae:	2208      	movs	r2, #8
 80004b0:	801a      	strh	r2, [r3, #0]
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80004b2:	4b29      	ldr	r3, [pc, #164]	; (8000558 <KEYPAD_INIT+0xe4>)
 80004b4:	2204      	movs	r2, #4
 80004b6:	709a      	strb	r2, [r3, #2]
	PinCnfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80004b8:	4b27      	ldr	r3, [pc, #156]	; (8000558 <KEYPAD_INIT+0xe4>)
 80004ba:	2201      	movs	r2, #1
 80004bc:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOB, &PinCnfg);
 80004be:	4926      	ldr	r1, [pc, #152]	; (8000558 <KEYPAD_INIT+0xe4>)
 80004c0:	4826      	ldr	r0, [pc, #152]	; (800055c <KEYPAD_INIT+0xe8>)
 80004c2:	f7ff ff0d 	bl	80002e0 <MCAL_GPIO_Init>

	PinCnfg.GPIO_PinNumber = R3;
 80004c6:	4b24      	ldr	r3, [pc, #144]	; (8000558 <KEYPAD_INIT+0xe4>)
 80004c8:	2210      	movs	r2, #16
 80004ca:	801a      	strh	r2, [r3, #0]
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80004cc:	4b22      	ldr	r3, [pc, #136]	; (8000558 <KEYPAD_INIT+0xe4>)
 80004ce:	2204      	movs	r2, #4
 80004d0:	709a      	strb	r2, [r3, #2]
	PinCnfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80004d2:	4b21      	ldr	r3, [pc, #132]	; (8000558 <KEYPAD_INIT+0xe4>)
 80004d4:	2201      	movs	r2, #1
 80004d6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOB, &PinCnfg);
 80004d8:	491f      	ldr	r1, [pc, #124]	; (8000558 <KEYPAD_INIT+0xe4>)
 80004da:	4820      	ldr	r0, [pc, #128]	; (800055c <KEYPAD_INIT+0xe8>)
 80004dc:	f7ff ff00 	bl	80002e0 <MCAL_GPIO_Init>
	//set second 4 pins as output  COLOUMN
	//	Data_Dir_KEYPAD |= (0b1111<<C0);

	PinCnfg.GPIO_PinNumber = C0;
 80004e0:	4b1d      	ldr	r3, [pc, #116]	; (8000558 <KEYPAD_INIT+0xe4>)
 80004e2:	2220      	movs	r2, #32
 80004e4:	801a      	strh	r2, [r3, #0]
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80004e6:	4b1c      	ldr	r3, [pc, #112]	; (8000558 <KEYPAD_INIT+0xe4>)
 80004e8:	2204      	movs	r2, #4
 80004ea:	709a      	strb	r2, [r3, #2]
	PinCnfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80004ec:	4b1a      	ldr	r3, [pc, #104]	; (8000558 <KEYPAD_INIT+0xe4>)
 80004ee:	2201      	movs	r2, #1
 80004f0:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOB, &PinCnfg);
 80004f2:	4919      	ldr	r1, [pc, #100]	; (8000558 <KEYPAD_INIT+0xe4>)
 80004f4:	4819      	ldr	r0, [pc, #100]	; (800055c <KEYPAD_INIT+0xe8>)
 80004f6:	f7ff fef3 	bl	80002e0 <MCAL_GPIO_Init>

	PinCnfg.GPIO_PinNumber = C1;
 80004fa:	4b17      	ldr	r3, [pc, #92]	; (8000558 <KEYPAD_INIT+0xe4>)
 80004fc:	2240      	movs	r2, #64	; 0x40
 80004fe:	801a      	strh	r2, [r3, #0]
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000500:	4b15      	ldr	r3, [pc, #84]	; (8000558 <KEYPAD_INIT+0xe4>)
 8000502:	2204      	movs	r2, #4
 8000504:	709a      	strb	r2, [r3, #2]
	PinCnfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000506:	4b14      	ldr	r3, [pc, #80]	; (8000558 <KEYPAD_INIT+0xe4>)
 8000508:	2201      	movs	r2, #1
 800050a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOB, &PinCnfg);
 800050c:	4912      	ldr	r1, [pc, #72]	; (8000558 <KEYPAD_INIT+0xe4>)
 800050e:	4813      	ldr	r0, [pc, #76]	; (800055c <KEYPAD_INIT+0xe8>)
 8000510:	f7ff fee6 	bl	80002e0 <MCAL_GPIO_Init>

	PinCnfg.GPIO_PinNumber = C2;
 8000514:	4b10      	ldr	r3, [pc, #64]	; (8000558 <KEYPAD_INIT+0xe4>)
 8000516:	2280      	movs	r2, #128	; 0x80
 8000518:	801a      	strh	r2, [r3, #0]
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800051a:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <KEYPAD_INIT+0xe4>)
 800051c:	2204      	movs	r2, #4
 800051e:	709a      	strb	r2, [r3, #2]
	PinCnfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000520:	4b0d      	ldr	r3, [pc, #52]	; (8000558 <KEYPAD_INIT+0xe4>)
 8000522:	2201      	movs	r2, #1
 8000524:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOB, &PinCnfg);
 8000526:	490c      	ldr	r1, [pc, #48]	; (8000558 <KEYPAD_INIT+0xe4>)
 8000528:	480c      	ldr	r0, [pc, #48]	; (800055c <KEYPAD_INIT+0xe8>)
 800052a:	f7ff fed9 	bl	80002e0 <MCAL_GPIO_Init>

	PinCnfg.GPIO_PinNumber = C3;
 800052e:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <KEYPAD_INIT+0xe4>)
 8000530:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000534:	801a      	strh	r2, [r3, #0]
	PinCnfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000536:	4b08      	ldr	r3, [pc, #32]	; (8000558 <KEYPAD_INIT+0xe4>)
 8000538:	2204      	movs	r2, #4
 800053a:	709a      	strb	r2, [r3, #2]
	PinCnfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800053c:	4b06      	ldr	r3, [pc, #24]	; (8000558 <KEYPAD_INIT+0xe4>)
 800053e:	2201      	movs	r2, #1
 8000540:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOB, &PinCnfg);
 8000542:	4905      	ldr	r1, [pc, #20]	; (8000558 <KEYPAD_INIT+0xe4>)
 8000544:	4805      	ldr	r0, [pc, #20]	; (800055c <KEYPAD_INIT+0xe8>)
 8000546:	f7ff fecb 	bl	80002e0 <MCAL_GPIO_Init>


	//	KEYPAD_PORT = 0xFF;
	MCAL_GPIO_WritePort(KEYPAD_PORT, 0XFF);
 800054a:	21ff      	movs	r1, #255	; 0xff
 800054c:	4803      	ldr	r0, [pc, #12]	; (800055c <KEYPAD_INIT+0xe8>)
 800054e:	f7ff ff6b 	bl	8000428 <MCAL_GPIO_WritePort>

}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	2000005c 	.word	0x2000005c
 800055c:	40010c00 	.word	0x40010c00

08000560 <KEYPAD_GetChar>:

char KEYPAD_GetChar(void){
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
	int i , j;
	for (i=0; i<4 ; i++)
 8000566:	2300      	movs	r3, #0
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	e0b4      	b.n	80006d6 <KEYPAD_GetChar+0x176>
	{	
		//		KEYPAD_PORT |= 	((1<<KEYPAD_COLOUMN[0]) | (1<<KEYPAD_COLOUMN[1]) | (1<<KEYPAD_COLOUMN[2]) | (1<<KEYPAD_COLOUMN[3]));
		MCAL_GPIO_WritePin(KEYPAD_PORT, KEYPAD_COLOUMN[0], GPIO_PIN_SET);
 800056c:	4b5e      	ldr	r3, [pc, #376]	; (80006e8 <KEYPAD_GetChar+0x188>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	b29b      	uxth	r3, r3
 8000572:	2201      	movs	r2, #1
 8000574:	4619      	mov	r1, r3
 8000576:	485d      	ldr	r0, [pc, #372]	; (80006ec <KEYPAD_GetChar+0x18c>)
 8000578:	f7ff ff64 	bl	8000444 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, KEYPAD_COLOUMN[1], GPIO_PIN_SET);
 800057c:	4b5a      	ldr	r3, [pc, #360]	; (80006e8 <KEYPAD_GetChar+0x188>)
 800057e:	685b      	ldr	r3, [r3, #4]
 8000580:	b29b      	uxth	r3, r3
 8000582:	2201      	movs	r2, #1
 8000584:	4619      	mov	r1, r3
 8000586:	4859      	ldr	r0, [pc, #356]	; (80006ec <KEYPAD_GetChar+0x18c>)
 8000588:	f7ff ff5c 	bl	8000444 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, KEYPAD_COLOUMN[2], GPIO_PIN_SET);
 800058c:	4b56      	ldr	r3, [pc, #344]	; (80006e8 <KEYPAD_GetChar+0x188>)
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	b29b      	uxth	r3, r3
 8000592:	2201      	movs	r2, #1
 8000594:	4619      	mov	r1, r3
 8000596:	4855      	ldr	r0, [pc, #340]	; (80006ec <KEYPAD_GetChar+0x18c>)
 8000598:	f7ff ff54 	bl	8000444 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, KEYPAD_COLOUMN[3], GPIO_PIN_SET);
 800059c:	4b52      	ldr	r3, [pc, #328]	; (80006e8 <KEYPAD_GetChar+0x188>)
 800059e:	68db      	ldr	r3, [r3, #12]
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	2201      	movs	r2, #1
 80005a4:	4619      	mov	r1, r3
 80005a6:	4851      	ldr	r0, [pc, #324]	; (80006ec <KEYPAD_GetChar+0x18c>)
 80005a8:	f7ff ff4c 	bl	8000444 <MCAL_GPIO_WritePin>

		//		KEYPAD_PORT &= ~(1<<KEYPAD_COLOUMN[i]);
		MCAL_GPIO_WritePin(KEYPAD_PORT, KEYPAD_COLOUMN[i], GPIO_PIN_RESET);
 80005ac:	4a4e      	ldr	r2, [pc, #312]	; (80006e8 <KEYPAD_GetChar+0x188>)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005b4:	b29b      	uxth	r3, r3
 80005b6:	2200      	movs	r2, #0
 80005b8:	4619      	mov	r1, r3
 80005ba:	484c      	ldr	r0, [pc, #304]	; (80006ec <KEYPAD_GetChar+0x18c>)
 80005bc:	f7ff ff42 	bl	8000444 <MCAL_GPIO_WritePin>
		for (j=0;j<4;j++)
 80005c0:	2300      	movs	r3, #0
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	e080      	b.n	80006c8 <KEYPAD_GetChar+0x168>
		{	if (MCAL_GPIO_ReadPin(KEYPAD_PORT, KEYPAD_ROW[j])==0)
 80005c6:	4a4a      	ldr	r2, [pc, #296]	; (80006f0 <KEYPAD_GetChar+0x190>)
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005ce:	b29b      	uxth	r3, r3
 80005d0:	4619      	mov	r1, r3
 80005d2:	4846      	ldr	r0, [pc, #280]	; (80006ec <KEYPAD_GetChar+0x18c>)
 80005d4:	f7ff ff11 	bl	80003fa <MCAL_GPIO_ReadPin>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d171      	bne.n	80006c2 <KEYPAD_GetChar+0x162>
				{
			while (MCAL_GPIO_ReadPin(KEYPAD_PORT, KEYPAD_ROW[j])==0);
 80005de:	bf00      	nop
 80005e0:	4a43      	ldr	r2, [pc, #268]	; (80006f0 <KEYPAD_GetChar+0x190>)
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	4619      	mov	r1, r3
 80005ec:	483f      	ldr	r0, [pc, #252]	; (80006ec <KEYPAD_GetChar+0x18c>)
 80005ee:	f7ff ff04 	bl	80003fa <MCAL_GPIO_ReadPin>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d0f3      	beq.n	80005e0 <KEYPAD_GetChar+0x80>
			switch(i){
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	2b03      	cmp	r3, #3
 80005fc:	d861      	bhi.n	80006c2 <KEYPAD_GetChar+0x162>
 80005fe:	a201      	add	r2, pc, #4	; (adr r2, 8000604 <KEYPAD_GetChar+0xa4>)
 8000600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000604:	08000615 	.word	0x08000615
 8000608:	0800063d 	.word	0x0800063d
 800060c:	08000665 	.word	0x08000665
 8000610:	0800068d 	.word	0x0800068d
			case(0):
				if (j == 0)
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d101      	bne.n	800061e <KEYPAD_GetChar+0xbe>
					return '7';
 800061a:	2337      	movs	r3, #55	; 0x37
 800061c:	e060      	b.n	80006e0 <KEYPAD_GetChar+0x180>
				else if (j == 1)
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	2b01      	cmp	r3, #1
 8000622:	d101      	bne.n	8000628 <KEYPAD_GetChar+0xc8>
					return '4';
 8000624:	2334      	movs	r3, #52	; 0x34
 8000626:	e05b      	b.n	80006e0 <KEYPAD_GetChar+0x180>
				else if (j == 2)
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	2b02      	cmp	r3, #2
 800062c:	d101      	bne.n	8000632 <KEYPAD_GetChar+0xd2>
					return '1';
 800062e:	2331      	movs	r3, #49	; 0x31
 8000630:	e056      	b.n	80006e0 <KEYPAD_GetChar+0x180>
				else if (j == 3)
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	2b03      	cmp	r3, #3
 8000636:	d13d      	bne.n	80006b4 <KEYPAD_GetChar+0x154>
					return '!';
 8000638:	2321      	movs	r3, #33	; 0x21
 800063a:	e051      	b.n	80006e0 <KEYPAD_GetChar+0x180>
				break;

			case(1):
				if (j == 0)
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d101      	bne.n	8000646 <KEYPAD_GetChar+0xe6>
					return '8';
 8000642:	2338      	movs	r3, #56	; 0x38
 8000644:	e04c      	b.n	80006e0 <KEYPAD_GetChar+0x180>
				else if (j == 1)
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	2b01      	cmp	r3, #1
 800064a:	d101      	bne.n	8000650 <KEYPAD_GetChar+0xf0>
					return '5';
 800064c:	2335      	movs	r3, #53	; 0x35
 800064e:	e047      	b.n	80006e0 <KEYPAD_GetChar+0x180>
				else if (j == 2)
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	2b02      	cmp	r3, #2
 8000654:	d101      	bne.n	800065a <KEYPAD_GetChar+0xfa>
					return '2';
 8000656:	2332      	movs	r3, #50	; 0x32
 8000658:	e042      	b.n	80006e0 <KEYPAD_GetChar+0x180>
				else if (j == 3)
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	2b03      	cmp	r3, #3
 800065e:	d12b      	bne.n	80006b8 <KEYPAD_GetChar+0x158>
					return '0';
 8000660:	2330      	movs	r3, #48	; 0x30
 8000662:	e03d      	b.n	80006e0 <KEYPAD_GetChar+0x180>
				break;

			case(2):
				if (j == 0)
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d101      	bne.n	800066e <KEYPAD_GetChar+0x10e>
					return '9';
 800066a:	2339      	movs	r3, #57	; 0x39
 800066c:	e038      	b.n	80006e0 <KEYPAD_GetChar+0x180>
				else if (j == 1)
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	2b01      	cmp	r3, #1
 8000672:	d101      	bne.n	8000678 <KEYPAD_GetChar+0x118>
					return '6';
 8000674:	2336      	movs	r3, #54	; 0x36
 8000676:	e033      	b.n	80006e0 <KEYPAD_GetChar+0x180>
				else if (j == 2)
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	2b02      	cmp	r3, #2
 800067c:	d101      	bne.n	8000682 <KEYPAD_GetChar+0x122>
					return '3';
 800067e:	2333      	movs	r3, #51	; 0x33
 8000680:	e02e      	b.n	80006e0 <KEYPAD_GetChar+0x180>
				else if (j == 3)
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	2b03      	cmp	r3, #3
 8000686:	d119      	bne.n	80006bc <KEYPAD_GetChar+0x15c>
					return '=';
 8000688:	233d      	movs	r3, #61	; 0x3d
 800068a:	e029      	b.n	80006e0 <KEYPAD_GetChar+0x180>
				break;

			case(3):
				if (j == 0)
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d101      	bne.n	8000696 <KEYPAD_GetChar+0x136>
					return '/';
 8000692:	232f      	movs	r3, #47	; 0x2f
 8000694:	e024      	b.n	80006e0 <KEYPAD_GetChar+0x180>
				else if (j == 1)
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	2b01      	cmp	r3, #1
 800069a:	d101      	bne.n	80006a0 <KEYPAD_GetChar+0x140>
					return '*';
 800069c:	232a      	movs	r3, #42	; 0x2a
 800069e:	e01f      	b.n	80006e0 <KEYPAD_GetChar+0x180>
				else if (j == 2)
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	2b02      	cmp	r3, #2
 80006a4:	d101      	bne.n	80006aa <KEYPAD_GetChar+0x14a>
					return '-';
 80006a6:	232d      	movs	r3, #45	; 0x2d
 80006a8:	e01a      	b.n	80006e0 <KEYPAD_GetChar+0x180>
				else if (j == 3)
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	2b03      	cmp	r3, #3
 80006ae:	d107      	bne.n	80006c0 <KEYPAD_GetChar+0x160>
					return '+';
 80006b0:	232b      	movs	r3, #43	; 0x2b
 80006b2:	e015      	b.n	80006e0 <KEYPAD_GetChar+0x180>
				break;
 80006b4:	bf00      	nop
 80006b6:	e004      	b.n	80006c2 <KEYPAD_GetChar+0x162>
				break;
 80006b8:	bf00      	nop
 80006ba:	e002      	b.n	80006c2 <KEYPAD_GetChar+0x162>
				break;
 80006bc:	bf00      	nop
 80006be:	e000      	b.n	80006c2 <KEYPAD_GetChar+0x162>
				break;
 80006c0:	bf00      	nop
		for (j=0;j<4;j++)
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	3301      	adds	r3, #1
 80006c6:	603b      	str	r3, [r7, #0]
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	2b03      	cmp	r3, #3
 80006cc:	f77f af7b 	ble.w	80005c6 <KEYPAD_GetChar+0x66>
	for (i=0; i<4 ; i++)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	3301      	adds	r3, #1
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2b03      	cmp	r3, #3
 80006da:	f77f af47 	ble.w	800056c <KEYPAD_GetChar+0xc>
				}

		}
	}

	return 'A';
 80006de:	2341      	movs	r3, #65	; 0x41
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000010 	.word	0x20000010
 80006ec:	40010c00 	.word	0x40010c00
 80006f0:	20000000 	.word	0x20000000

080006f4 <my_wait>:
 * Created: 4/21/2024 11:02:25 AM
 *  Author: fadye
 */ 
#include "lcd.h"
GPIO_PINConfig_t PinCfg;
void my_wait(int x){
 80006f4:	b480      	push	{r7}
 80006f6:	b085      	sub	sp, #20
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	unsigned int i,j;
	for (i=0; i<x;i++){
 80006fc:	2300      	movs	r3, #0
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	e00b      	b.n	800071a <my_wait+0x26>
		for(j=0;j<255;j++);
 8000702:	2300      	movs	r3, #0
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	e002      	b.n	800070e <my_wait+0x1a>
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	3301      	adds	r3, #1
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	2bfe      	cmp	r3, #254	; 0xfe
 8000712:	d9f9      	bls.n	8000708 <my_wait+0x14>
	for (i=0; i<x;i++){
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	3301      	adds	r3, #1
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	68fa      	ldr	r2, [r7, #12]
 800071e:	429a      	cmp	r2, r3
 8000720:	d3ef      	bcc.n	8000702 <my_wait+0xe>
	}
}
 8000722:	bf00      	nop
 8000724:	bf00      	nop
 8000726:	3714      	adds	r7, #20
 8000728:	46bd      	mov	sp, r7
 800072a:	bc80      	pop	{r7}
 800072c:	4770      	bx	lr
	...

08000730 <LCD_init>:

void LCD_init(void){
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
	/* LCD Power ON delay always >15ms */
	my_wait(20);
 8000734:	2014      	movs	r0, #20
 8000736:	f7ff ffdd 	bl	80006f4 <my_wait>
//	LCD_IsBusy();
	//set  EN_SWITCH o/p
	PinCfg.GPIO_PinNumber = EN_SWITCH;
 800073a:	4b5b      	ldr	r3, [pc, #364]	; (80008a8 <LCD_init+0x178>)
 800073c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000740:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000742:	4b59      	ldr	r3, [pc, #356]	; (80008a8 <LCD_init+0x178>)
 8000744:	2201      	movs	r2, #1
 8000746:	70da      	strb	r2, [r3, #3]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000748:	4b57      	ldr	r3, [pc, #348]	; (80008a8 <LCD_init+0x178>)
 800074a:	2204      	movs	r2, #4
 800074c:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(GPIOA, &PinCfg);
 800074e:	4956      	ldr	r1, [pc, #344]	; (80008a8 <LCD_init+0x178>)
 8000750:	4856      	ldr	r0, [pc, #344]	; (80008ac <LCD_init+0x17c>)
 8000752:	f7ff fdc5 	bl	80002e0 <MCAL_GPIO_Init>

	//set  RW_SWITCH o/p
	PinCfg.GPIO_PinNumber = RW_SWITCH;
 8000756:	4b54      	ldr	r3, [pc, #336]	; (80008a8 <LCD_init+0x178>)
 8000758:	f44f 7200 	mov.w	r2, #512	; 0x200
 800075c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800075e:	4b52      	ldr	r3, [pc, #328]	; (80008a8 <LCD_init+0x178>)
 8000760:	2201      	movs	r2, #1
 8000762:	70da      	strb	r2, [r3, #3]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000764:	4b50      	ldr	r3, [pc, #320]	; (80008a8 <LCD_init+0x178>)
 8000766:	2204      	movs	r2, #4
 8000768:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(GPIOA, &PinCfg);
 800076a:	494f      	ldr	r1, [pc, #316]	; (80008a8 <LCD_init+0x178>)
 800076c:	484f      	ldr	r0, [pc, #316]	; (80008ac <LCD_init+0x17c>)
 800076e:	f7ff fdb7 	bl	80002e0 <MCAL_GPIO_Init>

	//set  RS_SWITCH o/p
	PinCfg.GPIO_PinNumber = RS_SWITCH;
 8000772:	4b4d      	ldr	r3, [pc, #308]	; (80008a8 <LCD_init+0x178>)
 8000774:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000778:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800077a:	4b4b      	ldr	r3, [pc, #300]	; (80008a8 <LCD_init+0x178>)
 800077c:	2201      	movs	r2, #1
 800077e:	70da      	strb	r2, [r3, #3]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000780:	4b49      	ldr	r3, [pc, #292]	; (80008a8 <LCD_init+0x178>)
 8000782:	2204      	movs	r2, #4
 8000784:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000786:	4948      	ldr	r1, [pc, #288]	; (80008a8 <LCD_init+0x178>)
 8000788:	4848      	ldr	r0, [pc, #288]	; (80008ac <LCD_init+0x17c>)
 800078a:	f7ff fda9 	bl	80002e0 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_0;
 800078e:	4b46      	ldr	r3, [pc, #280]	; (80008a8 <LCD_init+0x178>)
 8000790:	2201      	movs	r2, #1
 8000792:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000794:	4b44      	ldr	r3, [pc, #272]	; (80008a8 <LCD_init+0x178>)
 8000796:	2201      	movs	r2, #1
 8000798:	70da      	strb	r2, [r3, #3]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800079a:	4b43      	ldr	r3, [pc, #268]	; (80008a8 <LCD_init+0x178>)
 800079c:	2204      	movs	r2, #4
 800079e:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(GPIOA, &PinCfg);
 80007a0:	4941      	ldr	r1, [pc, #260]	; (80008a8 <LCD_init+0x178>)
 80007a2:	4842      	ldr	r0, [pc, #264]	; (80008ac <LCD_init+0x17c>)
 80007a4:	f7ff fd9c 	bl	80002e0 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 80007a8:	4b3f      	ldr	r3, [pc, #252]	; (80008a8 <LCD_init+0x178>)
 80007aa:	2202      	movs	r2, #2
 80007ac:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80007ae:	4b3e      	ldr	r3, [pc, #248]	; (80008a8 <LCD_init+0x178>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	70da      	strb	r2, [r3, #3]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80007b4:	4b3c      	ldr	r3, [pc, #240]	; (80008a8 <LCD_init+0x178>)
 80007b6:	2204      	movs	r2, #4
 80007b8:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(GPIOA, &PinCfg);
 80007ba:	493b      	ldr	r1, [pc, #236]	; (80008a8 <LCD_init+0x178>)
 80007bc:	483b      	ldr	r0, [pc, #236]	; (80008ac <LCD_init+0x17c>)
 80007be:	f7ff fd8f 	bl	80002e0 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 80007c2:	4b39      	ldr	r3, [pc, #228]	; (80008a8 <LCD_init+0x178>)
 80007c4:	2204      	movs	r2, #4
 80007c6:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80007c8:	4b37      	ldr	r3, [pc, #220]	; (80008a8 <LCD_init+0x178>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	70da      	strb	r2, [r3, #3]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80007ce:	4b36      	ldr	r3, [pc, #216]	; (80008a8 <LCD_init+0x178>)
 80007d0:	2204      	movs	r2, #4
 80007d2:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(GPIOA, &PinCfg);
 80007d4:	4934      	ldr	r1, [pc, #208]	; (80008a8 <LCD_init+0x178>)
 80007d6:	4835      	ldr	r0, [pc, #212]	; (80008ac <LCD_init+0x17c>)
 80007d8:	f7ff fd82 	bl	80002e0 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 80007dc:	4b32      	ldr	r3, [pc, #200]	; (80008a8 <LCD_init+0x178>)
 80007de:	2208      	movs	r2, #8
 80007e0:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80007e2:	4b31      	ldr	r3, [pc, #196]	; (80008a8 <LCD_init+0x178>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	70da      	strb	r2, [r3, #3]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80007e8:	4b2f      	ldr	r3, [pc, #188]	; (80008a8 <LCD_init+0x178>)
 80007ea:	2204      	movs	r2, #4
 80007ec:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(GPIOA, &PinCfg);
 80007ee:	492e      	ldr	r1, [pc, #184]	; (80008a8 <LCD_init+0x178>)
 80007f0:	482e      	ldr	r0, [pc, #184]	; (80008ac <LCD_init+0x17c>)
 80007f2:	f7ff fd75 	bl	80002e0 <MCAL_GPIO_Init>


	PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 80007f6:	4b2c      	ldr	r3, [pc, #176]	; (80008a8 <LCD_init+0x178>)
 80007f8:	2210      	movs	r2, #16
 80007fa:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80007fc:	4b2a      	ldr	r3, [pc, #168]	; (80008a8 <LCD_init+0x178>)
 80007fe:	2201      	movs	r2, #1
 8000800:	70da      	strb	r2, [r3, #3]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000802:	4b29      	ldr	r3, [pc, #164]	; (80008a8 <LCD_init+0x178>)
 8000804:	2204      	movs	r2, #4
 8000806:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000808:	4927      	ldr	r1, [pc, #156]	; (80008a8 <LCD_init+0x178>)
 800080a:	4828      	ldr	r0, [pc, #160]	; (80008ac <LCD_init+0x17c>)
 800080c:	f7ff fd68 	bl	80002e0 <MCAL_GPIO_Init>


	PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 8000810:	4b25      	ldr	r3, [pc, #148]	; (80008a8 <LCD_init+0x178>)
 8000812:	2220      	movs	r2, #32
 8000814:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000816:	4b24      	ldr	r3, [pc, #144]	; (80008a8 <LCD_init+0x178>)
 8000818:	2201      	movs	r2, #1
 800081a:	70da      	strb	r2, [r3, #3]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800081c:	4b22      	ldr	r3, [pc, #136]	; (80008a8 <LCD_init+0x178>)
 800081e:	2204      	movs	r2, #4
 8000820:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000822:	4921      	ldr	r1, [pc, #132]	; (80008a8 <LCD_init+0x178>)
 8000824:	4821      	ldr	r0, [pc, #132]	; (80008ac <LCD_init+0x17c>)
 8000826:	f7ff fd5b 	bl	80002e0 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 800082a:	4b1f      	ldr	r3, [pc, #124]	; (80008a8 <LCD_init+0x178>)
 800082c:	2240      	movs	r2, #64	; 0x40
 800082e:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000830:	4b1d      	ldr	r3, [pc, #116]	; (80008a8 <LCD_init+0x178>)
 8000832:	2201      	movs	r2, #1
 8000834:	70da      	strb	r2, [r3, #3]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000836:	4b1c      	ldr	r3, [pc, #112]	; (80008a8 <LCD_init+0x178>)
 8000838:	2204      	movs	r2, #4
 800083a:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(GPIOA, &PinCfg);
 800083c:	491a      	ldr	r1, [pc, #104]	; (80008a8 <LCD_init+0x178>)
 800083e:	481b      	ldr	r0, [pc, #108]	; (80008ac <LCD_init+0x17c>)
 8000840:	f7ff fd4e 	bl	80002e0 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 8000844:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <LCD_init+0x178>)
 8000846:	2280      	movs	r2, #128	; 0x80
 8000848:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800084a:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <LCD_init+0x178>)
 800084c:	2201      	movs	r2, #1
 800084e:	70da      	strb	r2, [r3, #3]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000850:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <LCD_init+0x178>)
 8000852:	2204      	movs	r2, #4
 8000854:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000856:	4914      	ldr	r1, [pc, #80]	; (80008a8 <LCD_init+0x178>)
 8000858:	4814      	ldr	r0, [pc, #80]	; (80008ac <LCD_init+0x17c>)
 800085a:	f7ff fd41 	bl	80002e0 <MCAL_GPIO_Init>

	//	Data_Dir_lcd_port |= (0xFF<<DATA_shift);
	MCAL_GPIO_WritePin(lcd_ctrl, EN_SWITCH, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000864:	4811      	ldr	r0, [pc, #68]	; (80008ac <LCD_init+0x17c>)
 8000866:	f7ff fded 	bl	8000444 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd_ctrl, RW_SWITCH, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000870:	480e      	ldr	r0, [pc, #56]	; (80008ac <LCD_init+0x17c>)
 8000872:	f7ff fde7 	bl	8000444 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd_ctrl, RS_SWITCH, GPIO_PIN_RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	f44f 7180 	mov.w	r1, #256	; 0x100
 800087c:	480b      	ldr	r0, [pc, #44]	; (80008ac <LCD_init+0x17c>)
 800087e:	f7ff fde1 	bl	8000444 <MCAL_GPIO_WritePin>
	my_wait(15);
 8000882:	200f      	movs	r0, #15
 8000884:	f7ff ff36 	bl	80006f4 <my_wait>
	LCD_Clear_Screen();
 8000888:	f000 f85e 	bl	8000948 <LCD_Clear_Screen>
	//check if 8-bit or 4-bit  mode
#ifdef EIGHT_BIT_MODE
	LCD_Command(LCD_FUNCTION_8BIT_2LINES);
 800088c:	2038      	movs	r0, #56	; 0x38
 800088e:	f000 f839 	bl	8000904 <LCD_Command>
/*
#ifdef FOUR_BIT_MODE
	LCD_Command(0x02);
	LCD_Command(LCD_FUNCTION_4BIT_2LINES);
#endif*/
	LCD_Command(LCD_ENTRY_MODE);
 8000892:	2006      	movs	r0, #6
 8000894:	f000 f836 	bl	8000904 <LCD_Command>
	LCD_Command(LCD_BEGIN_AT_FIRST_ROW);
 8000898:	2080      	movs	r0, #128	; 0x80
 800089a:	f000 f833 	bl	8000904 <LCD_Command>
	LCD_Command(LCD_DISP_ON_CURSOR_BLINK);
 800089e:	200f      	movs	r0, #15
 80008a0:	f000 f830 	bl	8000904 <LCD_Command>
}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000060 	.word	0x20000060
 80008ac:	40010800 	.word	0x40010800

080008b0 <LCD_GOTO_XY>:

void LCD_GOTO_XY(int line , int position){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	6039      	str	r1, [r7, #0]
	// check if 1st line
	if (line == 1)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d10c      	bne.n	80008da <LCD_GOTO_XY+0x2a>
	{	if (position < 16 && position >= 0 ){	
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	2b0f      	cmp	r3, #15
 80008c4:	dc09      	bgt.n	80008da <LCD_GOTO_XY+0x2a>
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	db06      	blt.n	80008da <LCD_GOTO_XY+0x2a>
		LCD_Command(LCD_BEGIN_AT_FIRST_ROW + position);
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	3b80      	subs	r3, #128	; 0x80
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	4618      	mov	r0, r3
 80008d6:	f000 f815 	bl	8000904 <LCD_Command>
	}
	}
	// check if 2nd line
	if (line == 2)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2b02      	cmp	r3, #2
 80008de:	d10c      	bne.n	80008fa <LCD_GOTO_XY+0x4a>
	{	if (position < 32 && position >= 0 ){
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	2b1f      	cmp	r3, #31
 80008e4:	dc09      	bgt.n	80008fa <LCD_GOTO_XY+0x4a>
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	db06      	blt.n	80008fa <LCD_GOTO_XY+0x4a>
		LCD_Command(LCD_BEGIN_AT_SECOND_ROW + position);
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	3b40      	subs	r3, #64	; 0x40
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 f805 	bl	8000904 <LCD_Command>
	}
	}
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
	...

08000904 <LCD_Command>:

void LCD_Command(unsigned char command){
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_WritePort(lcd_port, command);
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	b29b      	uxth	r3, r3
 8000912:	4619      	mov	r1, r3
 8000914:	480b      	ldr	r0, [pc, #44]	; (8000944 <LCD_Command+0x40>)
 8000916:	f7ff fd87 	bl	8000428 <MCAL_GPIO_WritePort>
//	ClearBit(lcd_ctrl,RW_SWITCH);
	MCAL_GPIO_WritePin(lcd_ctrl, RW_SWITCH, GPIO_PIN_RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000920:	4808      	ldr	r0, [pc, #32]	; (8000944 <LCD_Command+0x40>)
 8000922:	f7ff fd8f 	bl	8000444 <MCAL_GPIO_WritePin>
//	ClearBit(lcd_ctrl,RS_SWITCH);
	MCAL_GPIO_WritePin(lcd_ctrl, RS_SWITCH, GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	f44f 7180 	mov.w	r1, #256	; 0x100
 800092c:	4805      	ldr	r0, [pc, #20]	; (8000944 <LCD_Command+0x40>)
 800092e:	f7ff fd89 	bl	8000444 <MCAL_GPIO_WritePin>
	my_wait(1);
 8000932:	2001      	movs	r0, #1
 8000934:	f7ff fede 	bl	80006f4 <my_wait>
#ifdef EIGHT_BIT_MODE
	//Enable and disable pulse
	LCD_kick();
 8000938:	f000 f80e 	bl	8000958 <LCD_kick>
	//Enable and disable pulse
	LCD_kick();
#endif
*/

}
 800093c:	bf00      	nop
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40010800 	.word	0x40010800

08000948 <LCD_Clear_Screen>:


void LCD_Clear_Screen(void){
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
	LCD_Command(LCD_CLEAR_SCREEN);
 800094c:	2001      	movs	r0, #1
 800094e:	f7ff ffd9 	bl	8000904 <LCD_Command>
}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
	...

08000958 <LCD_kick>:

void LCD_kick(void){
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
//	ClearBit(lcd_ctrl,EN_SWITCH);
	MCAL_GPIO_WritePin(lcd_ctrl, EN_SWITCH, GPIO_PIN_SET);
 800095c:	2201      	movs	r2, #1
 800095e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000962:	4807      	ldr	r0, [pc, #28]	; (8000980 <LCD_kick+0x28>)
 8000964:	f7ff fd6e 	bl	8000444 <MCAL_GPIO_WritePin>
	my_wait(50);
 8000968:	2032      	movs	r0, #50	; 0x32
 800096a:	f7ff fec3 	bl	80006f4 <my_wait>
//	SetBit(lcd_ctrl,EN_SWITCH);
	MCAL_GPIO_WritePin(lcd_ctrl, EN_SWITCH, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000974:	4802      	ldr	r0, [pc, #8]	; (8000980 <LCD_kick+0x28>)
 8000976:	f7ff fd65 	bl	8000444 <MCAL_GPIO_WritePin>
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40010800 	.word	0x40010800

08000984 <LCD_WriteChar>:
	MCAL_GPIO_WritePin(lcd_ctrl, RW_SWITCH, GPIO_PIN_RESET);

}


void LCD_WriteChar(char data){
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_WritePort(lcd_port, data);
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	b29b      	uxth	r3, r3
 8000992:	4619      	mov	r1, r3
 8000994:	480b      	ldr	r0, [pc, #44]	; (80009c4 <LCD_WriteChar+0x40>)
 8000996:	f7ff fd47 	bl	8000428 <MCAL_GPIO_WritePort>
	//setting data mode
//	SetBit(lcd_ctrl,RS_SWITCH);
	MCAL_GPIO_WritePin(lcd_ctrl, RS_SWITCH, GPIO_PIN_SET);
 800099a:	2201      	movs	r2, #1
 800099c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009a0:	4808      	ldr	r0, [pc, #32]	; (80009c4 <LCD_WriteChar+0x40>)
 80009a2:	f7ff fd4f 	bl	8000444 <MCAL_GPIO_WritePin>
	//setting write mode
//	ClearBit(lcd_ctrl,RW_SWITCH);
	MCAL_GPIO_WritePin(lcd_ctrl, RW_SWITCH, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ac:	4805      	ldr	r0, [pc, #20]	; (80009c4 <LCD_WriteChar+0x40>)
 80009ae:	f7ff fd49 	bl	8000444 <MCAL_GPIO_WritePin>
	my_wait(1);
 80009b2:	2001      	movs	r0, #1
 80009b4:	f7ff fe9e 	bl	80006f4 <my_wait>
	//Enable and disable pulse
	LCD_kick();
	//command passed to the function
	lcd_port = (lcd_port & 0x0F)|(data << DATA_shift);
#endif*/
	LCD_kick();
 80009b8:	f7ff ffce 	bl	8000958 <LCD_kick>
}
 80009bc:	bf00      	nop
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40010800 	.word	0x40010800

080009c8 <LCD_WriteString>:


void LCD_WriteString( char* data){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
	int counter = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60fb      	str	r3, [r7, #12]
	while (*data > 0)
 80009d4:	e01c      	b.n	8000a10 <LCD_WriteString+0x48>
	{
		counter++;
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	3301      	adds	r3, #1
 80009da:	60fb      	str	r3, [r7, #12]
		LCD_WriteChar(*data++);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	1c5a      	adds	r2, r3, #1
 80009e0:	607a      	str	r2, [r7, #4]
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff ffcd 	bl	8000984 <LCD_WriteChar>
		if (counter == 16)
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	2b10      	cmp	r3, #16
 80009ee:	d104      	bne.n	80009fa <LCD_WriteString+0x32>
		{	
			LCD_GOTO_XY(2 , 0);
 80009f0:	2100      	movs	r1, #0
 80009f2:	2002      	movs	r0, #2
 80009f4:	f7ff ff5c 	bl	80008b0 <LCD_GOTO_XY>
 80009f8:	e00a      	b.n	8000a10 <LCD_WriteString+0x48>
		}
		else if (counter == 32)
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	2b20      	cmp	r3, #32
 80009fe:	d107      	bne.n	8000a10 <LCD_WriteString+0x48>
		{	
			// lcd is full must be cleared
			LCD_Clear_Screen();
 8000a00:	f7ff ffa2 	bl	8000948 <LCD_Clear_Screen>
			//begin at first row
			LCD_GOTO_XY(1,0);
 8000a04:	2100      	movs	r1, #0
 8000a06:	2001      	movs	r0, #1
 8000a08:	f7ff ff52 	bl	80008b0 <LCD_GOTO_XY>
			//reset counter
			counter = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60fb      	str	r3, [r7, #12]
	while (*data > 0)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d1de      	bne.n	80009d6 <LCD_WriteString+0xe>
		}
	}
}
 8000a18:	bf00      	nop
 8000a1a:	bf00      	nop
 8000a1c:	3710      	adds	r7, #16
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <SevenSeg_init>:
unsigned char DISPLAY[11] = {ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, ZERO};
unsigned char* P_LCD_DISPLAY = LCD_DISPLAY;
unsigned char* P_DISPLAY = DISPLAY;


void SevenSeg_init(){
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
	GPIO_PINConfig_t PinCfg;

	PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 8000a2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a2e:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000a30:	2304      	movs	r3, #4
 8000a32:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000a34:	2301      	movs	r3, #1
 8000a36:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4827      	ldr	r0, [pc, #156]	; (8000adc <SevenSeg_init+0xb8>)
 8000a3e:	f7ff fc4f 	bl	80002e0 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8000a42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a46:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000a48:	2304      	movs	r3, #4
 8000a4a:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	4619      	mov	r1, r3
 8000a54:	4821      	ldr	r0, [pc, #132]	; (8000adc <SevenSeg_init+0xb8>)
 8000a56:	f7ff fc43 	bl	80002e0 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 8000a5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a5e:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000a60:	2304      	movs	r3, #4
 8000a62:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000a64:	2301      	movs	r3, #1
 8000a66:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	481b      	ldr	r0, [pc, #108]	; (8000adc <SevenSeg_init+0xb8>)
 8000a6e:	f7ff fc37 	bl	80002e0 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_12;
 8000a72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a76:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000a78:	2304      	movs	r3, #4
 8000a7a:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000a80:	1d3b      	adds	r3, r7, #4
 8000a82:	4619      	mov	r1, r3
 8000a84:	4815      	ldr	r0, [pc, #84]	; (8000adc <SevenSeg_init+0xb8>)
 8000a86:	f7ff fc2b 	bl	80002e0 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_13;
 8000a8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a8e:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000a90:	2304      	movs	r3, #4
 8000a92:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000a94:	2301      	movs	r3, #1
 8000a96:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	480f      	ldr	r0, [pc, #60]	; (8000adc <SevenSeg_init+0xb8>)
 8000a9e:	f7ff fc1f 	bl	80002e0 <MCAL_GPIO_Init>
	PinCfg.GPIO_PinNumber = GPIO_PIN_14;
 8000aa2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000aa6:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000aa8:	2304      	movs	r3, #4
 8000aaa:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000aac:	2301      	movs	r3, #1
 8000aae:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000ab0:	1d3b      	adds	r3, r7, #4
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4809      	ldr	r0, [pc, #36]	; (8000adc <SevenSeg_init+0xb8>)
 8000ab6:	f7ff fc13 	bl	80002e0 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_15;
 8000aba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000abe:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000ac0:	2304      	movs	r3, #4
 8000ac2:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	4619      	mov	r1, r3
 8000acc:	4803      	ldr	r0, [pc, #12]	; (8000adc <SevenSeg_init+0xb8>)
 8000ace:	f7ff fc07 	bl	80002e0 <MCAL_GPIO_Init>
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40010c00 	.word	0x40010c00

08000ae0 <wait>:

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void wait(int x){
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	unsigned int i,j;
	for (i=0; i<x;i++){
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	e00b      	b.n	8000b06 <wait+0x26>
		for(j=0;j<255;j++);
 8000aee:	2300      	movs	r3, #0
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	e002      	b.n	8000afa <wait+0x1a>
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	3301      	adds	r3, #1
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	2bfe      	cmp	r3, #254	; 0xfe
 8000afe:	d9f9      	bls.n	8000af4 <wait+0x14>
	for (i=0; i<x;i++){
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	3301      	adds	r3, #1
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	68fa      	ldr	r2, [r7, #12]
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	d3ef      	bcc.n	8000aee <wait+0xe>
	}
}
 8000b0e:	bf00      	nop
 8000b10:	bf00      	nop
 8000b12:	3714      	adds	r7, #20
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr
	...

08000b1c <clock_init>:


void clock_init(){
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 8000b20:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <clock_init+0x24>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	4a06      	ldr	r2, [pc, #24]	; (8000b40 <clock_init+0x24>)
 8000b26:	f043 0304 	orr.w	r3, r3, #4
 8000b2a:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000b2c:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <clock_init+0x24>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	4a03      	ldr	r2, [pc, #12]	; (8000b40 <clock_init+0x24>)
 8000b32:	f043 0308 	orr.w	r3, r3, #8
 8000b36:	6193      	str	r3, [r2, #24]
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr
 8000b40:	40021000 	.word	0x40021000

08000b44 <main>:



int main()
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
	clock_init();
 8000b4a:	f7ff ffe7 	bl	8000b1c <clock_init>
	LCD_init();
 8000b4e:	f7ff fdef 	bl	8000730 <LCD_init>
	unsigned char key_pressed;
	LCD_WriteString("Congrats Fady !!!!");
 8000b52:	4825      	ldr	r0, [pc, #148]	; (8000be8 <main+0xa4>)
 8000b54:	f7ff ff38 	bl	80009c8 <LCD_WriteString>
	wait(500);
 8000b58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b5c:	f7ff ffc0 	bl	8000ae0 <wait>
	LCD_Clear_Screen();
 8000b60:	f7ff fef2 	bl	8000948 <LCD_Clear_Screen>
	SevenSeg_init();
 8000b64:	f7ff ff5e 	bl	8000a24 <SevenSeg_init>

	for (unsigned char i = 0; i < 11; i++) {
 8000b68:	2300      	movs	r3, #0
 8000b6a:	71fb      	strb	r3, [r7, #7]
 8000b6c:	e019      	b.n	8000ba2 <main+0x5e>
		LCD_WriteChar(P_LCD_DISPLAY[i]);
 8000b6e:	4b1f      	ldr	r3, [pc, #124]	; (8000bec <main+0xa8>)
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	4413      	add	r3, r2
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff ff03 	bl	8000984 <LCD_WriteChar>
		MCAL_GPIO_WritePort(GPIOB, P_DISPLAY[i] << 9); /* write data on to the LED port */
 8000b7e:	4b1c      	ldr	r3, [pc, #112]	; (8000bf0 <main+0xac>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	4413      	add	r3, r2
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	025b      	lsls	r3, r3, #9
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4818      	ldr	r0, [pc, #96]	; (8000bf4 <main+0xb0>)
 8000b92:	f7ff fc49 	bl	8000428 <MCAL_GPIO_WritePort>
		wait(100);
 8000b96:	2064      	movs	r0, #100	; 0x64
 8000b98:	f7ff ffa2 	bl	8000ae0 <wait>
	for (unsigned char i = 0; i < 11; i++) {
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	71fb      	strb	r3, [r7, #7]
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	2b0a      	cmp	r3, #10
 8000ba6:	d9e2      	bls.n	8000b6e <main+0x2a>
		/* wait for 1 second */
	}
	//	MCAL_GPIO_WritePort(GPIOB, 0xDE);
	//	wait_ms(100);
	LCD_Clear_Screen();
 8000ba8:	f7ff fece 	bl	8000948 <LCD_Clear_Screen>
	KEYPAD_INIT();
 8000bac:	f7ff fc62 	bl	8000474 <KEYPAD_INIT>
	LCD_WriteString("Keypad is ready");
 8000bb0:	4811      	ldr	r0, [pc, #68]	; (8000bf8 <main+0xb4>)
 8000bb2:	f7ff ff09 	bl	80009c8 <LCD_WriteString>
	wait(30);
 8000bb6:	201e      	movs	r0, #30
 8000bb8:	f7ff ff92 	bl	8000ae0 <wait>
	LCD_Clear_Screen();
 8000bbc:	f7ff fec4 	bl	8000948 <LCD_Clear_Screen>
	while(1){

		key_pressed = KEYPAD_GetChar();
 8000bc0:	f7ff fcce 	bl	8000560 <KEYPAD_GetChar>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	71bb      	strb	r3, [r7, #6]
		switch (key_pressed) {
 8000bc8:	79bb      	ldrb	r3, [r7, #6]
 8000bca:	2b21      	cmp	r3, #33	; 0x21
 8000bcc:	d002      	beq.n	8000bd4 <main+0x90>
 8000bce:	2b41      	cmp	r3, #65	; 0x41
 8000bd0:	d103      	bne.n	8000bda <main+0x96>
		case 'A':
		break;
 8000bd2:	e007      	b.n	8000be4 <main+0xa0>
		case '!':
			LCD_Clear_Screen();
 8000bd4:	f7ff feb8 	bl	8000948 <LCD_Clear_Screen>
			break;
 8000bd8:	e004      	b.n	8000be4 <main+0xa0>
		default:
			LCD_WriteChar(key_pressed);
 8000bda:	79bb      	ldrb	r3, [r7, #6]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff fed1 	bl	8000984 <LCD_WriteChar>
			break;
 8000be2:	bf00      	nop
		key_pressed = KEYPAD_GetChar();
 8000be4:	e7ec      	b.n	8000bc0 <main+0x7c>
 8000be6:	bf00      	nop
 8000be8:	08000cb0 	.word	0x08000cb0
 8000bec:	20000038 	.word	0x20000038
 8000bf0:	2000003c 	.word	0x2000003c
 8000bf4:	40010c00 	.word	0x40010c00
 8000bf8:	08000cc4 	.word	0x08000cc4

08000bfc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bfc:	480d      	ldr	r0, [pc, #52]	; (8000c34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bfe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c00:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c04:	480c      	ldr	r0, [pc, #48]	; (8000c38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c06:	490d      	ldr	r1, [pc, #52]	; (8000c3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c08:	4a0d      	ldr	r2, [pc, #52]	; (8000c40 <LoopForever+0xe>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c0c:	e002      	b.n	8000c14 <LoopCopyDataInit>

08000c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c12:	3304      	adds	r3, #4

08000c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c18:	d3f9      	bcc.n	8000c0e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1a:	4a0a      	ldr	r2, [pc, #40]	; (8000c44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c1c:	4c0a      	ldr	r4, [pc, #40]	; (8000c48 <LoopForever+0x16>)
  movs r3, #0
 8000c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c20:	e001      	b.n	8000c26 <LoopFillZerobss>

08000c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c24:	3204      	adds	r2, #4

08000c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c28:	d3fb      	bcc.n	8000c22 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c2a:	f000 f811 	bl	8000c50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c2e:	f7ff ff89 	bl	8000b44 <main>

08000c32 <LoopForever>:

LoopForever:
  b LoopForever
 8000c32:	e7fe      	b.n	8000c32 <LoopForever>
  ldr   r0, =_estack
 8000c34:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c3c:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8000c40:	08000cdc 	.word	0x08000cdc
  ldr r2, =_sbss
 8000c44:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8000c48:	20000064 	.word	0x20000064

08000c4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c4c:	e7fe      	b.n	8000c4c <ADC1_2_IRQHandler>
	...

08000c50 <__libc_init_array>:
 8000c50:	b570      	push	{r4, r5, r6, lr}
 8000c52:	2600      	movs	r6, #0
 8000c54:	4d0c      	ldr	r5, [pc, #48]	; (8000c88 <__libc_init_array+0x38>)
 8000c56:	4c0d      	ldr	r4, [pc, #52]	; (8000c8c <__libc_init_array+0x3c>)
 8000c58:	1b64      	subs	r4, r4, r5
 8000c5a:	10a4      	asrs	r4, r4, #2
 8000c5c:	42a6      	cmp	r6, r4
 8000c5e:	d109      	bne.n	8000c74 <__libc_init_array+0x24>
 8000c60:	f000 f81a 	bl	8000c98 <_init>
 8000c64:	2600      	movs	r6, #0
 8000c66:	4d0a      	ldr	r5, [pc, #40]	; (8000c90 <__libc_init_array+0x40>)
 8000c68:	4c0a      	ldr	r4, [pc, #40]	; (8000c94 <__libc_init_array+0x44>)
 8000c6a:	1b64      	subs	r4, r4, r5
 8000c6c:	10a4      	asrs	r4, r4, #2
 8000c6e:	42a6      	cmp	r6, r4
 8000c70:	d105      	bne.n	8000c7e <__libc_init_array+0x2e>
 8000c72:	bd70      	pop	{r4, r5, r6, pc}
 8000c74:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c78:	4798      	blx	r3
 8000c7a:	3601      	adds	r6, #1
 8000c7c:	e7ee      	b.n	8000c5c <__libc_init_array+0xc>
 8000c7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c82:	4798      	blx	r3
 8000c84:	3601      	adds	r6, #1
 8000c86:	e7f2      	b.n	8000c6e <__libc_init_array+0x1e>
 8000c88:	08000cd4 	.word	0x08000cd4
 8000c8c:	08000cd4 	.word	0x08000cd4
 8000c90:	08000cd4 	.word	0x08000cd4
 8000c94:	08000cd8 	.word	0x08000cd8

08000c98 <_init>:
 8000c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c9a:	bf00      	nop
 8000c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c9e:	bc08      	pop	{r3}
 8000ca0:	469e      	mov	lr, r3
 8000ca2:	4770      	bx	lr

08000ca4 <_fini>:
 8000ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ca6:	bf00      	nop
 8000ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000caa:	bc08      	pop	{r3}
 8000cac:	469e      	mov	lr, r3
 8000cae:	4770      	bx	lr
