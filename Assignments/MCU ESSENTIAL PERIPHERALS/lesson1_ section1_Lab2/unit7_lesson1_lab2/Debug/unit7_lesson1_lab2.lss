
unit7_lesson1_lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002bc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000340  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000097e  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ae  00000000  00000000  00000d22  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000442  00000000  00000000  000012d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001714  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000334  00000000  00000000  00001748  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000476  00000000  00000000  00001a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001ef2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 45 00 	call	0x8a	; 0x8a <main>
  64:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <GPIO_init>:
//#include <avr/io.h>
#include "util.h"

void GPIO_init(void){
//set PORT A AS OUTPUT
	DDRA |= 0xFF ;
  6c:	8a b3       	in	r24, 0x1a	; 26
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	8a bb       	out	0x1a, r24	; 26
//set PORT D PIN 4,5,6,7 AS OUTPUT
	DDRD |= 0xFF;
  72:	91 b3       	in	r25, 0x11	; 17
  74:	81 bb       	out	0x11, r24	; 17
//set PORT C PIN 0 AS INPUT
	ClearBit(DDRC,0);
  76:	84 b3       	in	r24, 0x14	; 20
  78:	8e 7f       	andi	r24, 0xFE	; 254
  7a:	84 bb       	out	0x14, r24	; 20
//set PIN 0 in PORTC as input pull up
	SetBit(PORTC,0);
  7c:	85 b3       	in	r24, 0x15	; 21
  7e:	81 60       	ori	r24, 0x01	; 1
  80:	85 bb       	out	0x15, r24	; 21
//set PORT C PIN 1 AS OUTPUT
	SetBit(DDRC,1);	
  82:	84 b3       	in	r24, 0x14	; 20
  84:	82 60       	ori	r24, 0x02	; 2
  86:	84 bb       	out	0x14, r24	; 20
  88:	08 95       	ret

0000008a <main>:

int main(void)
{
	unsigned char flag =0;
	unsigned char reverse_flag =7;
    GPIO_init();
  8a:	0e 94 36 00 	call	0x6c	; 0x6c <GPIO_init>
}

int main(void)
{
	unsigned char flag =0;
	unsigned char reverse_flag =7;
  8e:	97 e0       	ldi	r25, 0x07	; 7
	SetBit(DDRC,1);	
}

int main(void)
{
	unsigned char flag =0;
  90:	80 e0       	ldi	r24, 0x00	; 0
	unsigned char reverse_flag =7;
    GPIO_init();
    while (1) 
    {	
		if((ReadBit(PINC,0)==0))
  92:	98 99       	sbic	0x13, 0	; 19
  94:	86 c0       	rjmp	.+268    	; 0x1a2 <main+0x118>
			{
				if (flag==0)
  96:	81 11       	cpse	r24, r1
  98:	0f c0       	rjmp	.+30     	; 0xb8 <main+0x2e>
				{	
					ToggleBit(PORTA,0);
  9a:	3b b3       	in	r19, 0x1b	; 27
  9c:	21 e0       	ldi	r18, 0x01	; 1
  9e:	23 27       	eor	r18, r19
  a0:	2b bb       	out	0x1b, r18	; 27
					flag++;
  a2:	8f 5f       	subi	r24, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	2f ef       	ldi	r18, 0xFF	; 255
  a6:	34 e3       	ldi	r19, 0x34	; 52
  a8:	4c e0       	ldi	r20, 0x0C	; 12
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	30 40       	sbci	r19, 0x00	; 0
  ae:	40 40       	sbci	r20, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0x20>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x2a>
  b4:	00 00       	nop
  b6:	75 c0       	rjmp	.+234    	; 0x1a2 <main+0x118>
					_delay_ms(5);
				} 
				else if (flag==1)
  b8:	81 30       	cpi	r24, 0x01	; 1
  ba:	79 f4       	brne	.+30     	; 0xda <main+0x50>
				{
					ToggleBit(PORTA,1);
  bc:	3b b3       	in	r19, 0x1b	; 27
  be:	22 e0       	ldi	r18, 0x02	; 2
  c0:	23 27       	eor	r18, r19
  c2:	2b bb       	out	0x1b, r18	; 27
					flag++;
  c4:	8f 5f       	subi	r24, 0xFF	; 255
  c6:	2f ef       	ldi	r18, 0xFF	; 255
  c8:	34 e3       	ldi	r19, 0x34	; 52
  ca:	4c e0       	ldi	r20, 0x0C	; 12
  cc:	21 50       	subi	r18, 0x01	; 1
  ce:	30 40       	sbci	r19, 0x00	; 0
  d0:	40 40       	sbci	r20, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <main+0x42>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x4c>
  d6:	00 00       	nop
  d8:	64 c0       	rjmp	.+200    	; 0x1a2 <main+0x118>
					_delay_ms(5);
				}
				else if (flag==2)
  da:	82 30       	cpi	r24, 0x02	; 2
  dc:	79 f4       	brne	.+30     	; 0xfc <main+0x72>
				{
					ToggleBit(PORTA,2);
  de:	3b b3       	in	r19, 0x1b	; 27
  e0:	24 e0       	ldi	r18, 0x04	; 4
  e2:	23 27       	eor	r18, r19
  e4:	2b bb       	out	0x1b, r18	; 27
					flag++;
  e6:	8f 5f       	subi	r24, 0xFF	; 255
  e8:	2f ef       	ldi	r18, 0xFF	; 255
  ea:	34 e3       	ldi	r19, 0x34	; 52
  ec:	4c e0       	ldi	r20, 0x0C	; 12
  ee:	21 50       	subi	r18, 0x01	; 1
  f0:	30 40       	sbci	r19, 0x00	; 0
  f2:	40 40       	sbci	r20, 0x00	; 0
  f4:	e1 f7       	brne	.-8      	; 0xee <main+0x64>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <main+0x6e>
  f8:	00 00       	nop
  fa:	53 c0       	rjmp	.+166    	; 0x1a2 <main+0x118>
					_delay_ms(5);
				}
				else if (flag==3)
  fc:	83 30       	cpi	r24, 0x03	; 3
  fe:	79 f4       	brne	.+30     	; 0x11e <main+0x94>
				{
					ToggleBit(PORTA,3);
 100:	3b b3       	in	r19, 0x1b	; 27
 102:	28 e0       	ldi	r18, 0x08	; 8
 104:	23 27       	eor	r18, r19
 106:	2b bb       	out	0x1b, r18	; 27
					flag++;
 108:	8f 5f       	subi	r24, 0xFF	; 255
 10a:	2f ef       	ldi	r18, 0xFF	; 255
 10c:	34 e3       	ldi	r19, 0x34	; 52
 10e:	4c e0       	ldi	r20, 0x0C	; 12
 110:	21 50       	subi	r18, 0x01	; 1
 112:	30 40       	sbci	r19, 0x00	; 0
 114:	40 40       	sbci	r20, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <main+0x86>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x90>
 11a:	00 00       	nop
 11c:	42 c0       	rjmp	.+132    	; 0x1a2 <main+0x118>
					_delay_ms(5);
				}
				else if (flag==4)
 11e:	84 30       	cpi	r24, 0x04	; 4
 120:	79 f4       	brne	.+30     	; 0x140 <main+0xb6>
				{
					ToggleBit(PORTA,4);
 122:	3b b3       	in	r19, 0x1b	; 27
 124:	20 e1       	ldi	r18, 0x10	; 16
 126:	23 27       	eor	r18, r19
 128:	2b bb       	out	0x1b, r18	; 27
					flag++;
 12a:	8f 5f       	subi	r24, 0xFF	; 255
 12c:	2f ef       	ldi	r18, 0xFF	; 255
 12e:	34 e3       	ldi	r19, 0x34	; 52
 130:	4c e0       	ldi	r20, 0x0C	; 12
 132:	21 50       	subi	r18, 0x01	; 1
 134:	30 40       	sbci	r19, 0x00	; 0
 136:	40 40       	sbci	r20, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <main+0xa8>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <main+0xb2>
 13c:	00 00       	nop
 13e:	31 c0       	rjmp	.+98     	; 0x1a2 <main+0x118>
					_delay_ms(5);
				}
				else if (flag==5)
 140:	85 30       	cpi	r24, 0x05	; 5
 142:	79 f4       	brne	.+30     	; 0x162 <main+0xd8>
				{
					ToggleBit(PORTA,5);
 144:	3b b3       	in	r19, 0x1b	; 27
 146:	20 e2       	ldi	r18, 0x20	; 32
 148:	23 27       	eor	r18, r19
 14a:	2b bb       	out	0x1b, r18	; 27
					flag++;
 14c:	8f 5f       	subi	r24, 0xFF	; 255
 14e:	2f ef       	ldi	r18, 0xFF	; 255
 150:	34 e3       	ldi	r19, 0x34	; 52
 152:	4c e0       	ldi	r20, 0x0C	; 12
 154:	21 50       	subi	r18, 0x01	; 1
 156:	30 40       	sbci	r19, 0x00	; 0
 158:	40 40       	sbci	r20, 0x00	; 0
 15a:	e1 f7       	brne	.-8      	; 0x154 <main+0xca>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <main+0xd4>
 15e:	00 00       	nop
 160:	20 c0       	rjmp	.+64     	; 0x1a2 <main+0x118>
					_delay_ms(5);
				}
				else if (flag==6)
 162:	86 30       	cpi	r24, 0x06	; 6
 164:	79 f4       	brne	.+30     	; 0x184 <main+0xfa>
				{
					ToggleBit(PORTA,6);
 166:	3b b3       	in	r19, 0x1b	; 27
 168:	20 e4       	ldi	r18, 0x40	; 64
 16a:	23 27       	eor	r18, r19
 16c:	2b bb       	out	0x1b, r18	; 27
					flag++;
 16e:	8f 5f       	subi	r24, 0xFF	; 255
 170:	2f ef       	ldi	r18, 0xFF	; 255
 172:	34 e3       	ldi	r19, 0x34	; 52
 174:	4c e0       	ldi	r20, 0x0C	; 12
 176:	21 50       	subi	r18, 0x01	; 1
 178:	30 40       	sbci	r19, 0x00	; 0
 17a:	40 40       	sbci	r20, 0x00	; 0
 17c:	e1 f7       	brne	.-8      	; 0x176 <main+0xec>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <main+0xf6>
 180:	00 00       	nop
 182:	0f c0       	rjmp	.+30     	; 0x1a2 <main+0x118>
					_delay_ms(5);
				}
				else if (flag==7)
 184:	87 30       	cpi	r24, 0x07	; 7
 186:	69 f4       	brne	.+26     	; 0x1a2 <main+0x118>
				{
					ToggleBit(PORTA,7);
 188:	2b b3       	in	r18, 0x1b	; 27
 18a:	20 58       	subi	r18, 0x80	; 128
 18c:	2b bb       	out	0x1b, r18	; 27
					flag++;
 18e:	8f 5f       	subi	r24, 0xFF	; 255
 190:	2f ef       	ldi	r18, 0xFF	; 255
 192:	34 e3       	ldi	r19, 0x34	; 52
 194:	4c e0       	ldi	r20, 0x0C	; 12
 196:	21 50       	subi	r18, 0x01	; 1
 198:	30 40       	sbci	r19, 0x00	; 0
 19a:	40 40       	sbci	r20, 0x00	; 0
 19c:	e1 f7       	brne	.-8      	; 0x196 <main+0x10c>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <main+0x116>
 1a0:	00 00       	nop
				}
			}	
			
			
			
			if((ReadBit(PINC,0)==0)&&flag==8)
 1a2:	98 99       	sbic	0x13, 0	; 19
 1a4:	76 cf       	rjmp	.-276    	; 0x92 <main+0x8>
 1a6:	88 30       	cpi	r24, 0x08	; 8
 1a8:	09 f0       	breq	.+2      	; 0x1ac <main+0x122>
 1aa:	73 cf       	rjmp	.-282    	; 0x92 <main+0x8>
			{
				if (reverse_flag==7)
 1ac:	97 30       	cpi	r25, 0x07	; 7
 1ae:	71 f4       	brne	.+28     	; 0x1cc <main+0x142>
				{
					ToggleBit(PORTA,7);
 1b0:	2b b3       	in	r18, 0x1b	; 27
 1b2:	20 58       	subi	r18, 0x80	; 128
 1b4:	2b bb       	out	0x1b, r18	; 27
					reverse_flag--;
 1b6:	91 50       	subi	r25, 0x01	; 1
 1b8:	2f ef       	ldi	r18, 0xFF	; 255
 1ba:	34 e3       	ldi	r19, 0x34	; 52
 1bc:	4c e0       	ldi	r20, 0x0C	; 12
 1be:	21 50       	subi	r18, 0x01	; 1
 1c0:	30 40       	sbci	r19, 0x00	; 0
 1c2:	40 40       	sbci	r20, 0x00	; 0
 1c4:	e1 f7       	brne	.-8      	; 0x1be <main+0x134>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <main+0x13e>
 1c8:	00 00       	nop
 1ca:	63 cf       	rjmp	.-314    	; 0x92 <main+0x8>
					_delay_ms(5);
				}
				else if (reverse_flag==6)
 1cc:	96 30       	cpi	r25, 0x06	; 6
 1ce:	79 f4       	brne	.+30     	; 0x1ee <main+0x164>
				{
					ToggleBit(PORTA,6);
 1d0:	3b b3       	in	r19, 0x1b	; 27
 1d2:	20 e4       	ldi	r18, 0x40	; 64
 1d4:	23 27       	eor	r18, r19
 1d6:	2b bb       	out	0x1b, r18	; 27
					reverse_flag--;
 1d8:	91 50       	subi	r25, 0x01	; 1
 1da:	2f ef       	ldi	r18, 0xFF	; 255
 1dc:	34 e3       	ldi	r19, 0x34	; 52
 1de:	4c e0       	ldi	r20, 0x0C	; 12
 1e0:	21 50       	subi	r18, 0x01	; 1
 1e2:	30 40       	sbci	r19, 0x00	; 0
 1e4:	40 40       	sbci	r20, 0x00	; 0
 1e6:	e1 f7       	brne	.-8      	; 0x1e0 <main+0x156>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <main+0x160>
 1ea:	00 00       	nop
 1ec:	52 cf       	rjmp	.-348    	; 0x92 <main+0x8>
					_delay_ms(5);
				}
				else if (reverse_flag==5)
 1ee:	95 30       	cpi	r25, 0x05	; 5
 1f0:	79 f4       	brne	.+30     	; 0x210 <main+0x186>
				{
					ToggleBit(PORTA,5);
 1f2:	3b b3       	in	r19, 0x1b	; 27
 1f4:	20 e2       	ldi	r18, 0x20	; 32
 1f6:	23 27       	eor	r18, r19
 1f8:	2b bb       	out	0x1b, r18	; 27
					reverse_flag--;
 1fa:	91 50       	subi	r25, 0x01	; 1
 1fc:	2f ef       	ldi	r18, 0xFF	; 255
 1fe:	34 e3       	ldi	r19, 0x34	; 52
 200:	4c e0       	ldi	r20, 0x0C	; 12
 202:	21 50       	subi	r18, 0x01	; 1
 204:	30 40       	sbci	r19, 0x00	; 0
 206:	40 40       	sbci	r20, 0x00	; 0
 208:	e1 f7       	brne	.-8      	; 0x202 <main+0x178>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <main+0x182>
 20c:	00 00       	nop
 20e:	41 cf       	rjmp	.-382    	; 0x92 <main+0x8>
					_delay_ms(5);
				}
				else if (reverse_flag==4)
 210:	94 30       	cpi	r25, 0x04	; 4
 212:	79 f4       	brne	.+30     	; 0x232 <main+0x1a8>
				{
					ToggleBit(PORTA,4);
 214:	3b b3       	in	r19, 0x1b	; 27
 216:	20 e1       	ldi	r18, 0x10	; 16
 218:	23 27       	eor	r18, r19
 21a:	2b bb       	out	0x1b, r18	; 27
					reverse_flag--;
 21c:	91 50       	subi	r25, 0x01	; 1
 21e:	2f ef       	ldi	r18, 0xFF	; 255
 220:	34 e3       	ldi	r19, 0x34	; 52
 222:	4c e0       	ldi	r20, 0x0C	; 12
 224:	21 50       	subi	r18, 0x01	; 1
 226:	30 40       	sbci	r19, 0x00	; 0
 228:	40 40       	sbci	r20, 0x00	; 0
 22a:	e1 f7       	brne	.-8      	; 0x224 <main+0x19a>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <main+0x1a4>
 22e:	00 00       	nop
 230:	30 cf       	rjmp	.-416    	; 0x92 <main+0x8>
					_delay_ms(5);
				}
				else if (reverse_flag==3)
 232:	93 30       	cpi	r25, 0x03	; 3
 234:	79 f4       	brne	.+30     	; 0x254 <main+0x1ca>
				{
					ToggleBit(PORTA,3);
 236:	3b b3       	in	r19, 0x1b	; 27
 238:	28 e0       	ldi	r18, 0x08	; 8
 23a:	23 27       	eor	r18, r19
 23c:	2b bb       	out	0x1b, r18	; 27
					reverse_flag--;
 23e:	91 50       	subi	r25, 0x01	; 1
 240:	2f ef       	ldi	r18, 0xFF	; 255
 242:	34 e3       	ldi	r19, 0x34	; 52
 244:	4c e0       	ldi	r20, 0x0C	; 12
 246:	21 50       	subi	r18, 0x01	; 1
 248:	30 40       	sbci	r19, 0x00	; 0
 24a:	40 40       	sbci	r20, 0x00	; 0
 24c:	e1 f7       	brne	.-8      	; 0x246 <main+0x1bc>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <main+0x1c6>
 250:	00 00       	nop
 252:	1f cf       	rjmp	.-450    	; 0x92 <main+0x8>
					_delay_ms(5);
				}
				else if (reverse_flag==2)
 254:	92 30       	cpi	r25, 0x02	; 2
 256:	79 f4       	brne	.+30     	; 0x276 <main+0x1ec>
				{
					ToggleBit(PORTA,2);
 258:	3b b3       	in	r19, 0x1b	; 27
 25a:	24 e0       	ldi	r18, 0x04	; 4
 25c:	23 27       	eor	r18, r19
 25e:	2b bb       	out	0x1b, r18	; 27
					reverse_flag--;
 260:	91 50       	subi	r25, 0x01	; 1
 262:	2f ef       	ldi	r18, 0xFF	; 255
 264:	34 e3       	ldi	r19, 0x34	; 52
 266:	4c e0       	ldi	r20, 0x0C	; 12
 268:	21 50       	subi	r18, 0x01	; 1
 26a:	30 40       	sbci	r19, 0x00	; 0
 26c:	40 40       	sbci	r20, 0x00	; 0
 26e:	e1 f7       	brne	.-8      	; 0x268 <main+0x1de>
 270:	00 c0       	rjmp	.+0      	; 0x272 <main+0x1e8>
 272:	00 00       	nop
 274:	0e cf       	rjmp	.-484    	; 0x92 <main+0x8>
					_delay_ms(5);
				}
				else if (reverse_flag==1)
 276:	91 30       	cpi	r25, 0x01	; 1
 278:	79 f4       	brne	.+30     	; 0x298 <main+0x20e>
				{
					ToggleBit(PORTA,1);
 27a:	3b b3       	in	r19, 0x1b	; 27
 27c:	22 e0       	ldi	r18, 0x02	; 2
 27e:	23 27       	eor	r18, r19
 280:	2b bb       	out	0x1b, r18	; 27
					reverse_flag--;
 282:	91 50       	subi	r25, 0x01	; 1
 284:	2f ef       	ldi	r18, 0xFF	; 255
 286:	34 e3       	ldi	r19, 0x34	; 52
 288:	4c e0       	ldi	r20, 0x0C	; 12
 28a:	21 50       	subi	r18, 0x01	; 1
 28c:	30 40       	sbci	r19, 0x00	; 0
 28e:	40 40       	sbci	r20, 0x00	; 0
 290:	e1 f7       	brne	.-8      	; 0x28a <main+0x200>
 292:	00 c0       	rjmp	.+0      	; 0x294 <main+0x20a>
 294:	00 00       	nop
 296:	fd ce       	rjmp	.-518    	; 0x92 <main+0x8>
					_delay_ms(5);
				}
				else if (flag==0)
 298:	81 11       	cpse	r24, r1
 29a:	fb ce       	rjmp	.-522    	; 0x92 <main+0x8>
				{
					ToggleBit(PORTA,0);
 29c:	3b b3       	in	r19, 0x1b	; 27
 29e:	21 e0       	ldi	r18, 0x01	; 1
 2a0:	23 27       	eor	r18, r19
 2a2:	2b bb       	out	0x1b, r18	; 27
 2a4:	2f ef       	ldi	r18, 0xFF	; 255
 2a6:	34 e3       	ldi	r19, 0x34	; 52
 2a8:	4c e0       	ldi	r20, 0x0C	; 12
 2aa:	21 50       	subi	r18, 0x01	; 1
 2ac:	30 40       	sbci	r19, 0x00	; 0
 2ae:	40 40       	sbci	r20, 0x00	; 0
 2b0:	e1 f7       	brne	.-8      	; 0x2aa <main+0x220>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <main+0x22a>
 2b4:	00 00       	nop
 2b6:	ed ce       	rjmp	.-550    	; 0x92 <main+0x8>

000002b8 <_exit>:
 2b8:	f8 94       	cli

000002ba <__stop_program>:
 2ba:	ff cf       	rjmp	.-2      	; 0x2ba <__stop_program>
