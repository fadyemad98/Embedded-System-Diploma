
unit7_lesson2_section2_lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000368  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000368  000003dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000041c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b7d  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006fe  00000000  00000000  0000107d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000062b  00000000  00000000  0000177b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000148  00000000  00000000  00001da8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000426  00000000  00000000  00001ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000393  00000000  00000000  00002316  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  000026a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e6       	ldi	r30, 0x68	; 104
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 9f 01 	call	0x33e	; 0x33e <main>
  7a:	0c 94 b2 01 	jmp	0x364	; 0x364 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <KEYPAD_INIT>:
int KEYPAD_ROW[] = {R0,R1,R2,R3};
int KEYPAD_COLOUMN[] = {C0,C1,C2,C3}; 

void KEYPAD_INIT(void){
//set first 4 pins as input ROW
	Data_Dir_KEYPAD &= ~(0b0000<<R0);
  82:	84 b3       	in	r24, 0x14	; 20
  84:	84 bb       	out	0x14, r24	; 20
//set second 4 pins as output  COLOUMN
	Data_Dir_KEYPAD |= (0b1111<<C0);
  86:	84 b3       	in	r24, 0x14	; 20
  88:	80 6f       	ori	r24, 0xF0	; 240
  8a:	84 bb       	out	0x14, r24	; 20

	KEYPAD_PORT = 0xFF;
  8c:	8f ef       	ldi	r24, 0xFF	; 255
  8e:	85 bb       	out	0x15, r24	; 21
  90:	08 95       	ret

00000092 <KEYPAD_GetChar>:
}

char KEYPAD_GetChar(void){
  92:	0f 93       	push	r16
  94:	1f 93       	push	r17
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
	 int i , j;
	for (i=0; i<4 ; i++)
  9a:	40 e0       	ldi	r20, 0x00	; 0
  9c:	50 e0       	ldi	r21, 0x00	; 0
  9e:	9d c0       	rjmp	.+314    	; 0x1da <KEYPAD_GetChar+0x148>
	{	
		KEYPAD_PORT |= 	((1<<KEYPAD_COLOUMN[0]) | (1<<KEYPAD_COLOUMN[1]) | (1<<KEYPAD_COLOUMN[2]) | (1<<KEYPAD_COLOUMN[3]));
  a0:	35 b3       	in	r19, 0x15	; 21
  a2:	e0 e6       	ldi	r30, 0x60	; 96
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	8c 01       	movw	r16, r24
  ac:	00 80       	ld	r0, Z
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <KEYPAD_GetChar+0x22>
  b0:	00 0f       	add	r16, r16
  b2:	11 1f       	adc	r17, r17
  b4:	0a 94       	dec	r0
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <KEYPAD_GetChar+0x1e>
  b8:	ec 01       	movw	r28, r24
  ba:	02 80       	ldd	r0, Z+2	; 0x02
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <KEYPAD_GetChar+0x30>
  be:	cc 0f       	add	r28, r28
  c0:	dd 1f       	adc	r29, r29
  c2:	0a 94       	dec	r0
  c4:	e2 f7       	brpl	.-8      	; 0xbe <KEYPAD_GetChar+0x2c>
  c6:	dc 01       	movw	r26, r24
  c8:	04 80       	ldd	r0, Z+4	; 0x04
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <KEYPAD_GetChar+0x3e>
  cc:	aa 0f       	add	r26, r26
  ce:	bb 1f       	adc	r27, r27
  d0:	0a 94       	dec	r0
  d2:	e2 f7       	brpl	.-8      	; 0xcc <KEYPAD_GetChar+0x3a>
  d4:	bc 01       	movw	r22, r24
  d6:	06 80       	ldd	r0, Z+6	; 0x06
  d8:	02 c0       	rjmp	.+4      	; 0xde <KEYPAD_GetChar+0x4c>
  da:	66 0f       	add	r22, r22
  dc:	77 1f       	adc	r23, r23
  de:	0a 94       	dec	r0
  e0:	e2 f7       	brpl	.-8      	; 0xda <KEYPAD_GetChar+0x48>
  e2:	2c 2f       	mov	r18, r28
  e4:	20 2b       	or	r18, r16
  e6:	2a 2b       	or	r18, r26
  e8:	26 2b       	or	r18, r22
  ea:	23 2b       	or	r18, r19
  ec:	25 bb       	out	0x15, r18	; 21
		KEYPAD_PORT &= ~(1<<KEYPAD_COLOUMN[i]);
  ee:	25 b3       	in	r18, 0x15	; 21
  f0:	fa 01       	movw	r30, r20
  f2:	ee 0f       	add	r30, r30
  f4:	ff 1f       	adc	r31, r31
  f6:	e0 5a       	subi	r30, 0xA0	; 160
  f8:	ff 4f       	sbci	r31, 0xFF	; 255
  fa:	00 80       	ld	r0, Z
  fc:	02 c0       	rjmp	.+4      	; 0x102 <KEYPAD_GetChar+0x70>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	0a 94       	dec	r0
 104:	e2 f7       	brpl	.-8      	; 0xfe <KEYPAD_GetChar+0x6c>
 106:	80 95       	com	r24
 108:	82 23       	and	r24, r18
 10a:	85 bb       	out	0x15, r24	; 21
		for (j=0;j<4;j++)
 10c:	60 e0       	ldi	r22, 0x00	; 0
 10e:	70 e0       	ldi	r23, 0x00	; 0
 110:	5e c0       	rjmp	.+188    	; 0x1ce <KEYPAD_GetChar+0x13c>
		{	if (!(KEYPAD_PIN & (1<<KEYPAD_ROW[j])))
 112:	83 b3       	in	r24, 0x13	; 19
 114:	fb 01       	movw	r30, r22
 116:	ee 0f       	add	r30, r30
 118:	ff 1f       	adc	r31, r31
 11a:	e8 59       	subi	r30, 0x98	; 152
 11c:	ff 4f       	sbci	r31, 0xFF	; 255
 11e:	20 81       	ld	r18, Z
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 2e       	mov	r0, r18
 124:	02 c0       	rjmp	.+4      	; 0x12a <KEYPAD_GetChar+0x98>
 126:	95 95       	asr	r25
 128:	87 95       	ror	r24
 12a:	0a 94       	dec	r0
 12c:	e2 f7       	brpl	.-8      	; 0x126 <KEYPAD_GetChar+0x94>
 12e:	80 fd       	sbrc	r24, 0
 130:	4c c0       	rjmp	.+152    	; 0x1ca <KEYPAD_GetChar+0x138>
			{
				while (!(KEYPAD_PIN & (1<<KEYPAD_ROW[j])));
 132:	83 b3       	in	r24, 0x13	; 19
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	02 2e       	mov	r0, r18
 138:	02 c0       	rjmp	.+4      	; 0x13e <KEYPAD_GetChar+0xac>
 13a:	95 95       	asr	r25
 13c:	87 95       	ror	r24
 13e:	0a 94       	dec	r0
 140:	e2 f7       	brpl	.-8      	; 0x13a <KEYPAD_GetChar+0xa8>
 142:	80 ff       	sbrs	r24, 0
 144:	f6 cf       	rjmp	.-20     	; 0x132 <KEYPAD_GetChar+0xa0>
				switch(i){
 146:	41 30       	cpi	r20, 0x01	; 1
 148:	51 05       	cpc	r21, r1
 14a:	c9 f0       	breq	.+50     	; 0x17e <KEYPAD_GetChar+0xec>
 14c:	24 f4       	brge	.+8      	; 0x156 <KEYPAD_GetChar+0xc4>
 14e:	41 15       	cp	r20, r1
 150:	51 05       	cpc	r21, r1
 152:	41 f0       	breq	.+16     	; 0x164 <KEYPAD_GetChar+0xd2>
 154:	3a c0       	rjmp	.+116    	; 0x1ca <KEYPAD_GetChar+0x138>
 156:	42 30       	cpi	r20, 0x02	; 2
 158:	51 05       	cpc	r21, r1
 15a:	f1 f0       	breq	.+60     	; 0x198 <KEYPAD_GetChar+0x106>
 15c:	43 30       	cpi	r20, 0x03	; 3
 15e:	51 05       	cpc	r21, r1
 160:	41 f1       	breq	.+80     	; 0x1b2 <KEYPAD_GetChar+0x120>
 162:	33 c0       	rjmp	.+102    	; 0x1ca <KEYPAD_GetChar+0x138>
					case(0):{
						if (j == 0)
 164:	61 15       	cp	r22, r1
 166:	71 05       	cpc	r23, r1
 168:	f1 f1       	breq	.+124    	; 0x1e6 <KEYPAD_GetChar+0x154>
						return '7'; 
						else if (j == 1)
 16a:	61 30       	cpi	r22, 0x01	; 1
 16c:	71 05       	cpc	r23, r1
 16e:	e9 f1       	breq	.+122    	; 0x1ea <KEYPAD_GetChar+0x158>
						return '4';
						else if (j == 2)
 170:	62 30       	cpi	r22, 0x02	; 2
 172:	71 05       	cpc	r23, r1
 174:	e1 f1       	breq	.+120    	; 0x1ee <KEYPAD_GetChar+0x15c>
						return '1';
						else if (j == 3)
 176:	63 30       	cpi	r22, 0x03	; 3
 178:	71 05       	cpc	r23, r1
 17a:	39 f5       	brne	.+78     	; 0x1ca <KEYPAD_GetChar+0x138>
 17c:	3a c0       	rjmp	.+116    	; 0x1f2 <KEYPAD_GetChar+0x160>
						return '!';
						break;
					}
					case(1):{
						if (j == 0)
 17e:	61 15       	cp	r22, r1
 180:	71 05       	cpc	r23, r1
 182:	c9 f1       	breq	.+114    	; 0x1f6 <KEYPAD_GetChar+0x164>
						return '8';
						else if (j == 1)
 184:	61 30       	cpi	r22, 0x01	; 1
 186:	71 05       	cpc	r23, r1
 188:	c1 f1       	breq	.+112    	; 0x1fa <KEYPAD_GetChar+0x168>
						return '5';
						else if (j == 2)
 18a:	62 30       	cpi	r22, 0x02	; 2
 18c:	71 05       	cpc	r23, r1
 18e:	b9 f1       	breq	.+110    	; 0x1fe <KEYPAD_GetChar+0x16c>
						return '2';
						else if (j == 3)
 190:	63 30       	cpi	r22, 0x03	; 3
 192:	71 05       	cpc	r23, r1
 194:	d1 f4       	brne	.+52     	; 0x1ca <KEYPAD_GetChar+0x138>
 196:	35 c0       	rjmp	.+106    	; 0x202 <KEYPAD_GetChar+0x170>
						return '0';
						break;
					}
					case(2):{
						if (j == 0)
 198:	61 15       	cp	r22, r1
 19a:	71 05       	cpc	r23, r1
 19c:	a1 f1       	breq	.+104    	; 0x206 <KEYPAD_GetChar+0x174>
						return '9';
						else if (j == 1)
 19e:	61 30       	cpi	r22, 0x01	; 1
 1a0:	71 05       	cpc	r23, r1
 1a2:	99 f1       	breq	.+102    	; 0x20a <KEYPAD_GetChar+0x178>
						return '6';
						else if (j == 2)
 1a4:	62 30       	cpi	r22, 0x02	; 2
 1a6:	71 05       	cpc	r23, r1
 1a8:	91 f1       	breq	.+100    	; 0x20e <KEYPAD_GetChar+0x17c>
						return '3';
						else if (j == 3)
 1aa:	63 30       	cpi	r22, 0x03	; 3
 1ac:	71 05       	cpc	r23, r1
 1ae:	69 f4       	brne	.+26     	; 0x1ca <KEYPAD_GetChar+0x138>
 1b0:	30 c0       	rjmp	.+96     	; 0x212 <KEYPAD_GetChar+0x180>
						return '=';
						break;
					}
					case(3):{
						if (j == 0)
 1b2:	61 15       	cp	r22, r1
 1b4:	71 05       	cpc	r23, r1
 1b6:	79 f1       	breq	.+94     	; 0x216 <KEYPAD_GetChar+0x184>
						return '/';
						else if (j == 1)
 1b8:	61 30       	cpi	r22, 0x01	; 1
 1ba:	71 05       	cpc	r23, r1
 1bc:	71 f1       	breq	.+92     	; 0x21a <KEYPAD_GetChar+0x188>
						return '*';
						else if (j == 2)
 1be:	62 30       	cpi	r22, 0x02	; 2
 1c0:	71 05       	cpc	r23, r1
 1c2:	69 f1       	breq	.+90     	; 0x21e <KEYPAD_GetChar+0x18c>
						return '-';
						else if (j == 3)
 1c4:	63 30       	cpi	r22, 0x03	; 3
 1c6:	71 05       	cpc	r23, r1
 1c8:	61 f1       	breq	.+88     	; 0x222 <KEYPAD_GetChar+0x190>
	 int i , j;
	for (i=0; i<4 ; i++)
	{	
		KEYPAD_PORT |= 	((1<<KEYPAD_COLOUMN[0]) | (1<<KEYPAD_COLOUMN[1]) | (1<<KEYPAD_COLOUMN[2]) | (1<<KEYPAD_COLOUMN[3]));
		KEYPAD_PORT &= ~(1<<KEYPAD_COLOUMN[i]);
		for (j=0;j<4;j++)
 1ca:	6f 5f       	subi	r22, 0xFF	; 255
 1cc:	7f 4f       	sbci	r23, 0xFF	; 255
 1ce:	64 30       	cpi	r22, 0x04	; 4
 1d0:	71 05       	cpc	r23, r1
 1d2:	0c f4       	brge	.+2      	; 0x1d6 <KEYPAD_GetChar+0x144>
 1d4:	9e cf       	rjmp	.-196    	; 0x112 <KEYPAD_GetChar+0x80>
	KEYPAD_PORT = 0xFF;
}

char KEYPAD_GetChar(void){
	 int i , j;
	for (i=0; i<4 ; i++)
 1d6:	4f 5f       	subi	r20, 0xFF	; 255
 1d8:	5f 4f       	sbci	r21, 0xFF	; 255
 1da:	44 30       	cpi	r20, 0x04	; 4
 1dc:	51 05       	cpc	r21, r1
 1de:	0c f4       	brge	.+2      	; 0x1e2 <KEYPAD_GetChar+0x150>
 1e0:	5f cf       	rjmp	.-322    	; 0xa0 <KEYPAD_GetChar+0xe>
			}
			 
		}
	}
	
	return 'N';
 1e2:	8e e4       	ldi	r24, 0x4E	; 78
 1e4:	1f c0       	rjmp	.+62     	; 0x224 <KEYPAD_GetChar+0x192>
			{
				while (!(KEYPAD_PIN & (1<<KEYPAD_ROW[j])));
				switch(i){
					case(0):{
						if (j == 0)
						return '7'; 
 1e6:	87 e3       	ldi	r24, 0x37	; 55
 1e8:	1d c0       	rjmp	.+58     	; 0x224 <KEYPAD_GetChar+0x192>
						else if (j == 1)
						return '4';
 1ea:	84 e3       	ldi	r24, 0x34	; 52
 1ec:	1b c0       	rjmp	.+54     	; 0x224 <KEYPAD_GetChar+0x192>
						else if (j == 2)
						return '1';
 1ee:	81 e3       	ldi	r24, 0x31	; 49
 1f0:	19 c0       	rjmp	.+50     	; 0x224 <KEYPAD_GetChar+0x192>
						else if (j == 3)
						return '!';
 1f2:	81 e2       	ldi	r24, 0x21	; 33
 1f4:	17 c0       	rjmp	.+46     	; 0x224 <KEYPAD_GetChar+0x192>
						break;
					}
					case(1):{
						if (j == 0)
						return '8';
 1f6:	88 e3       	ldi	r24, 0x38	; 56
 1f8:	15 c0       	rjmp	.+42     	; 0x224 <KEYPAD_GetChar+0x192>
						else if (j == 1)
						return '5';
 1fa:	85 e3       	ldi	r24, 0x35	; 53
 1fc:	13 c0       	rjmp	.+38     	; 0x224 <KEYPAD_GetChar+0x192>
						else if (j == 2)
						return '2';
 1fe:	82 e3       	ldi	r24, 0x32	; 50
 200:	11 c0       	rjmp	.+34     	; 0x224 <KEYPAD_GetChar+0x192>
						else if (j == 3)
						return '0';
 202:	80 e3       	ldi	r24, 0x30	; 48
 204:	0f c0       	rjmp	.+30     	; 0x224 <KEYPAD_GetChar+0x192>
						break;
					}
					case(2):{
						if (j == 0)
						return '9';
 206:	89 e3       	ldi	r24, 0x39	; 57
 208:	0d c0       	rjmp	.+26     	; 0x224 <KEYPAD_GetChar+0x192>
						else if (j == 1)
						return '6';
 20a:	86 e3       	ldi	r24, 0x36	; 54
 20c:	0b c0       	rjmp	.+22     	; 0x224 <KEYPAD_GetChar+0x192>
						else if (j == 2)
						return '3';
 20e:	83 e3       	ldi	r24, 0x33	; 51
 210:	09 c0       	rjmp	.+18     	; 0x224 <KEYPAD_GetChar+0x192>
						else if (j == 3)
						return '=';
 212:	8d e3       	ldi	r24, 0x3D	; 61
 214:	07 c0       	rjmp	.+14     	; 0x224 <KEYPAD_GetChar+0x192>
						break;
					}
					case(3):{
						if (j == 0)
						return '/';
 216:	8f e2       	ldi	r24, 0x2F	; 47
 218:	05 c0       	rjmp	.+10     	; 0x224 <KEYPAD_GetChar+0x192>
						else if (j == 1)
						return '*';
 21a:	8a e2       	ldi	r24, 0x2A	; 42
 21c:	03 c0       	rjmp	.+6      	; 0x224 <KEYPAD_GetChar+0x192>
						else if (j == 2)
						return '-';
 21e:	8d e2       	ldi	r24, 0x2D	; 45
 220:	01 c0       	rjmp	.+2      	; 0x224 <KEYPAD_GetChar+0x192>
						else if (j == 3)
						return '+';
 222:	8b e2       	ldi	r24, 0x2B	; 43
			 
		}
	}
	
	return 'N';
}
 224:	df 91       	pop	r29
 226:	cf 91       	pop	r28
 228:	1f 91       	pop	r17
 22a:	0f 91       	pop	r16
 22c:	08 95       	ret

0000022e <LCD_kick>:
			LCD_GOTO_XY(1,0);
//reset counter
			counter = 0;
		}
	}
 }
 22e:	88 b3       	in	r24, 0x18	; 24
 230:	87 7f       	andi	r24, 0xF7	; 247
 232:	88 bb       	out	0x18, r24	; 24
 234:	8b e4       	ldi	r24, 0x4B	; 75
 236:	9d e1       	ldi	r25, 0x1D	; 29
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <LCD_kick+0xa>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <LCD_kick+0x10>
 23e:	00 00       	nop
 240:	88 b3       	in	r24, 0x18	; 24
 242:	88 60       	ori	r24, 0x08	; 8
 244:	88 bb       	out	0x18, r24	; 24
 246:	08 95       	ret

00000248 <LCD_IsBusy>:
 248:	8a b3       	in	r24, 0x1a	; 26
 24a:	1a ba       	out	0x1a, r1	; 26
 24c:	88 b3       	in	r24, 0x18	; 24
 24e:	84 60       	ori	r24, 0x04	; 4
 250:	88 bb       	out	0x18, r24	; 24
 252:	88 b3       	in	r24, 0x18	; 24
 254:	8d 7f       	andi	r24, 0xFD	; 253
 256:	88 bb       	out	0x18, r24	; 24
 258:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_kick>
 25c:	8a b3       	in	r24, 0x1a	; 26
 25e:	8f ef       	ldi	r24, 0xFF	; 255
 260:	8a bb       	out	0x1a, r24	; 26
 262:	88 b3       	in	r24, 0x18	; 24
 264:	8b 7f       	andi	r24, 0xFB	; 251
 266:	88 bb       	out	0x18, r24	; 24
 268:	08 95       	ret

0000026a <LCD_Command>:
 26a:	cf 93       	push	r28
 26c:	c8 2f       	mov	r28, r24
 26e:	88 b3       	in	r24, 0x18	; 24
 270:	8b 7f       	andi	r24, 0xFB	; 251
 272:	88 bb       	out	0x18, r24	; 24
 274:	88 b3       	in	r24, 0x18	; 24
 276:	8d 7f       	andi	r24, 0xFD	; 253
 278:	88 bb       	out	0x18, r24	; 24
 27a:	0e 94 24 01 	call	0x248	; 0x248 <LCD_IsBusy>
 27e:	cb bb       	out	0x1b, r28	; 27
 280:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_kick>
 284:	cf 91       	pop	r28
 286:	08 95       	ret

00000288 <LCD_Clear_Screen>:
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	0e 94 35 01 	call	0x26a	; 0x26a <LCD_Command>
 28e:	08 95       	ret

00000290 <LCD_init>:
 290:	87 e8       	ldi	r24, 0x87	; 135
 292:	93 e1       	ldi	r25, 0x13	; 19
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <LCD_init+0x4>
 298:	00 c0       	rjmp	.+0      	; 0x29a <LCD_init+0xa>
 29a:	00 00       	nop
 29c:	0e 94 24 01 	call	0x248	; 0x248 <LCD_IsBusy>
 2a0:	87 b3       	in	r24, 0x17	; 23
 2a2:	8e 60       	ori	r24, 0x0E	; 14
 2a4:	87 bb       	out	0x17, r24	; 23
 2a6:	88 b3       	in	r24, 0x18	; 24
 2a8:	81 7f       	andi	r24, 0xF1	; 241
 2aa:	88 bb       	out	0x18, r24	; 24
 2ac:	8a b3       	in	r24, 0x1a	; 26
 2ae:	8f ef       	ldi	r24, 0xFF	; 255
 2b0:	8a bb       	out	0x1a, r24	; 26
 2b2:	0e 94 44 01 	call	0x288	; 0x288 <LCD_Clear_Screen>
 2b6:	88 e3       	ldi	r24, 0x38	; 56
 2b8:	0e 94 35 01 	call	0x26a	; 0x26a <LCD_Command>
 2bc:	86 e0       	ldi	r24, 0x06	; 6
 2be:	0e 94 35 01 	call	0x26a	; 0x26a <LCD_Command>
 2c2:	80 e8       	ldi	r24, 0x80	; 128
 2c4:	0e 94 35 01 	call	0x26a	; 0x26a <LCD_Command>
 2c8:	8f e0       	ldi	r24, 0x0F	; 15
 2ca:	0e 94 35 01 	call	0x26a	; 0x26a <LCD_Command>
 2ce:	08 95       	ret

000002d0 <LCD_WriteChar>:
 2d0:	cf 93       	push	r28
 2d2:	c8 2f       	mov	r28, r24
 2d4:	0e 94 24 01 	call	0x248	; 0x248 <LCD_IsBusy>
 2d8:	88 b3       	in	r24, 0x18	; 24
 2da:	82 60       	ori	r24, 0x02	; 2
 2dc:	88 bb       	out	0x18, r24	; 24
 2de:	88 b3       	in	r24, 0x18	; 24
 2e0:	8b 7f       	andi	r24, 0xFB	; 251
 2e2:	88 bb       	out	0x18, r24	; 24
 2e4:	cb bb       	out	0x1b, r28	; 27
 2e6:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_kick>
 2ea:	cf 91       	pop	r28
 2ec:	08 95       	ret

000002ee <LCD_Wirte_Special_Char>:

void LCD_Wirte_Special_Char(void){
	LCD_Command(64);
 2ee:	80 e4       	ldi	r24, 0x40	; 64
 2f0:	0e 94 35 01 	call	0x26a	; 0x26a <LCD_Command>
	LCD_WriteChar(0);
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_WriteChar>
	LCD_WriteChar(14);
 2fa:	8e e0       	ldi	r24, 0x0E	; 14
 2fc:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_WriteChar>
	LCD_WriteChar(17);
 300:	81 e1       	ldi	r24, 0x11	; 17
 302:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_WriteChar>
	LCD_WriteChar(2);
 306:	82 e0       	ldi	r24, 0x02	; 2
 308:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_WriteChar>
	LCD_WriteChar(4);
 30c:	84 e0       	ldi	r24, 0x04	; 4
 30e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_WriteChar>
	LCD_WriteChar(4);
 312:	84 e0       	ldi	r24, 0x04	; 4
 314:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_WriteChar>
	LCD_WriteChar(0);
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_WriteChar>
	LCD_WriteChar(4);
 31e:	84 e0       	ldi	r24, 0x04	; 4
 320:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_WriteChar>
	LCD_Command(LCD_BEGIN_AT_FIRST_ROW);
 324:	80 e8       	ldi	r24, 0x80	; 128
 326:	0e 94 35 01 	call	0x26a	; 0x26a <LCD_Command>
	LCD_WriteChar(0);
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_WriteChar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 330:	83 ec       	ldi	r24, 0xC3	; 195
 332:	99 e0       	ldi	r25, 0x09	; 9
 334:	01 97       	sbiw	r24, 0x01	; 1
 336:	f1 f7       	brne	.-4      	; 0x334 <LCD_Wirte_Special_Char+0x46>
 338:	00 c0       	rjmp	.+0      	; 0x33a <LCD_Wirte_Special_Char+0x4c>
 33a:	00 00       	nop
 33c:	08 95       	ret

0000033e <main>:
#include <util/delay.h>
#include "memory_map.h"
#include "util.h"
int main(void)
{	
	LCD_init();
 33e:	0e 94 48 01 	call	0x290	; 0x290 <LCD_init>
	KEYPAD_INIT();
 342:	0e 94 41 00 	call	0x82	; 0x82 <KEYPAD_INIT>
	//LCD_WriteString("        Hello        ");
	//LCD_WriteString("   EMAD  KOFTAA");
	LCD_Wirte_Special_Char();
 346:	0e 94 77 01 	call	0x2ee	; 0x2ee <LCD_Wirte_Special_Char>
	char pressed_key;
	while (1)
	{
		pressed_key = KEYPAD_GetChar();
 34a:	0e 94 49 00 	call	0x92	; 0x92 <KEYPAD_GetChar>
		switch (pressed_key){
 34e:	81 32       	cpi	r24, 0x21	; 33
 350:	19 f0       	breq	.+6      	; 0x358 <main+0x1a>
 352:	8e 34       	cpi	r24, 0x4E	; 78
 354:	d1 f3       	breq	.-12     	; 0x34a <main+0xc>
 356:	03 c0       	rjmp	.+6      	; 0x35e <main+0x20>
			case ('!'):
			{
				LCD_Clear_Screen();
 358:	0e 94 44 01 	call	0x288	; 0x288 <LCD_Clear_Screen>
				break;
 35c:	f6 cf       	rjmp	.-20     	; 0x34a <main+0xc>
			}
			case ('N'):
				break;
			default:
				LCD_WriteChar(pressed_key);
 35e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_WriteChar>
				break;
 362:	f3 cf       	rjmp	.-26     	; 0x34a <main+0xc>

00000364 <_exit>:
 364:	f8 94       	cli

00000366 <__stop_program>:
 366:	ff cf       	rjmp	.-2      	; 0x366 <__stop_program>
