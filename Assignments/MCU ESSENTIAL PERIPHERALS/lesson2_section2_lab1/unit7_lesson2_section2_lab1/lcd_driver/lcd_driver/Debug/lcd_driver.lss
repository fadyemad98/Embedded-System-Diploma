
lcd_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000028e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  0000028e  00000302  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000031e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000350  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cf3  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000074b  00000000  00000000  000010ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005b4  00000000  00000000  0000183a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00001df0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038c  00000000  00000000  00001eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005ba  00000000  00000000  00002244  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  000027fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e8       	ldi	r30, 0x8E	; 142
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 26 01 	call	0x24c	; 0x24c <main>
  7a:	0c 94 45 01 	jmp	0x28a	; 0x28a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_Command>:
	LCD_Command_Port &= ~(1<<EN);
	_delay_ms(3);
#endif
	
#ifdef FOUR_MODE
	LCD_Data_Port = (LCD_Data_Port & 0x0F) | (cmnd & 0xF0);	/* Sending upper nibble */
  82:	9b b3       	in	r25, 0x1b	; 27
  84:	9f 70       	andi	r25, 0x0F	; 15
  86:	28 2f       	mov	r18, r24
  88:	20 7f       	andi	r18, 0xF0	; 240
  8a:	92 2b       	or	r25, r18
  8c:	9b bb       	out	0x1b, r25	; 27
	LCD_Command_Port &= ~ (1<<RS);							/* RS=0, command reg. */
  8e:	98 b3       	in	r25, 0x18	; 24
  90:	9e 7f       	andi	r25, 0xFE	; 254
  92:	98 bb       	out	0x18, r25	; 24
	LCD_Command_Port |= (1<<EN);							/* Enable pulse */
  94:	98 b3       	in	r25, 0x18	; 24
  96:	94 60       	ori	r25, 0x04	; 4
  98:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	00 00       	nop
	_delay_us(1);
	LCD_Command_Port &= ~ (1<<EN);
  9c:	98 b3       	in	r25, 0x18	; 24
  9e:	9b 7f       	andi	r25, 0xFB	; 251
  a0:	98 bb       	out	0x18, r25	; 24
  a2:	32 e4       	ldi	r19, 0x42	; 66
  a4:	3a 95       	dec	r19
  a6:	f1 f7       	brne	.-4      	; 0xa4 <LCD_Command+0x22>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <LCD_Command+0x28>
	_delay_us(200);
	LCD_Data_Port = (LCD_Data_Port & 0x0F) | (cmnd << 4);	/* Sending lower nibble */
  aa:	2b b3       	in	r18, 0x1b	; 27
  ac:	30 e1       	ldi	r19, 0x10	; 16
  ae:	83 9f       	mul	r24, r19
  b0:	c0 01       	movw	r24, r0
  b2:	11 24       	eor	r1, r1
  b4:	92 2f       	mov	r25, r18
  b6:	9f 70       	andi	r25, 0x0F	; 15
  b8:	89 2b       	or	r24, r25
  ba:	8b bb       	out	0x1b, r24	; 27
	LCD_Command_Port |= (1<<EN);
  bc:	88 b3       	in	r24, 0x18	; 24
  be:	84 60       	ori	r24, 0x04	; 4
  c0:	88 bb       	out	0x18, r24	; 24
  c2:	00 00       	nop
	_delay_us(1);
	LCD_Command_Port &= ~ (1<<EN);
  c4:	88 b3       	in	r24, 0x18	; 24
  c6:	8b 7f       	andi	r24, 0xFB	; 251
  c8:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	83 ef       	ldi	r24, 0xF3	; 243
  cc:	91 e0       	ldi	r25, 0x01	; 1
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <LCD_Command+0x4c>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <LCD_Command+0x52>
  d4:	00 00       	nop
  d6:	08 95       	ret

000000d8 <LCD_Char>:
	LCD_Command_Port &= ~(1<<EN);
	_delay_ms(50);
	#endif

	#ifdef FOUR_MODE
	LCD_Data_Port = (LCD_Data_Port & 0x0F) | (char_data & 0xF0);	/* sending upper nibble */
  d8:	9b b3       	in	r25, 0x1b	; 27
  da:	9f 70       	andi	r25, 0x0F	; 15
  dc:	28 2f       	mov	r18, r24
  de:	20 7f       	andi	r18, 0xF0	; 240
  e0:	92 2b       	or	r25, r18
  e2:	9b bb       	out	0x1b, r25	; 27
	LCD_Command_Port |= (1<<RS);									/* RS=1 Data reg. */
  e4:	98 b3       	in	r25, 0x18	; 24
  e6:	91 60       	ori	r25, 0x01	; 1
  e8:	98 bb       	out	0x18, r25	; 24
	LCD_Command_Port &= ~(1<<RW);									/* RW=0 write operation */
  ea:	98 b3       	in	r25, 0x18	; 24
  ec:	9d 7f       	andi	r25, 0xFD	; 253
  ee:	98 bb       	out	0x18, r25	; 24
	LCD_Command_Port |= (1<<EN);									/* Enable Pulse */
  f0:	98 b3       	in	r25, 0x18	; 24
  f2:	94 60       	ori	r25, 0x04	; 4
  f4:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f6:	00 00       	nop
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
  f8:	98 b3       	in	r25, 0x18	; 24
  fa:	9b 7f       	andi	r25, 0xFB	; 251
  fc:	98 bb       	out	0x18, r25	; 24
  fe:	32 e4       	ldi	r19, 0x42	; 66
 100:	3a 95       	dec	r19
 102:	f1 f7       	brne	.-4      	; 0x100 <LCD_Char+0x28>
 104:	00 c0       	rjmp	.+0      	; 0x106 <LCD_Char+0x2e>
	_delay_us(200);
	LCD_Data_Port = (LCD_Data_Port & 0x0F) | (char_data << 4); /* sending lower nibble */
 106:	2b b3       	in	r18, 0x1b	; 27
 108:	30 e1       	ldi	r19, 0x10	; 16
 10a:	83 9f       	mul	r24, r19
 10c:	c0 01       	movw	r24, r0
 10e:	11 24       	eor	r1, r1
 110:	92 2f       	mov	r25, r18
 112:	9f 70       	andi	r25, 0x0F	; 15
 114:	89 2b       	or	r24, r25
 116:	8b bb       	out	0x1b, r24	; 27
	LCD_Command_Port |= (1<<EN);		/* Enable Pulse */
 118:	88 b3       	in	r24, 0x18	; 24
 11a:	84 60       	ori	r24, 0x04	; 4
 11c:	88 bb       	out	0x18, r24	; 24
 11e:	00 00       	nop
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
 120:	88 b3       	in	r24, 0x18	; 24
 122:	8b 7f       	andi	r24, 0xFB	; 251
 124:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 126:	83 ef       	ldi	r24, 0xF3	; 243
 128:	91 e0       	ldi	r25, 0x01	; 1
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <LCD_Char+0x52>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <LCD_Char+0x58>
 130:	00 00       	nop
 132:	08 95       	ret

00000134 <LCD_Init>:
	#endif
}

void LCD_Init (void)					/* LCD Initialize function */
{
	LCD_Command_Dir = 0xFF;				/* Make LCD command port direction as o/p */
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	87 bb       	out	0x17, r24	; 23
	LCD_Data_Dir = 0xFF;				/* Make LCD data port direction as o/p */
 138:	8a bb       	out	0x1a, r24	; 26
 13a:	87 e8       	ldi	r24, 0x87	; 135
 13c:	93 e1       	ldi	r25, 0x13	; 19
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <LCD_Init+0xa>
 142:	00 c0       	rjmp	.+0      	; 0x144 <LCD_Init+0x10>
 144:	00 00       	nop
#ifdef EIGHT_MODE 
	LCD_Command (eight_bit_mode);							/* Initialization of 16X2 LCD in 8bit mode */
#endif

#ifdef FOUR_MODE
	LCD_Command (four_bit_mode);							/* Initialization of 16X2 LCD in 4bit mode */
 146:	82 e0       	ldi	r24, 0x02	; 2
 148:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_Command (four_bit_font);							/* 2 line, 5*7 matrix in 4-bit mode font */
 14c:	88 e2       	ldi	r24, 0x28	; 40
 14e:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
#endif
	LCD_Command (Display_ON_Cursor_OFF);					/* Display ON Cursor OFF */
 152:	8c e0       	ldi	r24, 0x0C	; 12
 154:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_Command (Auto_Increment_cursor);					/* Auto Increment cursor */
 158:	86 e0       	ldi	r24, 0x06	; 6
 15a:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_Command (clear_display);							/* clear display */
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_Command (cursor_at_home_position);					/* cursor at home position */
 164:	80 e8       	ldi	r24, 0x80	; 128
 166:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
 16a:	08 95       	ret

0000016c <LCD_String>:
}

void LCD_String (char *str)				/* Send string to LCD function */
{
 16c:	0f 93       	push	r16
 16e:	1f 93       	push	r17
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	8c 01       	movw	r16, r24
	int i;
	for(i=0;str[i]!=0;i++)				/* Send each char of string till the NULL */
 176:	c0 e0       	ldi	r28, 0x00	; 0
 178:	d0 e0       	ldi	r29, 0x00	; 0
 17a:	09 c0       	rjmp	.+18     	; 0x18e <LCD_String+0x22>
	{
		LCD_Char (str[i]);
 17c:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_Char>
 180:	83 ec       	ldi	r24, 0xC3	; 195
 182:	99 e0       	ldi	r25, 0x09	; 9
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <LCD_String+0x18>
 188:	00 c0       	rjmp	.+0      	; 0x18a <LCD_String+0x1e>
 18a:	00 00       	nop
}

void LCD_String (char *str)				/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)				/* Send each char of string till the NULL */
 18c:	21 96       	adiw	r28, 0x01	; 1
 18e:	f8 01       	movw	r30, r16
 190:	ec 0f       	add	r30, r28
 192:	fd 1f       	adc	r31, r29
 194:	80 81       	ld	r24, Z
 196:	81 11       	cpse	r24, r1
 198:	f1 cf       	rjmp	.-30     	; 0x17c <LCD_String+0x10>
	{
		LCD_Char (str[i]);
		_delay_ms(10);
	}
}
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	1f 91       	pop	r17
 1a0:	0f 91       	pop	r16
 1a2:	08 95       	ret

000001a4 <LCD_String_xy>:

void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD with xy position */
{
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	ea 01       	movw	r28, r20
	if (row == 0 && pos<16)
 1aa:	81 11       	cpse	r24, r1
 1ac:	08 c0       	rjmp	.+16     	; 0x1be <LCD_String_xy+0x1a>
 1ae:	60 31       	cpi	r22, 0x10	; 16
 1b0:	30 f4       	brcc	.+12     	; 0x1be <LCD_String_xy+0x1a>
	LCD_Command((pos & 0x0F)|cursor_at_home_position);		/* Command of first row and required position<16 */
 1b2:	86 2f       	mov	r24, r22
 1b4:	8f 70       	andi	r24, 0x0F	; 15
 1b6:	80 68       	ori	r24, 0x80	; 128
 1b8:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
 1bc:	09 c0       	rjmp	.+18     	; 0x1d0 <LCD_String_xy+0x2c>
	else if (row == 1 && pos<16)
 1be:	81 30       	cpi	r24, 0x01	; 1
 1c0:	39 f4       	brne	.+14     	; 0x1d0 <LCD_String_xy+0x2c>
 1c2:	60 31       	cpi	r22, 0x10	; 16
 1c4:	28 f4       	brcc	.+10     	; 0x1d0 <LCD_String_xy+0x2c>
	LCD_Command((pos & 0x0F)|Go_to_2nd_line);		/* Command of first row and required position<16 */
 1c6:	86 2f       	mov	r24, r22
 1c8:	8f 70       	andi	r24, 0x0F	; 15
 1ca:	80 6c       	ori	r24, 0xC0	; 192
 1cc:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_String(str);					/* Call LCD string function */
 1d0:	ce 01       	movw	r24, r28
 1d2:	0e 94 b6 00 	call	0x16c	; 0x16c <LCD_String>
}
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	08 95       	ret

000001dc <LCD_Clear>:

void LCD_Clear()
{
	LCD_Command (clear_display);					/* clear display */
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
 1e2:	81 ee       	ldi	r24, 0xE1	; 225
 1e4:	94 e0       	ldi	r25, 0x04	; 4
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <LCD_Clear+0xa>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <LCD_Clear+0x10>
 1ec:	00 00       	nop
	_delay_ms(5);
	LCD_Command (cursor_at_home_position);					/* cursor at home position */
 1ee:	80 e8       	ldi	r24, 0x80	; 128
 1f0:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
 1f4:	08 95       	ret

000001f6 <LCD_Roll_Display>:
}

void LCD_Roll_Display(){
	int i,shift;
	shift = 16;	/* Number of time shifts count=15 */
 1f6:	00 e1       	ldi	r16, 0x10	; 16
 1f8:	10 e0       	ldi	r17, 0x00	; 0
	while(1)
	{
		for(i=0;i<=shift;i++)
 1fa:	c0 e0       	ldi	r28, 0x00	; 0
 1fc:	d0 e0       	ldi	r29, 0x00	; 0
 1fe:	0d c0       	rjmp	.+26     	; 0x21a <LCD_Roll_Display+0x24>
		{
			LCD_Command(0x1c);/* shift entire display right */
 200:	8c e1       	ldi	r24, 0x1C	; 28
 202:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
 206:	2f e5       	ldi	r18, 0x5F	; 95
 208:	8a ee       	ldi	r24, 0xEA	; 234
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	21 50       	subi	r18, 0x01	; 1
 20e:	80 40       	sbci	r24, 0x00	; 0
 210:	90 40       	sbci	r25, 0x00	; 0
 212:	e1 f7       	brne	.-8      	; 0x20c <LCD_Roll_Display+0x16>
 214:	00 c0       	rjmp	.+0      	; 0x216 <LCD_Roll_Display+0x20>
 216:	00 00       	nop
void LCD_Roll_Display(){
	int i,shift;
	shift = 16;	/* Number of time shifts count=15 */
	while(1)
	{
		for(i=0;i<=shift;i++)
 218:	21 96       	adiw	r28, 0x01	; 1
 21a:	0c 17       	cp	r16, r28
 21c:	1d 07       	cpc	r17, r29
 21e:	84 f7       	brge	.-32     	; 0x200 <LCD_Roll_Display+0xa>
 220:	c0 e0       	ldi	r28, 0x00	; 0
 222:	d0 e0       	ldi	r29, 0x00	; 0
 224:	0d c0       	rjmp	.+26     	; 0x240 <LCD_Roll_Display+0x4a>
		}
		
		shift=31;/* number of time shifts 30 */
		for(i=0;i<=30;i++)
		{
			LCD_Command(0x18);/* shift entire display left */
 226:	88 e1       	ldi	r24, 0x18	; 24
 228:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
 22c:	2f e5       	ldi	r18, 0x5F	; 95
 22e:	8a ee       	ldi	r24, 0xEA	; 234
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	21 50       	subi	r18, 0x01	; 1
 234:	80 40       	sbci	r24, 0x00	; 0
 236:	90 40       	sbci	r25, 0x00	; 0
 238:	e1 f7       	brne	.-8      	; 0x232 <LCD_Roll_Display+0x3c>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <LCD_Roll_Display+0x46>
 23c:	00 00       	nop
			LCD_Command(0x1c);/* shift entire display right */
			_delay_ms(300);
		}
		
		shift=31;/* number of time shifts 30 */
		for(i=0;i<=30;i++)
 23e:	21 96       	adiw	r28, 0x01	; 1
		{
			LCD_Command(0x1c);/* shift entire display right */
			_delay_ms(300);
		}
		
		shift=31;/* number of time shifts 30 */
 240:	0f e1       	ldi	r16, 0x1F	; 31
 242:	10 e0       	ldi	r17, 0x00	; 0
		for(i=0;i<=30;i++)
 244:	cf 31       	cpi	r28, 0x1F	; 31
 246:	d1 05       	cpc	r29, r1
 248:	74 f3       	brlt	.-36     	; 0x226 <LCD_Roll_Display+0x30>
 24a:	d7 cf       	rjmp	.-82     	; 0x1fa <LCD_Roll_Display+0x4>

0000024c <main>:
#include <avr/io.h>
#include "LCD.h"

int main(void)
{
    LCD_Init();
 24c:	0e 94 9a 00 	call	0x134	; 0x134 <LCD_Init>
	LCD_Clear();
 250:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCD_Clear>
	LCD_String("fady emad");
 254:	80 e6       	ldi	r24, 0x60	; 96
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0e 94 b6 00 	call	0x16c	; 0x16c <LCD_String>
 25c:	87 e8       	ldi	r24, 0x87	; 135
 25e:	93 e1       	ldi	r25, 0x13	; 19
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <main+0x14>
 264:	00 c0       	rjmp	.+0      	; 0x266 <main+0x1a>
 266:	00 00       	nop
	_delay_ms(20);
	LCD_String_xy(1,0,"welcome test !!!!");
 268:	4a e6       	ldi	r20, 0x6A	; 106
 26a:	50 e0       	ldi	r21, 0x00	; 0
 26c:	60 e0       	ldi	r22, 0x00	; 0
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_String_xy>
 274:	87 e8       	ldi	r24, 0x87	; 135
 276:	93 e1       	ldi	r25, 0x13	; 19
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <main+0x2c>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <main+0x32>
 27e:	00 00       	nop
	_delay_ms(20);
	LCD_Roll_Display();
 280:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_Roll_Display>
	LCD_Clear();
 284:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCD_Clear>
 288:	ff cf       	rjmp	.-2      	; 0x288 <main+0x3c>

0000028a <_exit>:
 28a:	f8 94       	cli

0000028c <__stop_program>:
 28c:	ff cf       	rjmp	.-2      	; 0x28c <__stop_program>
